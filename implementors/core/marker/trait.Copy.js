(function() {var implementors = {};
implementors["aead"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["block_modes"] = [{"text":"impl Copy for BlockModeError","synthetic":false,"types":[]},{"text":"impl Copy for InvalidKeyIvLength","synthetic":false,"types":[]}];
implementors["block_padding"] = [{"text":"impl Copy for PadError","synthetic":false,"types":[]},{"text":"impl Copy for UnpadError","synthetic":false,"types":[]},{"text":"impl Copy for ZeroPadding","synthetic":false,"types":[]},{"text":"impl Copy for Pkcs7","synthetic":false,"types":[]},{"text":"impl Copy for AnsiX923","synthetic":false,"types":[]},{"text":"impl Copy for Iso7816","synthetic":false,"types":[]},{"text":"impl Copy for NoPadding","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["cbor_smol"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["cipher"] = [{"text":"impl Copy for InvalidKeyLength","synthetic":false,"types":[]},{"text":"impl Copy for LoopError","synthetic":false,"types":[]},{"text":"impl Copy for InvalidKeyNonceLength","synthetic":false,"types":[]},{"text":"impl Copy for OverflowError","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Copy for MacError","synthetic":false,"types":[]},{"text":"impl Copy for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["delog"] = [{"text":"impl Copy for Statistics","synthetic":false,"types":[]},{"text":"impl Copy for DefaultRenderer","synthetic":false,"types":[]},{"text":"impl Copy for RipgrepRenderer","synthetic":false,"types":[]}];
implementors["der"] = [{"text":"impl&lt;'a&gt; Copy for Any&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Copy + BigUIntSize&gt; Copy for BigUInt&lt;'a, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for BitString&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for GeneralizedTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Ia5String&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Null","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for OctetString&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for PrintableString&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Sequence&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UtcTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Utf8String&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]},{"text":"impl Copy for Header","synthetic":false,"types":[]},{"text":"impl Copy for Length","synthetic":false,"types":[]},{"text":"impl Copy for Tag","synthetic":false,"types":[]}];
implementors["des"] = [{"text":"impl Copy for Des","synthetic":false,"types":[]},{"text":"impl Copy for TdesEde3","synthetic":false,"types":[]},{"text":"impl Copy for TdesEee3","synthetic":false,"types":[]},{"text":"impl Copy for TdesEde2","synthetic":false,"types":[]},{"text":"impl Copy for TdesEee2","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Copy for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["embedded_hal"] = [{"text":"impl Copy for Polarity","synthetic":false,"types":[]},{"text":"impl Copy for Phase","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]},{"text":"impl Copy for Direction","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Copy, N&gt; Copy for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::ArrayType: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["half"] = [{"text":"impl Copy for bf16","synthetic":false,"types":[]},{"text":"impl Copy for f16","synthetic":false,"types":[]}];
implementors["interchange"] = [{"text":"impl Copy for State","synthetic":false,"types":[]}];
implementors["littlefs2"] = [{"text":"impl Copy for FileType","synthetic":false,"types":[]},{"text":"impl Copy for SeekFrom","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Version","synthetic":false,"types":[]}];
implementors["littlefs2_sys"] = [{"text":"impl Copy for __fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for lfs_config","synthetic":false,"types":[]},{"text":"impl Copy for lfs_info","synthetic":false,"types":[]},{"text":"impl Copy for lfs_attr","synthetic":false,"types":[]},{"text":"impl Copy for lfs_file_config","synthetic":false,"types":[]},{"text":"impl Copy for lfs_cache","synthetic":false,"types":[]},{"text":"impl Copy for lfs_mdir","synthetic":false,"types":[]},{"text":"impl Copy for lfs_dir","synthetic":false,"types":[]},{"text":"impl Copy for lfs_file","synthetic":false,"types":[]},{"text":"impl Copy for lfs_file_lfs_ctz","synthetic":false,"types":[]},{"text":"impl Copy for lfs_superblock","synthetic":false,"types":[]},{"text":"impl Copy for lfs_gstate","synthetic":false,"types":[]},{"text":"impl Copy for lfs","synthetic":false,"types":[]},{"text":"impl Copy for lfs_lfs_mlist","synthetic":false,"types":[]},{"text":"impl Copy for lfs_lfs_free","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["micro_ecc_sys"] = [{"text":"impl Copy for __fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for uECC_Curve_t","synthetic":false,"types":[]},{"text":"impl Copy for uECC_HashContext","synthetic":false,"types":[]}];
implementors["nb"] = [{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for Error&lt;E&gt;","synthetic":false,"types":[]}];
implementors["nisty"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Seed","synthetic":false,"types":[]},{"text":"impl Copy for SharedSecret","synthetic":false,"types":[]},{"text":"impl Copy for PublicKey","synthetic":false,"types":[]},{"text":"impl Copy for Signature","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["salty"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for PublicKey","synthetic":false,"types":[]},{"text":"impl Copy for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl Copy for CompressedY","synthetic":false,"types":[]},{"text":"impl Copy for FieldElement","synthetic":false,"types":[]},{"text":"impl Copy for MontgomeryPoint","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Copy for BytesDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_cbor"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl Copy for Choice","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CtOption&lt;T&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for RangeLimits","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Copy for AddBounds","synthetic":false,"types":[]},{"text":"impl Copy for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for VariantAst&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["trussed"] = [{"text":"impl Copy for ClientError","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Kind","synthetic":false,"types":[]},{"text":"impl Copy for Flags","synthetic":false,"types":[]},{"text":"impl Copy for Secrecy","synthetic":false,"types":[]},{"text":"impl Copy for Id","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for To","synthetic":false,"types":[]},{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for Urgency","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for AeadUniqueId","synthetic":false,"types":[]},{"text":"impl Copy for KeyAttributes","synthetic":false,"types":[]},{"text":"impl Copy for ObjectHandle","synthetic":false,"types":[]},{"text":"impl Copy for PublicKeyAttributes","synthetic":false,"types":[]},{"text":"impl Copy for PrivateKeyAttributes","synthetic":false,"types":[]},{"text":"impl Copy for Location","synthetic":false,"types":[]},{"text":"impl Copy for Mechanism","synthetic":false,"types":[]},{"text":"impl Copy for KeySerialization","synthetic":false,"types":[]},{"text":"impl Copy for SignatureSerialization","synthetic":false,"types":[]},{"text":"impl Copy for UniqueId","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Copy for B0","synthetic":false,"types":[]},{"text":"impl Copy for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Z0","synthetic":false,"types":[]},{"text":"impl Copy for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Copy, A:&nbsp;Copy&gt; Copy for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Greater","synthetic":false,"types":[]},{"text":"impl Copy for Less","synthetic":false,"types":[]},{"text":"impl Copy for Equal","synthetic":false,"types":[]}];
implementors["universal_hash"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Copy for Void","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()