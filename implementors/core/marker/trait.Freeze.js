(function() {var implementors = {};
implementors["aead"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Freeze for Aes128","synthetic":true,"types":[]},{"text":"impl Freeze for Aes192","synthetic":true,"types":[]},{"text":"impl Freeze for Aes256","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Freeze for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_modes"] = [{"text":"impl Freeze for BlockModeError","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidKeyIvLength","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for Cbc&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for Cfb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for Cfb8&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for Ecb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for Ofb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Freeze for Pcbc&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_padding"] = [{"text":"impl Freeze for PadError","synthetic":true,"types":[]},{"text":"impl Freeze for UnpadError","synthetic":true,"types":[]},{"text":"impl Freeze for ZeroPadding","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs7","synthetic":true,"types":[]},{"text":"impl Freeze for AnsiX923","synthetic":true,"types":[]},{"text":"impl Freeze for Iso7816","synthetic":true,"types":[]},{"text":"impl Freeze for NoPadding","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["cbor_smol"] = [{"text":"impl&lt;'de&gt; Freeze for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["chacha20"] = [{"text":"impl&lt;R&gt; Freeze for ChaCha&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8RngCore","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12RngCore","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20RngCore","synthetic":true,"types":[]},{"text":"impl Freeze for XChaCha20","synthetic":true,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl&lt;C&gt; Freeze for ChaChaPoly1305&lt;C&gt;","synthetic":true,"types":[]}];
implementors["cipher"] = [{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Freeze for LoopError","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidKeyNonceLength","synthetic":true,"types":[]},{"text":"impl Freeze for OverflowError","synthetic":true,"types":[]}];
implementors["cosey"] = [{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for P256PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for EcdhEsHkdf256PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Ed25519PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for TotpPublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for X25519PublicKey","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl !Freeze for LazyBool","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Freeze for MacError","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as Mac&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cstr_core"] = [{"text":"impl Freeze for CStr","synthetic":true,"types":[]},{"text":"impl Freeze for FromBytesWithNulError","synthetic":true,"types":[]}];
implementors["cty"] = [{"text":"impl Freeze for c_void","synthetic":true,"types":[]}];
implementors["delog"] = [{"text":"impl Freeze for U1","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, U, S&gt; Freeze for HexStr&lt;'a, T, U, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Statistics","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultRenderer","synthetic":true,"types":[]},{"text":"impl Freeze for RipgrepRenderer","synthetic":true,"types":[]}];
implementors["der"] = [{"text":"impl&lt;'a&gt; Freeze for Any&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Freeze for BigUInt&lt;'a, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GeneralizedTime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Ia5String&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OctetString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrintableString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sequence&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UtcTime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8String&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Encoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for Length","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]}];
implementors["des"] = [{"text":"impl Freeze for Des","synthetic":true,"types":[]},{"text":"impl Freeze for TdesEde3","synthetic":true,"types":[]},{"text":"impl Freeze for TdesEee3","synthetic":true,"types":[]},{"text":"impl Freeze for TdesEde2","synthetic":true,"types":[]},{"text":"impl Freeze for TdesEee2","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Freeze for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["embedded_hal"] = [{"text":"impl&lt;T&gt; Freeze for OldOutputPin&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OldInputPin&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Polarity","synthetic":true,"types":[]},{"text":"impl Freeze for Phase","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for Direction","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["half"] = [{"text":"impl Freeze for bf16","synthetic":true,"types":[]},{"text":"impl Freeze for f16","synthetic":true,"types":[]}];
implementors["hash32"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]},{"text":"impl Freeze for Hasher","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for BuildHasherDefault&lt;H&gt;","synthetic":true,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;T, N&gt; Freeze for HistoryBuffer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N, S&gt; Freeze for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Bucket&lt;K, V&gt;&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Option&lt;Pos&gt;&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N, S&gt; Freeze for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Bucket&lt;T, ()&gt;&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Option&lt;Pos&gt;&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N&gt; Freeze for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;(K, V)&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for String&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Min","synthetic":true,"types":[]},{"text":"impl Freeze for Max","synthetic":true,"types":[]},{"text":"impl&lt;T, N, KIND&gt; Freeze for BinaryHeap&lt;T, N, KIND&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, K&gt; Freeze for PeekMut&lt;'a, T, N, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, K&gt; Freeze for BinaryHeap&lt;A, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for LinearMap&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, U&nbsp;=&nbsp;usize, C&nbsp;=&nbsp;MultiCore&gt; !Freeze for Queue&lt;A, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for String&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Vec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q2&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q4&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q8&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q16&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q32&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q64&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;POOL, STATE&gt; Freeze for Box&lt;POOL, STATE&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Node&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Pool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, STATE&gt; Freeze for Box&lt;T, STATE&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Uninit","synthetic":true,"types":[]},{"text":"impl Freeze for Init","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for Consumer&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for Producer&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MultiCore","synthetic":true,"types":[]},{"text":"impl Freeze for SingleCore","synthetic":true,"types":[]},{"text":"impl&lt;T, N, U&nbsp;=&nbsp;usize, C&nbsp;=&nbsp;MultiCore&gt; !Freeze for Queue&lt;T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for Iter&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for IterMut&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]}];
implementors["heapless_bytes"] = [{"text":"impl&lt;N&gt; Freeze for Bytes&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Freeze for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["interchange"] = [{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Requester&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Responder&lt;I&gt;","synthetic":true,"types":[]}];
implementors["littlefs2"] = [{"text":"impl&lt;Storage&gt; Freeze for Allocation&lt;Storage&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Storage as Storage&gt;::CACHE_SIZE as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Storage as Storage&gt;::LOOKAHEADWORDS_SIZE as ArrayLength&lt;u32&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Storage&gt; !Freeze for Filesystem&lt;'a, Storage&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FileType","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Attribute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Storage&gt;::ATTRBYTES_MAX as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for FileAllocation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Storage&gt;::CACHE_SIZE as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; !Freeze for File&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirAllocation","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; !Freeze for ReadDir&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SeekFrom","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathBuf","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]}];
implementors["littlefs2_sys"] = [{"text":"impl Freeze for __fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_config","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_info","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_attr","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_file_config","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_cache","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_mdir","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_dir","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_file","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_file_lfs_ctz","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_superblock","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_gstate","synthetic":true,"types":[]},{"text":"impl Freeze for lfs","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_lfs_mlist","synthetic":true,"types":[]},{"text":"impl Freeze for lfs_lfs_free","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["micro_ecc_sys"] = [{"text":"impl Freeze for __fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for uECC_Curve_t","synthetic":true,"types":[]},{"text":"impl Freeze for uECC_HashContext","synthetic":true,"types":[]}];
implementors["nb"] = [{"text":"impl&lt;E&gt; Freeze for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nisty"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Seed","synthetic":true,"types":[]},{"text":"impl Freeze for SharedSecret","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Freeze for Poly1305","synthetic":true,"types":[]}];
implementors["postcard"] = [{"text":"impl&lt;'de&gt; Freeze for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for HVec&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Slice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Cobs&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Serializer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["postcard_cobs"] = [{"text":"impl&lt;'a&gt; Freeze for CobsDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecoderState","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CobsEncoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EncoderState","synthetic":true,"types":[]},{"text":"impl Freeze for PushResult","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["salty"] = [{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for SharedSecret","synthetic":true,"types":[]},{"text":"impl Freeze for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl Freeze for CompressedY","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for FieldElement","synthetic":true,"types":[]},{"text":"impl Freeze for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl Freeze for Scalar","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for BytesDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_cbor"] = [{"text":"impl&lt;'a&gt; Freeze for MutSliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SliceReadFixed&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceWrite&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Tagged&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sha1"] = [{"text":"impl Freeze for Sha1","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Freeze for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Freeze for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Freeze for FieldValue","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for RangeLimits","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for ItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ItemEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTrait","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Freeze for ItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUse","synthetic":true,"types":[]},{"text":"impl Freeze for UseTree","synthetic":true,"types":[]},{"text":"impl Freeze for UsePath","synthetic":true,"types":[]},{"text":"impl Freeze for UseName","synthetic":true,"types":[]},{"text":"impl Freeze for UseRename","synthetic":true,"types":[]},{"text":"impl Freeze for UseGlob","synthetic":true,"types":[]},{"text":"impl Freeze for UseGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItem","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItem","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItem","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Stmt","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for PatBox","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatLit","synthetic":true,"types":[]},{"text":"impl Freeze for PatMacro","synthetic":true,"types":[]},{"text":"impl Freeze for PatOr","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatRange","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatRest","synthetic":true,"types":[]},{"text":"impl Freeze for PatSlice","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl Freeze for AddBounds","synthetic":true,"types":[]},{"text":"impl Freeze for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["trussed"] = [{"text":"impl Freeze for Agree","synthetic":true,"types":[]},{"text":"impl Freeze for CreateObject","synthetic":true,"types":[]},{"text":"impl Freeze for DebugDumpStore","synthetic":true,"types":[]},{"text":"impl Freeze for Decrypt","synthetic":true,"types":[]},{"text":"impl Freeze for Delete","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveKey","synthetic":true,"types":[]},{"text":"impl Freeze for DeserializeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Encrypt","synthetic":true,"types":[]},{"text":"impl Freeze for Exists","synthetic":true,"types":[]},{"text":"impl Freeze for FindObjects","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateKey","synthetic":true,"types":[]},{"text":"impl Freeze for Hash","synthetic":true,"types":[]},{"text":"impl Freeze for LocateFile","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFilesFirst","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFilesNext","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFirst","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirNext","synthetic":true,"types":[]},{"text":"impl Freeze for ReadFile","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveFile","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveDir","synthetic":true,"types":[]},{"text":"impl Freeze for RandomBytes","synthetic":true,"types":[]},{"text":"impl Freeze for SerializeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]},{"text":"impl Freeze for WriteFile","synthetic":true,"types":[]},{"text":"impl Freeze for UnsafeInjectKey","synthetic":true,"types":[]},{"text":"impl Freeze for UnsafeInjectSharedKey","synthetic":true,"types":[]},{"text":"impl Freeze for UnwrapKey","synthetic":true,"types":[]},{"text":"impl Freeze for Verify","synthetic":true,"types":[]},{"text":"impl Freeze for WrapKey","synthetic":true,"types":[]},{"text":"impl Freeze for RequestUserConsent","synthetic":true,"types":[]},{"text":"impl Freeze for Reboot","synthetic":true,"types":[]},{"text":"impl Freeze for Uptime","synthetic":true,"types":[]},{"text":"impl Freeze for CreateCounter","synthetic":true,"types":[]},{"text":"impl Freeze for IncrementCounter","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteCertificate","synthetic":true,"types":[]},{"text":"impl Freeze for ReadCertificate","synthetic":true,"types":[]},{"text":"impl Freeze for WriteCertificate","synthetic":true,"types":[]},{"text":"impl Freeze for Agree","synthetic":true,"types":[]},{"text":"impl Freeze for CreateObject","synthetic":true,"types":[]},{"text":"impl Freeze for FindObjects","synthetic":true,"types":[]},{"text":"impl Freeze for DebugDumpStore","synthetic":true,"types":[]},{"text":"impl Freeze for Decrypt","synthetic":true,"types":[]},{"text":"impl Freeze for Delete","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveKey","synthetic":true,"types":[]},{"text":"impl Freeze for DeserializeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Encrypt","synthetic":true,"types":[]},{"text":"impl Freeze for Exists","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateKey","synthetic":true,"types":[]},{"text":"impl Freeze for Hash","synthetic":true,"types":[]},{"text":"impl Freeze for LocateFile","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFilesFirst","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFilesNext","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFirst","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirNext","synthetic":true,"types":[]},{"text":"impl Freeze for ReadFile","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveDir","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveFile","synthetic":true,"types":[]},{"text":"impl Freeze for RandomBytes","synthetic":true,"types":[]},{"text":"impl Freeze for SerializeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]},{"text":"impl Freeze for WriteFile","synthetic":true,"types":[]},{"text":"impl Freeze for Verify","synthetic":true,"types":[]},{"text":"impl Freeze for UnsafeInjectKey","synthetic":true,"types":[]},{"text":"impl Freeze for UnsafeInjectSharedKey","synthetic":true,"types":[]},{"text":"impl Freeze for UnwrapKey","synthetic":true,"types":[]},{"text":"impl Freeze for WrapKey","synthetic":true,"types":[]},{"text":"impl Freeze for RequestUserConsent","synthetic":true,"types":[]},{"text":"impl Freeze for Reboot","synthetic":true,"types":[]},{"text":"impl Freeze for Uptime","synthetic":true,"types":[]},{"text":"impl Freeze for CreateCounter","synthetic":true,"types":[]},{"text":"impl Freeze for IncrementCounter","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteCertificate","synthetic":true,"types":[]},{"text":"impl Freeze for ReadCertificate","synthetic":true,"types":[]},{"text":"impl Freeze for WriteCertificate","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Reply","synthetic":true,"types":[]},{"text":"impl Freeze for ClientError","synthetic":true,"types":[]},{"text":"impl&lt;'c, T, C:&nbsp;?Sized&gt; Freeze for FutureResult&lt;'c, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ClientImplementation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for Secrecy","synthetic":true,"types":[]},{"text":"impl Freeze for Aes256Cbc","synthetic":true,"types":[]},{"text":"impl Freeze for Chacha8Poly1305","synthetic":true,"types":[]},{"text":"impl Freeze for Ed255","synthetic":true,"types":[]},{"text":"impl Freeze for HmacSha1","synthetic":true,"types":[]},{"text":"impl Freeze for HmacSha256","synthetic":true,"types":[]},{"text":"impl Freeze for HmacSha512","synthetic":true,"types":[]},{"text":"impl Freeze for P256","synthetic":true,"types":[]},{"text":"impl Freeze for P256Prehashed","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Tdes","synthetic":true,"types":[]},{"text":"impl Freeze for Totp","synthetic":true,"types":[]},{"text":"impl Freeze for Trng","synthetic":true,"types":[]},{"text":"impl Freeze for X255","synthetic":true,"types":[]},{"text":"impl Freeze for TrussedInterchange","synthetic":true,"types":[]},{"text":"impl Freeze for ServiceEndpoint","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for ServiceResources&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for Service&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ClientCertstore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ClientCounterstore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirState","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDirFilesState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ClientFilestore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for ClientKeystore&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Platform&gt;::S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Fs&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for To","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Urgency","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl Freeze for AeadUniqueId","synthetic":true,"types":[]},{"text":"impl Freeze for Attributes","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateType","synthetic":true,"types":[]},{"text":"impl Freeze for DataAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for KeyAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for Letters","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectHandle","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectType","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKeyAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for PrivateKeyAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for Location","synthetic":true,"types":[]},{"text":"impl Freeze for StorageAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for Mechanism","synthetic":true,"types":[]},{"text":"impl Freeze for KeySerialization","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureSerialization","synthetic":true,"types":[]},{"text":"impl Freeze for UniqueId","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U&gt; Freeze for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UniversalHash&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Freeze for Void","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Freeze for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()