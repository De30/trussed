(function() {var implementors = {};
implementors["aead"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Unpin for Aes128","synthetic":true,"types":[]},{"text":"impl Unpin for Aes192","synthetic":true,"types":[]},{"text":"impl Unpin for Aes256","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Unpin for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_modes"] = [{"text":"impl Unpin for BlockModeError","synthetic":true,"types":[]},{"text":"impl Unpin for InvalidKeyIvLength","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Unpin for Cbc&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Unpin for Cfb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Unpin for Cfb8&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Unpin for Ecb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Unpin for Ofb&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; Unpin for Pcbc&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as BlockCipher&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_padding"] = [{"text":"impl Unpin for PadError","synthetic":true,"types":[]},{"text":"impl Unpin for UnpadError","synthetic":true,"types":[]},{"text":"impl Unpin for ZeroPadding","synthetic":true,"types":[]},{"text":"impl Unpin for Pkcs7","synthetic":true,"types":[]},{"text":"impl Unpin for AnsiX923","synthetic":true,"types":[]},{"text":"impl Unpin for Iso7816","synthetic":true,"types":[]},{"text":"impl Unpin for NoPadding","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Unpin for BigEndian","synthetic":true,"types":[]},{"text":"impl Unpin for LittleEndian","synthetic":true,"types":[]}];
implementors["cbor_smol"] = [{"text":"impl&lt;'de&gt; Unpin for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SliceWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["chacha20"] = [{"text":"impl&lt;R&gt; Unpin for ChaCha&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha8Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha8RngCore","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha12RngCore","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha20RngCore","synthetic":true,"types":[]},{"text":"impl Unpin for XChaCha20","synthetic":true,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl&lt;C&gt; Unpin for ChaChaPoly1305&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cipher"] = [{"text":"impl Unpin for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Unpin for LoopError","synthetic":true,"types":[]},{"text":"impl Unpin for InvalidKeyNonceLength","synthetic":true,"types":[]},{"text":"impl Unpin for OverflowError","synthetic":true,"types":[]}];
implementors["cosey"] = [{"text":"impl Unpin for PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for P256PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for EcdhEsHkdf256PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for Ed25519PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for TotpPublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for X25519PublicKey","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Unpin for LazyBool","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Unpin for MacError","synthetic":true,"types":[]},{"text":"impl Unpin for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Unpin for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as Mac&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cstr_core"] = [{"text":"impl Unpin for CStr","synthetic":true,"types":[]},{"text":"impl Unpin for FromBytesWithNulError","synthetic":true,"types":[]}];
implementors["cty"] = [{"text":"impl Unpin for c_void","synthetic":true,"types":[]}];
implementors["delog"] = [{"text":"impl Unpin for U1","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, U, S&gt; Unpin for HexStr&lt;'a, T, U, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Statistics","synthetic":true,"types":[]},{"text":"impl Unpin for DefaultRenderer","synthetic":true,"types":[]},{"text":"impl Unpin for RipgrepRenderer","synthetic":true,"types":[]}];
implementors["der"] = [{"text":"impl&lt;'a&gt; Unpin for Any&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Unpin for BigUInt&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BitString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GeneralizedTime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Ia5String&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for OctetString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PrintableString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Sequence&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for UtcTime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8String&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Encoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for Header","synthetic":true,"types":[]},{"text":"impl Unpin for Length","synthetic":true,"types":[]},{"text":"impl Unpin for Tag","synthetic":true,"types":[]}];
implementors["des"] = [{"text":"impl Unpin for Des","synthetic":true,"types":[]},{"text":"impl Unpin for TdesEde3","synthetic":true,"types":[]},{"text":"impl Unpin for TdesEee3","synthetic":true,"types":[]},{"text":"impl Unpin for TdesEde2","synthetic":true,"types":[]},{"text":"impl Unpin for TdesEee2","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Unpin for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["embedded_hal"] = [{"text":"impl&lt;T&gt; Unpin for OldOutputPin&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for OldInputPin&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Polarity","synthetic":true,"types":[]},{"text":"impl Unpin for Phase","synthetic":true,"types":[]},{"text":"impl Unpin for Mode","synthetic":true,"types":[]},{"text":"impl Unpin for Direction","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Unpin for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Unpin for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["half"] = [{"text":"impl Unpin for bf16","synthetic":true,"types":[]},{"text":"impl Unpin for f16","synthetic":true,"types":[]}];
implementors["hash32"] = [{"text":"impl Unpin for Hasher","synthetic":true,"types":[]},{"text":"impl Unpin for Hasher","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Unpin for BuildHasherDefault&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;T, N&gt; Unpin for HistoryBuffer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N, S&gt; Unpin for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Bucket&lt;K, V&gt;&gt;&gt;::ArrayType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Option&lt;Pos&gt;&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N, S&gt; Unpin for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Bucket&lt;T, ()&gt;&gt;&gt;::ArrayType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Option&lt;Pos&gt;&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N&gt; Unpin for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;(K, V)&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Unpin for String&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Unpin for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Min","synthetic":true,"types":[]},{"text":"impl Unpin for Max","synthetic":true,"types":[]},{"text":"impl&lt;T, N, KIND&gt; Unpin for BinaryHeap&lt;T, N, KIND&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;KIND: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, K&gt; Unpin for PeekMut&lt;'a, T, N, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, K&gt; Unpin for BinaryHeap&lt;A, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for LinearMap&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, U, C&gt; Unpin for Queue&lt;A, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for String&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for Vec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Q2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Q4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Q8&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Q16&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Q32&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Q64&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;POOL, STATE&gt; Unpin for Box&lt;POOL, STATE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;POOL: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;STATE: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Node&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Pool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, STATE&gt; Unpin for Box&lt;T, STATE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;STATE: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Uninit","synthetic":true,"types":[]},{"text":"impl Unpin for Init","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Unpin for Consumer&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Unpin for Producer&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for MultiCore","synthetic":true,"types":[]},{"text":"impl Unpin for SingleCore","synthetic":true,"types":[]},{"text":"impl&lt;T, N, U, C&gt; Unpin for Queue&lt;T, N, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Unpin for Iter&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Unpin for IterMut&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]}];
implementors["heapless_bytes"] = [{"text":"impl&lt;N&gt; Unpin for Bytes&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Unpin for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["interchange"] = [{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Requester&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Responder&lt;I&gt;","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Unpin for statvfs","synthetic":true,"types":[]},{"text":"impl Unpin for max_align_t","synthetic":true,"types":[]},{"text":"impl Unpin for sigaction","synthetic":true,"types":[]},{"text":"impl Unpin for statfs","synthetic":true,"types":[]},{"text":"impl Unpin for flock","synthetic":true,"types":[]},{"text":"impl Unpin for flock64","synthetic":true,"types":[]},{"text":"impl Unpin for siginfo_t","synthetic":true,"types":[]},{"text":"impl Unpin for stack_t","synthetic":true,"types":[]},{"text":"impl Unpin for stat","synthetic":true,"types":[]},{"text":"impl Unpin for stat64","synthetic":true,"types":[]},{"text":"impl Unpin for statfs64","synthetic":true,"types":[]},{"text":"impl Unpin for statvfs64","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Unpin for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Unpin for user","synthetic":true,"types":[]},{"text":"impl Unpin for mcontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for ipc_perm","synthetic":true,"types":[]},{"text":"impl Unpin for shmid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for termios2","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Unpin for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Unpin for ucontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for sigset_t","synthetic":true,"types":[]},{"text":"impl Unpin for sysinfo","synthetic":true,"types":[]},{"text":"impl Unpin for msqid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for sem_t","synthetic":true,"types":[]},{"text":"impl Unpin for statx","synthetic":true,"types":[]},{"text":"impl Unpin for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Unpin for aiocb","synthetic":true,"types":[]},{"text":"impl Unpin for __exit_status","synthetic":true,"types":[]},{"text":"impl Unpin for __timeval","synthetic":true,"types":[]},{"text":"impl Unpin for glob64_t","synthetic":true,"types":[]},{"text":"impl Unpin for msghdr","synthetic":true,"types":[]},{"text":"impl Unpin for cmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for termios","synthetic":true,"types":[]},{"text":"impl Unpin for mallinfo","synthetic":true,"types":[]},{"text":"impl Unpin for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Unpin for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Unpin for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Unpin for nlattr","synthetic":true,"types":[]},{"text":"impl Unpin for rtentry","synthetic":true,"types":[]},{"text":"impl Unpin for timex","synthetic":true,"types":[]},{"text":"impl Unpin for ntptimeval","synthetic":true,"types":[]},{"text":"impl Unpin for regex_t","synthetic":true,"types":[]},{"text":"impl Unpin for utmpx","synthetic":true,"types":[]},{"text":"impl Unpin for fpos64_t","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit64","synthetic":true,"types":[]},{"text":"impl Unpin for glob_t","synthetic":true,"types":[]},{"text":"impl Unpin for passwd","synthetic":true,"types":[]},{"text":"impl Unpin for spwd","synthetic":true,"types":[]},{"text":"impl Unpin for dqblk","synthetic":true,"types":[]},{"text":"impl Unpin for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Unpin for itimerspec","synthetic":true,"types":[]},{"text":"impl Unpin for fsid_t","synthetic":true,"types":[]},{"text":"impl Unpin for packet_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Unpin for if_nameindex","synthetic":true,"types":[]},{"text":"impl Unpin for msginfo","synthetic":true,"types":[]},{"text":"impl Unpin for sembuf","synthetic":true,"types":[]},{"text":"impl Unpin for input_event","synthetic":true,"types":[]},{"text":"impl Unpin for input_id","synthetic":true,"types":[]},{"text":"impl Unpin for input_absinfo","synthetic":true,"types":[]},{"text":"impl Unpin for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Unpin for input_mask","synthetic":true,"types":[]},{"text":"impl Unpin for ff_replay","synthetic":true,"types":[]},{"text":"impl Unpin for ff_trigger","synthetic":true,"types":[]},{"text":"impl Unpin for ff_envelope","synthetic":true,"types":[]},{"text":"impl Unpin for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_effect","synthetic":true,"types":[]},{"text":"impl Unpin for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Unpin for ucred","synthetic":true,"types":[]},{"text":"impl Unpin for mntent","synthetic":true,"types":[]},{"text":"impl Unpin for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Unpin for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for arpd_request","synthetic":true,"types":[]},{"text":"impl Unpin for inotify_event","synthetic":true,"types":[]},{"text":"impl Unpin for fanotify_response","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Unpin for regmatch_t","synthetic":true,"types":[]},{"text":"impl Unpin for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Unpin for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Unpin for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Unpin for can_filter","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Unpin for dirent","synthetic":true,"types":[]},{"text":"impl Unpin for dirent64","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Unpin for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Unpin for mq_attr","synthetic":true,"types":[]},{"text":"impl Unpin for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Unpin for can_frame","synthetic":true,"types":[]},{"text":"impl Unpin for canfd_frame","synthetic":true,"types":[]},{"text":"impl Unpin for timezone","synthetic":true,"types":[]},{"text":"impl Unpin for in_addr","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Unpin for addrinfo","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Unpin for fd_set","synthetic":true,"types":[]},{"text":"impl Unpin for tm","synthetic":true,"types":[]},{"text":"impl Unpin for sched_param","synthetic":true,"types":[]},{"text":"impl Unpin for Dl_info","synthetic":true,"types":[]},{"text":"impl Unpin for lconv","synthetic":true,"types":[]},{"text":"impl Unpin for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for ifaddrs","synthetic":true,"types":[]},{"text":"impl Unpin for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Unpin for arpreq","synthetic":true,"types":[]},{"text":"impl Unpin for arpreq_old","synthetic":true,"types":[]},{"text":"impl Unpin for arphdr","synthetic":true,"types":[]},{"text":"impl Unpin for mmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for epoll_event","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Unpin for utsname","synthetic":true,"types":[]},{"text":"impl Unpin for sigevent","synthetic":true,"types":[]},{"text":"impl Unpin for in6_addr","synthetic":true,"types":[]},{"text":"impl Unpin for DIR","synthetic":true,"types":[]},{"text":"impl Unpin for group","synthetic":true,"types":[]},{"text":"impl Unpin for utimbuf","synthetic":true,"types":[]},{"text":"impl Unpin for timeval","synthetic":true,"types":[]},{"text":"impl Unpin for timespec","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit","synthetic":true,"types":[]},{"text":"impl Unpin for rusage","synthetic":true,"types":[]},{"text":"impl Unpin for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for hostent","synthetic":true,"types":[]},{"text":"impl Unpin for iovec","synthetic":true,"types":[]},{"text":"impl Unpin for pollfd","synthetic":true,"types":[]},{"text":"impl Unpin for winsize","synthetic":true,"types":[]},{"text":"impl Unpin for linger","synthetic":true,"types":[]},{"text":"impl Unpin for sigval","synthetic":true,"types":[]},{"text":"impl Unpin for itimerval","synthetic":true,"types":[]},{"text":"impl Unpin for tms","synthetic":true,"types":[]},{"text":"impl Unpin for servent","synthetic":true,"types":[]},{"text":"impl Unpin for protoent","synthetic":true,"types":[]},{"text":"impl Unpin for FILE","synthetic":true,"types":[]},{"text":"impl Unpin for fpos_t","synthetic":true,"types":[]}];
implementors["littlefs2"] = [{"text":"impl&lt;Storage&gt; Unpin for Allocation&lt;Storage&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Storage as Storage&gt;::CACHE_SIZE as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Storage as Storage&gt;::LOOKAHEADWORDS_SIZE as ArrayLength&lt;u32&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Storage&gt; Unpin for Filesystem&lt;'a, Storage&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FileType","synthetic":true,"types":[]},{"text":"impl Unpin for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Attribute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Storage&gt;::ATTRBYTES_MAX as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for FileAllocation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Storage&gt;::CACHE_SIZE as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Unpin for File&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for OpenOptions","synthetic":true,"types":[]},{"text":"impl Unpin for DirEntry","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirAllocation","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Unpin for ReadDir&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SeekFrom","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Path","synthetic":true,"types":[]},{"text":"impl Unpin for PathBuf","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Version","synthetic":true,"types":[]}];
implementors["littlefs2_sys"] = [{"text":"impl Unpin for __fsid_t","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_config","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_info","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_attr","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_file_config","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_cache","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_mdir","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_dir","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_file","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_file_lfs_ctz","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_superblock","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_gstate","synthetic":true,"types":[]},{"text":"impl Unpin for lfs","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_lfs_mlist","synthetic":true,"types":[]},{"text":"impl Unpin for lfs_lfs_free","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for ParseLevelError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Unpin for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["micro_ecc_sys"] = [{"text":"impl Unpin for __fsid_t","synthetic":true,"types":[]},{"text":"impl Unpin for uECC_Curve_t","synthetic":true,"types":[]},{"text":"impl Unpin for uECC_HashContext","synthetic":true,"types":[]}];
implementors["nb"] = [{"text":"impl&lt;E&gt; Unpin for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nisty"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Seed","synthetic":true,"types":[]},{"text":"impl Unpin for SharedSecret","synthetic":true,"types":[]},{"text":"impl Unpin for SecretKey","synthetic":true,"types":[]},{"text":"impl Unpin for PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for Keypair","synthetic":true,"types":[]},{"text":"impl Unpin for Signature","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Unpin for Poly1305","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]},{"text":"impl Unpin for TokenStream","synthetic":true,"types":[]},{"text":"impl Unpin for LexError","synthetic":true,"types":[]},{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for TokenTree","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for Delimiter","synthetic":true,"types":[]},{"text":"impl Unpin for Punct","synthetic":true,"types":[]},{"text":"impl Unpin for Spacing","synthetic":true,"types":[]},{"text":"impl Unpin for Ident","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Unpin for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Unpin for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for OsRng","synthetic":true,"types":[]}];
implementors["salty"] = [{"text":"impl Unpin for PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for SecretKey","synthetic":true,"types":[]},{"text":"impl Unpin for SharedSecret","synthetic":true,"types":[]},{"text":"impl Unpin for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl Unpin for CompressedY","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512","synthetic":true,"types":[]},{"text":"impl Unpin for FieldElement","synthetic":true,"types":[]},{"text":"impl Unpin for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl Unpin for Scalar","synthetic":true,"types":[]},{"text":"impl Unpin for SecretKey","synthetic":true,"types":[]},{"text":"impl Unpin for PublicKey","synthetic":true,"types":[]},{"text":"impl Unpin for Keypair","synthetic":true,"types":[]},{"text":"impl Unpin for Signature","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Unpin for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Unpin for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Unpin for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_cbor"] = [{"text":"impl&lt;'a&gt; Unpin for MutSliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for SliceReadFixed&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Unpin for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SliceWrite&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Tagged&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sha1"] = [{"text":"impl Unpin for Sha1","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Unpin for Sha256","synthetic":true,"types":[]},{"text":"impl Unpin for Sha224","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512","synthetic":true,"types":[]},{"text":"impl Unpin for Sha384","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Unpin for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Unpin for Underscore","synthetic":true,"types":[]},{"text":"impl Unpin for Abstract","synthetic":true,"types":[]},{"text":"impl Unpin for As","synthetic":true,"types":[]},{"text":"impl Unpin for Async","synthetic":true,"types":[]},{"text":"impl Unpin for Auto","synthetic":true,"types":[]},{"text":"impl Unpin for Await","synthetic":true,"types":[]},{"text":"impl Unpin for Become","synthetic":true,"types":[]},{"text":"impl Unpin for Box","synthetic":true,"types":[]},{"text":"impl Unpin for Break","synthetic":true,"types":[]},{"text":"impl Unpin for Const","synthetic":true,"types":[]},{"text":"impl Unpin for Continue","synthetic":true,"types":[]},{"text":"impl Unpin for Crate","synthetic":true,"types":[]},{"text":"impl Unpin for Default","synthetic":true,"types":[]},{"text":"impl Unpin for Do","synthetic":true,"types":[]},{"text":"impl Unpin for Dyn","synthetic":true,"types":[]},{"text":"impl Unpin for Else","synthetic":true,"types":[]},{"text":"impl Unpin for Enum","synthetic":true,"types":[]},{"text":"impl Unpin for Extern","synthetic":true,"types":[]},{"text":"impl Unpin for Final","synthetic":true,"types":[]},{"text":"impl Unpin for Fn","synthetic":true,"types":[]},{"text":"impl Unpin for For","synthetic":true,"types":[]},{"text":"impl Unpin for If","synthetic":true,"types":[]},{"text":"impl Unpin for Impl","synthetic":true,"types":[]},{"text":"impl Unpin for In","synthetic":true,"types":[]},{"text":"impl Unpin for Let","synthetic":true,"types":[]},{"text":"impl Unpin for Loop","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for Match","synthetic":true,"types":[]},{"text":"impl Unpin for Mod","synthetic":true,"types":[]},{"text":"impl Unpin for Move","synthetic":true,"types":[]},{"text":"impl Unpin for Mut","synthetic":true,"types":[]},{"text":"impl Unpin for Override","synthetic":true,"types":[]},{"text":"impl Unpin for Priv","synthetic":true,"types":[]},{"text":"impl Unpin for Pub","synthetic":true,"types":[]},{"text":"impl Unpin for Ref","synthetic":true,"types":[]},{"text":"impl Unpin for Return","synthetic":true,"types":[]},{"text":"impl Unpin for SelfType","synthetic":true,"types":[]},{"text":"impl Unpin for SelfValue","synthetic":true,"types":[]},{"text":"impl Unpin for Static","synthetic":true,"types":[]},{"text":"impl Unpin for Struct","synthetic":true,"types":[]},{"text":"impl Unpin for Super","synthetic":true,"types":[]},{"text":"impl Unpin for Trait","synthetic":true,"types":[]},{"text":"impl Unpin for Try","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for Typeof","synthetic":true,"types":[]},{"text":"impl Unpin for Union","synthetic":true,"types":[]},{"text":"impl Unpin for Unsafe","synthetic":true,"types":[]},{"text":"impl Unpin for Unsized","synthetic":true,"types":[]},{"text":"impl Unpin for Use","synthetic":true,"types":[]},{"text":"impl Unpin for Virtual","synthetic":true,"types":[]},{"text":"impl Unpin for Where","synthetic":true,"types":[]},{"text":"impl Unpin for While","synthetic":true,"types":[]},{"text":"impl Unpin for Yield","synthetic":true,"types":[]},{"text":"impl Unpin for Add","synthetic":true,"types":[]},{"text":"impl Unpin for AddEq","synthetic":true,"types":[]},{"text":"impl Unpin for And","synthetic":true,"types":[]},{"text":"impl Unpin for AndAnd","synthetic":true,"types":[]},{"text":"impl Unpin for AndEq","synthetic":true,"types":[]},{"text":"impl Unpin for At","synthetic":true,"types":[]},{"text":"impl Unpin for Bang","synthetic":true,"types":[]},{"text":"impl Unpin for Caret","synthetic":true,"types":[]},{"text":"impl Unpin for CaretEq","synthetic":true,"types":[]},{"text":"impl Unpin for Colon","synthetic":true,"types":[]},{"text":"impl Unpin for Colon2","synthetic":true,"types":[]},{"text":"impl Unpin for Comma","synthetic":true,"types":[]},{"text":"impl Unpin for Div","synthetic":true,"types":[]},{"text":"impl Unpin for DivEq","synthetic":true,"types":[]},{"text":"impl Unpin for Dollar","synthetic":true,"types":[]},{"text":"impl Unpin for Dot","synthetic":true,"types":[]},{"text":"impl Unpin for Dot2","synthetic":true,"types":[]},{"text":"impl Unpin for Dot3","synthetic":true,"types":[]},{"text":"impl Unpin for DotDotEq","synthetic":true,"types":[]},{"text":"impl Unpin for Eq","synthetic":true,"types":[]},{"text":"impl Unpin for EqEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ge","synthetic":true,"types":[]},{"text":"impl Unpin for Gt","synthetic":true,"types":[]},{"text":"impl Unpin for Le","synthetic":true,"types":[]},{"text":"impl Unpin for Lt","synthetic":true,"types":[]},{"text":"impl Unpin for MulEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ne","synthetic":true,"types":[]},{"text":"impl Unpin for Or","synthetic":true,"types":[]},{"text":"impl Unpin for OrEq","synthetic":true,"types":[]},{"text":"impl Unpin for OrOr","synthetic":true,"types":[]},{"text":"impl Unpin for Pound","synthetic":true,"types":[]},{"text":"impl Unpin for Question","synthetic":true,"types":[]},{"text":"impl Unpin for RArrow","synthetic":true,"types":[]},{"text":"impl Unpin for LArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Rem","synthetic":true,"types":[]},{"text":"impl Unpin for RemEq","synthetic":true,"types":[]},{"text":"impl Unpin for FatArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Semi","synthetic":true,"types":[]},{"text":"impl Unpin for Shl","synthetic":true,"types":[]},{"text":"impl Unpin for ShlEq","synthetic":true,"types":[]},{"text":"impl Unpin for Shr","synthetic":true,"types":[]},{"text":"impl Unpin for ShrEq","synthetic":true,"types":[]},{"text":"impl Unpin for Star","synthetic":true,"types":[]},{"text":"impl Unpin for Sub","synthetic":true,"types":[]},{"text":"impl Unpin for SubEq","synthetic":true,"types":[]},{"text":"impl Unpin for Tilde","synthetic":true,"types":[]},{"text":"impl Unpin for Brace","synthetic":true,"types":[]},{"text":"impl Unpin for Bracket","synthetic":true,"types":[]},{"text":"impl Unpin for Paren","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for Attribute","synthetic":true,"types":[]},{"text":"impl Unpin for AttrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Meta","synthetic":true,"types":[]},{"text":"impl Unpin for MetaList","synthetic":true,"types":[]},{"text":"impl Unpin for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Unpin for NestedMeta","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for Fields","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for Visibility","synthetic":true,"types":[]},{"text":"impl Unpin for VisPublic","synthetic":true,"types":[]},{"text":"impl Unpin for VisCrate","synthetic":true,"types":[]},{"text":"impl Unpin for VisRestricted","synthetic":true,"types":[]},{"text":"impl Unpin for Expr","synthetic":true,"types":[]},{"text":"impl Unpin for ExprArray","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssign","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAsync","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAwait","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBinary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBox","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBreak","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCast","synthetic":true,"types":[]},{"text":"impl Unpin for ExprClosure","synthetic":true,"types":[]},{"text":"impl Unpin for ExprContinue","synthetic":true,"types":[]},{"text":"impl Unpin for ExprField","synthetic":true,"types":[]},{"text":"impl Unpin for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprGroup","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIf","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIndex","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLet","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLit","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMacro","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMatch","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprParen","synthetic":true,"types":[]},{"text":"impl Unpin for ExprPath","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRange","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReference","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReturn","synthetic":true,"types":[]},{"text":"impl Unpin for ExprStruct","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTry","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTuple","synthetic":true,"types":[]},{"text":"impl Unpin for ExprType","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Unpin for ExprWhile","synthetic":true,"types":[]},{"text":"impl Unpin for ExprYield","synthetic":true,"types":[]},{"text":"impl Unpin for Member","synthetic":true,"types":[]},{"text":"impl Unpin for Index","synthetic":true,"types":[]},{"text":"impl Unpin for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Unpin for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Unpin for FieldValue","synthetic":true,"types":[]},{"text":"impl Unpin for Label","synthetic":true,"types":[]},{"text":"impl Unpin for Arm","synthetic":true,"types":[]},{"text":"impl Unpin for RangeLimits","synthetic":true,"types":[]},{"text":"impl Unpin for Generics","synthetic":true,"types":[]},{"text":"impl Unpin for GenericParam","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParam","synthetic":true,"types":[]},{"text":"impl Unpin for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Unpin for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBound","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Unpin for WhereClause","synthetic":true,"types":[]},{"text":"impl Unpin for WherePredicate","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateType","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateEq","synthetic":true,"types":[]},{"text":"impl Unpin for Item","synthetic":true,"types":[]},{"text":"impl Unpin for ItemConst","synthetic":true,"types":[]},{"text":"impl Unpin for ItemEnum","synthetic":true,"types":[]},{"text":"impl Unpin for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Unpin for ItemFn","synthetic":true,"types":[]},{"text":"impl Unpin for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Unpin for ItemImpl","synthetic":true,"types":[]},{"text":"impl Unpin for ItemMacro","synthetic":true,"types":[]},{"text":"impl Unpin for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Unpin for ItemMod","synthetic":true,"types":[]},{"text":"impl Unpin for ItemStatic","synthetic":true,"types":[]},{"text":"impl Unpin for ItemStruct","synthetic":true,"types":[]},{"text":"impl Unpin for ItemTrait","synthetic":true,"types":[]},{"text":"impl Unpin for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Unpin for ItemType","synthetic":true,"types":[]},{"text":"impl Unpin for ItemUnion","synthetic":true,"types":[]},{"text":"impl Unpin for ItemUse","synthetic":true,"types":[]},{"text":"impl Unpin for UseTree","synthetic":true,"types":[]},{"text":"impl Unpin for UsePath","synthetic":true,"types":[]},{"text":"impl Unpin for UseName","synthetic":true,"types":[]},{"text":"impl Unpin for UseRename","synthetic":true,"types":[]},{"text":"impl Unpin for UseGlob","synthetic":true,"types":[]},{"text":"impl Unpin for UseGroup","synthetic":true,"types":[]},{"text":"impl Unpin for ForeignItem","synthetic":true,"types":[]},{"text":"impl Unpin for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Unpin for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Unpin for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Unpin for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Unpin for TraitItem","synthetic":true,"types":[]},{"text":"impl Unpin for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Unpin for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Unpin for TraitItemType","synthetic":true,"types":[]},{"text":"impl Unpin for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Unpin for ImplItem","synthetic":true,"types":[]},{"text":"impl Unpin for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Unpin for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Unpin for ImplItemType","synthetic":true,"types":[]},{"text":"impl Unpin for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Unpin for Signature","synthetic":true,"types":[]},{"text":"impl Unpin for FnArg","synthetic":true,"types":[]},{"text":"impl Unpin for Receiver","synthetic":true,"types":[]},{"text":"impl Unpin for File","synthetic":true,"types":[]},{"text":"impl Unpin for Lifetime","synthetic":true,"types":[]},{"text":"impl Unpin for Lit","synthetic":true,"types":[]},{"text":"impl Unpin for LitStr","synthetic":true,"types":[]},{"text":"impl Unpin for LitByteStr","synthetic":true,"types":[]},{"text":"impl Unpin for LitByte","synthetic":true,"types":[]},{"text":"impl Unpin for LitChar","synthetic":true,"types":[]},{"text":"impl Unpin for LitInt","synthetic":true,"types":[]},{"text":"impl Unpin for LitFloat","synthetic":true,"types":[]},{"text":"impl Unpin for LitBool","synthetic":true,"types":[]},{"text":"impl Unpin for StrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveInput","synthetic":true,"types":[]},{"text":"impl Unpin for Data","synthetic":true,"types":[]},{"text":"impl Unpin for DataStruct","synthetic":true,"types":[]},{"text":"impl Unpin for DataEnum","synthetic":true,"types":[]},{"text":"impl Unpin for DataUnion","synthetic":true,"types":[]},{"text":"impl Unpin for BinOp","synthetic":true,"types":[]},{"text":"impl Unpin for UnOp","synthetic":true,"types":[]},{"text":"impl Unpin for Block","synthetic":true,"types":[]},{"text":"impl Unpin for Stmt","synthetic":true,"types":[]},{"text":"impl Unpin for Local","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for TypeArray","synthetic":true,"types":[]},{"text":"impl Unpin for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Unpin for TypeGroup","synthetic":true,"types":[]},{"text":"impl Unpin for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Unpin for TypeInfer","synthetic":true,"types":[]},{"text":"impl Unpin for TypeMacro","synthetic":true,"types":[]},{"text":"impl Unpin for TypeNever","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParen","synthetic":true,"types":[]},{"text":"impl Unpin for TypePath","synthetic":true,"types":[]},{"text":"impl Unpin for TypePtr","synthetic":true,"types":[]},{"text":"impl Unpin for TypeReference","synthetic":true,"types":[]},{"text":"impl Unpin for TypeSlice","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTuple","synthetic":true,"types":[]},{"text":"impl Unpin for Abi","synthetic":true,"types":[]},{"text":"impl Unpin for BareFnArg","synthetic":true,"types":[]},{"text":"impl Unpin for Variadic","synthetic":true,"types":[]},{"text":"impl Unpin for ReturnType","synthetic":true,"types":[]},{"text":"impl Unpin for Pat","synthetic":true,"types":[]},{"text":"impl Unpin for PatBox","synthetic":true,"types":[]},{"text":"impl Unpin for PatIdent","synthetic":true,"types":[]},{"text":"impl Unpin for PatLit","synthetic":true,"types":[]},{"text":"impl Unpin for PatMacro","synthetic":true,"types":[]},{"text":"impl Unpin for PatOr","synthetic":true,"types":[]},{"text":"impl Unpin for PatPath","synthetic":true,"types":[]},{"text":"impl Unpin for PatRange","synthetic":true,"types":[]},{"text":"impl Unpin for PatReference","synthetic":true,"types":[]},{"text":"impl Unpin for PatRest","synthetic":true,"types":[]},{"text":"impl Unpin for PatSlice","synthetic":true,"types":[]},{"text":"impl Unpin for PatStruct","synthetic":true,"types":[]},{"text":"impl Unpin for PatTuple","synthetic":true,"types":[]},{"text":"impl Unpin for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Unpin for PatType","synthetic":true,"types":[]},{"text":"impl Unpin for PatWild","synthetic":true,"types":[]},{"text":"impl Unpin for FieldPat","synthetic":true,"types":[]},{"text":"impl Unpin for Path","synthetic":true,"types":[]},{"text":"impl Unpin for PathSegment","synthetic":true,"types":[]},{"text":"impl Unpin for PathArguments","synthetic":true,"types":[]},{"text":"impl Unpin for GenericArgument","synthetic":true,"types":[]},{"text":"impl Unpin for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Binding","synthetic":true,"types":[]},{"text":"impl Unpin for Constraint","synthetic":true,"types":[]},{"text":"impl Unpin for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for QSelf","synthetic":true,"types":[]},{"text":"impl Unpin for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Unpin for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl Unpin for AddBounds","synthetic":true,"types":[]},{"text":"impl Unpin for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["trussed"] = [{"text":"impl Unpin for Agree","synthetic":true,"types":[]},{"text":"impl Unpin for CreateObject","synthetic":true,"types":[]},{"text":"impl Unpin for DebugDumpStore","synthetic":true,"types":[]},{"text":"impl Unpin for Decrypt","synthetic":true,"types":[]},{"text":"impl Unpin for Delete","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveKey","synthetic":true,"types":[]},{"text":"impl Unpin for DeserializeKey","synthetic":true,"types":[]},{"text":"impl Unpin for Encrypt","synthetic":true,"types":[]},{"text":"impl Unpin for Exists","synthetic":true,"types":[]},{"text":"impl Unpin for FindObjects","synthetic":true,"types":[]},{"text":"impl Unpin for GenerateKey","synthetic":true,"types":[]},{"text":"impl Unpin for Hash","synthetic":true,"types":[]},{"text":"impl Unpin for LocateFile","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFilesFirst","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFilesNext","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFirst","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirNext","synthetic":true,"types":[]},{"text":"impl Unpin for ReadFile","synthetic":true,"types":[]},{"text":"impl Unpin for RemoveFile","synthetic":true,"types":[]},{"text":"impl Unpin for RemoveDir","synthetic":true,"types":[]},{"text":"impl Unpin for RandomByteBuf","synthetic":true,"types":[]},{"text":"impl Unpin for SerializeKey","synthetic":true,"types":[]},{"text":"impl Unpin for Sign","synthetic":true,"types":[]},{"text":"impl Unpin for WriteFile","synthetic":true,"types":[]},{"text":"impl Unpin for UnsafeInjectKey","synthetic":true,"types":[]},{"text":"impl Unpin for UnwrapKey","synthetic":true,"types":[]},{"text":"impl Unpin for Verify","synthetic":true,"types":[]},{"text":"impl Unpin for WrapKey","synthetic":true,"types":[]},{"text":"impl Unpin for RequestUserConsent","synthetic":true,"types":[]},{"text":"impl Unpin for Reboot","synthetic":true,"types":[]},{"text":"impl Unpin for Uptime","synthetic":true,"types":[]},{"text":"impl Unpin for CreateCounter","synthetic":true,"types":[]},{"text":"impl Unpin for IncrementCounter","synthetic":true,"types":[]},{"text":"impl Unpin for DeleteCertificate","synthetic":true,"types":[]},{"text":"impl Unpin for ReadCertificate","synthetic":true,"types":[]},{"text":"impl Unpin for WriteCertificate","synthetic":true,"types":[]},{"text":"impl Unpin for Agree","synthetic":true,"types":[]},{"text":"impl Unpin for CreateObject","synthetic":true,"types":[]},{"text":"impl Unpin for FindObjects","synthetic":true,"types":[]},{"text":"impl Unpin for DebugDumpStore","synthetic":true,"types":[]},{"text":"impl Unpin for Decrypt","synthetic":true,"types":[]},{"text":"impl Unpin for Delete","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveKey","synthetic":true,"types":[]},{"text":"impl Unpin for DeserializeKey","synthetic":true,"types":[]},{"text":"impl Unpin for Encrypt","synthetic":true,"types":[]},{"text":"impl Unpin for Exists","synthetic":true,"types":[]},{"text":"impl Unpin for GenerateKey","synthetic":true,"types":[]},{"text":"impl Unpin for Hash","synthetic":true,"types":[]},{"text":"impl Unpin for LocateFile","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFilesFirst","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFilesNext","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFirst","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirNext","synthetic":true,"types":[]},{"text":"impl Unpin for ReadFile","synthetic":true,"types":[]},{"text":"impl Unpin for RemoveDir","synthetic":true,"types":[]},{"text":"impl Unpin for RemoveFile","synthetic":true,"types":[]},{"text":"impl Unpin for RandomByteBuf","synthetic":true,"types":[]},{"text":"impl Unpin for SerializeKey","synthetic":true,"types":[]},{"text":"impl Unpin for Sign","synthetic":true,"types":[]},{"text":"impl Unpin for WriteFile","synthetic":true,"types":[]},{"text":"impl Unpin for Verify","synthetic":true,"types":[]},{"text":"impl Unpin for UnsafeInjectKey","synthetic":true,"types":[]},{"text":"impl Unpin for UnwrapKey","synthetic":true,"types":[]},{"text":"impl Unpin for WrapKey","synthetic":true,"types":[]},{"text":"impl Unpin for RequestUserConsent","synthetic":true,"types":[]},{"text":"impl Unpin for Reboot","synthetic":true,"types":[]},{"text":"impl Unpin for Uptime","synthetic":true,"types":[]},{"text":"impl Unpin for CreateCounter","synthetic":true,"types":[]},{"text":"impl Unpin for IncrementCounter","synthetic":true,"types":[]},{"text":"impl Unpin for DeleteCertificate","synthetic":true,"types":[]},{"text":"impl Unpin for ReadCertificate","synthetic":true,"types":[]},{"text":"impl Unpin for WriteCertificate","synthetic":true,"types":[]},{"text":"impl Unpin for Request","synthetic":true,"types":[]},{"text":"impl Unpin for Reply","synthetic":true,"types":[]},{"text":"impl Unpin for ClientError","synthetic":true,"types":[]},{"text":"impl&lt;'c, T, C:&nbsp;?Sized&gt; Unpin for FutureResult&lt;'c, T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for ClientImplementation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for KeyFlags","synthetic":true,"types":[]},{"text":"impl Unpin for SerializedKey","synthetic":true,"types":[]},{"text":"impl Unpin for KeyKind","synthetic":true,"types":[]},{"text":"impl Unpin for Secrecy","synthetic":true,"types":[]},{"text":"impl Unpin for Aes256Cbc","synthetic":true,"types":[]},{"text":"impl Unpin for Chacha8Poly1305","synthetic":true,"types":[]},{"text":"impl Unpin for Ed255","synthetic":true,"types":[]},{"text":"impl Unpin for HmacSha256","synthetic":true,"types":[]},{"text":"impl Unpin for P256","synthetic":true,"types":[]},{"text":"impl Unpin for P256Prehashed","synthetic":true,"types":[]},{"text":"impl Unpin for Sha256","synthetic":true,"types":[]},{"text":"impl Unpin for Tdes","synthetic":true,"types":[]},{"text":"impl Unpin for Totp","synthetic":true,"types":[]},{"text":"impl Unpin for Trng","synthetic":true,"types":[]},{"text":"impl Unpin for X255","synthetic":true,"types":[]},{"text":"impl Unpin for TrussedInterchange","synthetic":true,"types":[]},{"text":"impl Unpin for ServiceEndpoint","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for ServiceResources&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for Service&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for ClientCertstore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for ClientCounterstore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirState","synthetic":true,"types":[]},{"text":"impl Unpin for ReadDirFilesState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for ClientFilestore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for ClientKeystore&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Platform&gt;::S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Fs&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Status","synthetic":true,"types":[]},{"text":"impl Unpin for To","synthetic":true,"types":[]},{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for Urgency","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Id","synthetic":true,"types":[]},{"text":"impl Unpin for AeadUniqueId","synthetic":true,"types":[]},{"text":"impl Unpin for Attributes","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateType","synthetic":true,"types":[]},{"text":"impl Unpin for DataAttributes","synthetic":true,"types":[]},{"text":"impl Unpin for KeyAttributes","synthetic":true,"types":[]},{"text":"impl Unpin for Letters","synthetic":true,"types":[]},{"text":"impl Unpin for ObjectHandle","synthetic":true,"types":[]},{"text":"impl Unpin for ObjectType","synthetic":true,"types":[]},{"text":"impl Unpin for PublicKeyAttributes","synthetic":true,"types":[]},{"text":"impl Unpin for PrivateKeyAttributes","synthetic":true,"types":[]},{"text":"impl Unpin for Location","synthetic":true,"types":[]},{"text":"impl Unpin for StorageAttributes","synthetic":true,"types":[]},{"text":"impl Unpin for Mechanism","synthetic":true,"types":[]},{"text":"impl Unpin for KeySerialization","synthetic":true,"types":[]},{"text":"impl Unpin for SignatureSerialization","synthetic":true,"types":[]},{"text":"impl Unpin for UniqueId","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Unpin for B0","synthetic":true,"types":[]},{"text":"impl Unpin for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Unpin for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Unpin for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Z0","synthetic":true,"types":[]},{"text":"impl Unpin for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Unpin for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Unpin for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Greater","synthetic":true,"types":[]},{"text":"impl Unpin for Less","synthetic":true,"types":[]},{"text":"impl Unpin for Equal","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U&gt; Unpin for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UniversalHash&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Unpin for Void","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Unpin for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()