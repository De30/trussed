(function() {var implementors = {};
implementors["cosey"] = [{"text":"impl Serialize for PublicKey","synthetic":false,"types":[]},{"text":"impl Serialize for TotpPublicKey","synthetic":false,"types":[]},{"text":"impl Serialize for P256PublicKey","synthetic":false,"types":[]},{"text":"impl Serialize for EcdhEsHkdf256PublicKey","synthetic":false,"types":[]},{"text":"impl Serialize for Ed25519PublicKey","synthetic":false,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;T, N, KIND&gt; Serialize for BinaryHeap&lt;T, N, KIND&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Ord + Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;KIND: BinaryHeapKind,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, S&gt; Serialize for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;Bucket&lt;T, ()&gt;&gt; + ArrayLength&lt;Option&lt;Pos&gt;&gt; + PowerOfTwo,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N&gt; Serialize for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, N, S&gt; Serialize for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;Bucket&lt;K, V&gt;&gt; + ArrayLength&lt;Option&lt;Pos&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, N&gt; Serialize for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;(K, V)&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Serialize for String&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["heapless_bytes"] = [{"text":"impl&lt;N&gt; Serialize for Bytes&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["littlefs2"] = [{"text":"impl Serialize for FileType","synthetic":false,"types":[]},{"text":"impl Serialize for Metadata","synthetic":false,"types":[]},{"text":"impl Serialize for DirEntry","synthetic":false,"types":[]},{"text":"impl Serialize for PathBuf","synthetic":false,"types":[]}];
implementors["serde_cbor"] = [{"text":"impl&lt;T:&nbsp;Serialize&gt; Serialize for Tagged&lt;T&gt;","synthetic":false,"types":[]}];
implementors["trussed"] = [{"text":"impl Serialize for Agree","synthetic":false,"types":[]},{"text":"impl Serialize for CreateObject","synthetic":false,"types":[]},{"text":"impl Serialize for DebugDumpStore","synthetic":false,"types":[]},{"text":"impl Serialize for Decrypt","synthetic":false,"types":[]},{"text":"impl Serialize for Delete","synthetic":false,"types":[]},{"text":"impl Serialize for DeriveKey","synthetic":false,"types":[]},{"text":"impl Serialize for DeserializeKey","synthetic":false,"types":[]},{"text":"impl Serialize for Encrypt","synthetic":false,"types":[]},{"text":"impl Serialize for Exists","synthetic":false,"types":[]},{"text":"impl Serialize for FindObjects","synthetic":false,"types":[]},{"text":"impl Serialize for GenerateKey","synthetic":false,"types":[]},{"text":"impl Serialize for Hash","synthetic":false,"types":[]},{"text":"impl Serialize for LocateFile","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirFilesFirst","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirFilesNext","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirFirst","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirNext","synthetic":false,"types":[]},{"text":"impl Serialize for ReadFile","synthetic":false,"types":[]},{"text":"impl Serialize for RemoveFile","synthetic":false,"types":[]},{"text":"impl Serialize for RemoveDir","synthetic":false,"types":[]},{"text":"impl Serialize for RandomByteBuf","synthetic":false,"types":[]},{"text":"impl Serialize for SerializeKey","synthetic":false,"types":[]},{"text":"impl Serialize for Sign","synthetic":false,"types":[]},{"text":"impl Serialize for WriteFile","synthetic":false,"types":[]},{"text":"impl Serialize for UnsafeInjectKey","synthetic":false,"types":[]},{"text":"impl Serialize for UnwrapKey","synthetic":false,"types":[]},{"text":"impl Serialize for Verify","synthetic":false,"types":[]},{"text":"impl Serialize for WrapKey","synthetic":false,"types":[]},{"text":"impl Serialize for RequestUserConsent","synthetic":false,"types":[]},{"text":"impl Serialize for Reboot","synthetic":false,"types":[]},{"text":"impl Serialize for Uptime","synthetic":false,"types":[]},{"text":"impl Serialize for CreateCounter","synthetic":false,"types":[]},{"text":"impl Serialize for IncrementCounter","synthetic":false,"types":[]},{"text":"impl Serialize for DeleteCertificate","synthetic":false,"types":[]},{"text":"impl Serialize for ReadCertificate","synthetic":false,"types":[]},{"text":"impl Serialize for WriteCertificate","synthetic":false,"types":[]},{"text":"impl Serialize for Agree","synthetic":false,"types":[]},{"text":"impl Serialize for CreateObject","synthetic":false,"types":[]},{"text":"impl Serialize for FindObjects","synthetic":false,"types":[]},{"text":"impl Serialize for DebugDumpStore","synthetic":false,"types":[]},{"text":"impl Serialize for Decrypt","synthetic":false,"types":[]},{"text":"impl Serialize for Delete","synthetic":false,"types":[]},{"text":"impl Serialize for DeriveKey","synthetic":false,"types":[]},{"text":"impl Serialize for DeserializeKey","synthetic":false,"types":[]},{"text":"impl Serialize for Encrypt","synthetic":false,"types":[]},{"text":"impl Serialize for Exists","synthetic":false,"types":[]},{"text":"impl Serialize for GenerateKey","synthetic":false,"types":[]},{"text":"impl Serialize for Hash","synthetic":false,"types":[]},{"text":"impl Serialize for LocateFile","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirFilesFirst","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirFilesNext","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirFirst","synthetic":false,"types":[]},{"text":"impl Serialize for ReadDirNext","synthetic":false,"types":[]},{"text":"impl Serialize for ReadFile","synthetic":false,"types":[]},{"text":"impl Serialize for RemoveDir","synthetic":false,"types":[]},{"text":"impl Serialize for RemoveFile","synthetic":false,"types":[]},{"text":"impl Serialize for RandomByteBuf","synthetic":false,"types":[]},{"text":"impl Serialize for SerializeKey","synthetic":false,"types":[]},{"text":"impl Serialize for Sign","synthetic":false,"types":[]},{"text":"impl Serialize for WriteFile","synthetic":false,"types":[]},{"text":"impl Serialize for Verify","synthetic":false,"types":[]},{"text":"impl Serialize for UnsafeInjectKey","synthetic":false,"types":[]},{"text":"impl Serialize for UnwrapKey","synthetic":false,"types":[]},{"text":"impl Serialize for WrapKey","synthetic":false,"types":[]},{"text":"impl Serialize for RequestUserConsent","synthetic":false,"types":[]},{"text":"impl Serialize for Reboot","synthetic":false,"types":[]},{"text":"impl Serialize for Uptime","synthetic":false,"types":[]},{"text":"impl Serialize for CreateCounter","synthetic":false,"types":[]},{"text":"impl Serialize for IncrementCounter","synthetic":false,"types":[]},{"text":"impl Serialize for DeleteCertificate","synthetic":false,"types":[]},{"text":"impl Serialize for ReadCertificate","synthetic":false,"types":[]},{"text":"impl Serialize for WriteCertificate","synthetic":false,"types":[]},{"text":"impl Serialize for KeyFlags","synthetic":false,"types":[]},{"text":"impl Serialize for SerializedKey","synthetic":false,"types":[]},{"text":"impl Serialize for KeyKind","synthetic":false,"types":[]},{"text":"impl Serialize for Id","synthetic":false,"types":[]},{"text":"impl Serialize for Status","synthetic":false,"types":[]},{"text":"impl Serialize for To","synthetic":false,"types":[]},{"text":"impl Serialize for Level","synthetic":false,"types":[]},{"text":"impl Serialize for Urgency","synthetic":false,"types":[]},{"text":"impl Serialize for Error","synthetic":false,"types":[]},{"text":"impl Serialize for Attributes","synthetic":false,"types":[]},{"text":"impl Serialize for DataAttributes","synthetic":false,"types":[]},{"text":"impl Serialize for KeyAttributes","synthetic":false,"types":[]},{"text":"impl Serialize for Letters","synthetic":false,"types":[]},{"text":"impl Serialize for ObjectHandle","synthetic":false,"types":[]},{"text":"impl Serialize for Location","synthetic":false,"types":[]},{"text":"impl Serialize for StorageAttributes","synthetic":false,"types":[]},{"text":"impl Serialize for Mechanism","synthetic":false,"types":[]},{"text":"impl Serialize for KeySerialization","synthetic":false,"types":[]},{"text":"impl Serialize for SignatureSerialization","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()