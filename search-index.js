var searchIndex = JSON.parse('{\
"aead":{"doc":"Authenticated Encryption with Associated Data (AEAD) …","t":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,3,6,6,6,8,16,10,11,8,16,16,16,8,11,10,11,10,8,11,10,11,10,8,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","Error","Key","Nonce","Tag","NewAead","KeySize","new","new_from_slice","AeadCore","NonceSize","TagSize","CiphertextOverhead","AeadInPlace","encrypt_in_place","encrypt_in_place_detached","decrypt_in_place","decrypt_in_place_detached","AeadMutInPlace","encrypt_in_place","encrypt_in_place_detached","decrypt_in_place","decrypt_in_place_detached","Buffer","len","is_empty","extend_from_slice","truncate","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","fmt","fmt","eq","cmp","partial_cmp","hash","clone","new","new","new"],"q":["aead","aead::constsaead","","","","","","","","","","","","","","","","","","","","","","","","","","","aead::consts","","","","","","","","","","","","","","","","","","","","","","aead","","","","","","","aead::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aead","","","","","","","aead::consts","",""],"d":["Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Error type.","Key for a [<code>NewAead</code>] algorithm","Nonce: single-use value for ensuring ciphertexts are …","Tag: authentication code which ensures ciphertexts are …","Instantiate either a stateless [<code>Aead</code>] or stateful [<code>AeadMut</code>…","The size of the key array required by this algorithm.","Create a new AEAD instance with the given key.","Create new AEAD instance from key given as a byte slice..","Authenticated Encryption with Associated Data (AEAD) …","The length of a nonce.","The maximum length of the nonce.","The upper bound amount of additional space required to …","In-place stateless AEAD trait.","Encrypt the given buffer containing a plaintext message …","Encrypt the data in-place, returning the authentication …","Decrypt the message in-place, returning an error in the …","Decrypt the message in-place, returning an error in the …","In-place stateful AEAD trait.","Encrypt the given buffer containing a plaintext message …","Encrypt the data in-place, returning the authentication …","Decrypt the message in-place, returning an error in the …","Decrypt the data in-place, returning an error in the …","In-place encryption/decryption byte buffers.","Get the length of the buffer","Is the buffer empty?","Extend this buffer from the given slice","Truncate this buffer to the given size","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,2,2,0,3,3,3,3,0,4,4,4,4,0,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,8,7,6,7,8,7,6,7,8,6,7,6,8,7,8,6,8,7,6,6,8,6,7,8,6,7,8,8,8,6,7,6,7,8,8,8,8,7,7,7,6,6,6,6,6,8,8,7,7,8,8,8,8,8,8,6,7,6,7,8,8,6,7,8,8,7,6,8,8,8,8,8,8,8,8,8,7,6,8,7,8,6,9,9,9,9,9,9,9,6,7,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["key",6]]],[[],[["result",4],["error",3]]],null,null,null,null,null,[[["nonce",6],["buffer",8]],[["result",4],["error",3]]],[[["nonce",6]],[["result",4],["tag",6],["error",3]]],[[["nonce",6],["buffer",8]],[["result",4],["error",3]]],[[["nonce",6],["tag",6]],[["result",4],["error",3]]],null,[[["nonce",6]],[["result",4],["error",3]]],[[["nonce",6]],[["result",4],["tag",6],["error",3]]],[[["nonce",6]],[["result",4],["error",3]]],[[["nonce",6],["tag",6]],[["result",4],["error",3]]],null,[[],["usize",15]],[[],["bool",15]],[[],[["result",4],["error",3]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["bool",15]],[[["error",3]],["ordering",4]],[[["error",3]],[["ordering",4],["option",4]]],[[]],[[],["error",3]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"NewAead"],[8,"AeadCore"],[8,"AeadInPlace"],[8,"AeadMutInPlace"],[8,"Buffer"],[3,"B0"],[3,"B1"],[3,"Z0"],[3,"Error"]]},\
"aes":{"doc":"Pure Rust implementation of the Advanced Encryption …","t":[3,3,3,8,16,16,8,10,11,11,8,10,11,11,8,16,10,11,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Aes128","Aes192","Aes256","BlockCipher","BlockSize","ParBlocks","BlockDecrypt","decrypt_block","decrypt_par_blocks","decrypt_blocks","BlockEncrypt","encrypt_block","encrypt_par_blocks","encrypt_blocks","NewBlockCipher","KeySize","new","new_from_slice","Block","ParBlocks","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","fmt","fmt","fmt","clone","clone","clone","new","new","new","encrypt_block","encrypt_par_blocks","encrypt_block","encrypt_par_blocks","encrypt_block","encrypt_par_blocks","decrypt_block","decrypt_par_blocks","decrypt_block","decrypt_par_blocks","decrypt_block","decrypt_par_blocks"],"q":["aes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["AES-128 block cipher instance","AES-192 block cipher instance","AES-256 block cipher instance","Trait which marks a type as being a block cipher.","Size of the block in bytes","Number of blocks which can be processed in parallel by …","Decrypt-only functionality for block ciphers.","Decrypt block in-place","Decrypt several blocks in parallel using instruction …","Decrypt a slice of blocks, leveraging parallelism when …","Encrypt-only functionality for block ciphers.","Encrypt block in-place","Encrypt several blocks in parallel using instruction …","Encrypt a slice of blocks, leveraging parallelism when …","Instantiate a [<code>BlockCipher</code>] algorithm.","Key size in bytes with which cipher guaranteed to be …","Create new block cipher instance from key with fixed size.","Create new block cipher instance from key with variable …","128-bit AES block","8 x 128-bit AES blocks to be processed in parallel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,2,2,2,0,3,3,3,0,4,4,4,0,0,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,5,6,7,5,6,7,5,6,7,5,5,6,6,7,7,5,5,6,6,7,7],"f":[null,null,null,null,null,null,null,[[["genericarray",3]]],[[["genericarray",3]]],[[]],null,[[["genericarray",3]]],[[["genericarray",3]]],[[]],null,null,[[["genericarray",3]]],[[],[["result",4],["invalidlength",3]]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["block",6]]],[[["parblocks",6]]],[[["block",6]]],[[["parblocks",6]]],[[["block",6]]],[[["parblocks",6]]],[[["block",6]]],[[["parblocks",6]]],[[["block",6]]],[[["parblocks",6]]],[[["block",6]]],[[["parblocks",6]]]],"p":[[8,"BlockCipher"],[8,"BlockDecrypt"],[8,"BlockEncrypt"],[8,"NewBlockCipher"],[3,"Aes128"],[3,"Aes192"],[3,"Aes256"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structure."],"i":[0],"f":[null],"p":[]},\
"bitvec":{"doc":"<code>bitvec</code> — Addressable Bits","t":[0,0,8,11,11,11,11,11,8,16,16,10,10,3,3,3,3,3,0,3,11,11,11,11,11,11,11,11,11,3,0,4,13,12,12,12,13,12,12,12,11,11,4,13,12,12,12,13,12,12,12,11,11,4,13,12,12,12,13,12,12,12,11,11,4,13,12,12,12,13,12,12,12,11,11,0,8,11,11,10,10,10,10,0,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,3,18,18,11,11,11,3,11,11,11,11,11,3,11,11,11,11,11,3,18,18,11,11,11,11,11,0,8,18,18,18,8,18,18,0,8,10,11,11,3,3,5,5,0,3,3,12,12,3,0,11,11,11,11,11,18,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,4,13,13,3,3,12,12,3,4,13,13,4,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,5,5,5,5,5,5,8,16,16,10,10,10,10,10,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,8,16,16,16,16,10,10,11,0,8,16,10,10,8,10,8,10,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["macros","access","BitAccess","clear_bits","set_bits","invert_bits","write_bit","get_writers","BitSafe","Mem","Rad","load","store","BitSafeU8","BitSafeU16","BitSafeU32","BitSafeU64","BitSafeUsize","array","BitArray","zeroed","new","value","as_bitslice","as_mut_bitslice","as_raw_slice","as_mut_raw_slice","as_buffer","as_mut_buffer","IntoIter","domain","BitDomain","Enclave","head","body","tail","Region","head","body","tail","enclave","region","BitDomainMut","Enclave","head","body","tail","Region","head","body","tail","enclave","region","Domain","Enclave","head","elem","tail","Region","head","body","tail","enclave","region","DomainMut","Enclave","head","elem","tail","Region","head","body","tail","enclave","region","field","BitField","load","store","load_le","load_be","store_le","store_be","index","BitIdx","LAST","ZERO","new","new_unchecked","cast","value","next","prev","position","select","mask","range","range_all","offset","span","BitIdxError","value","BitTail","LAST","ZERO","new","value","range_from","BitPos","new","new_unchecked","value","select","mask","BitSel","new","new_unchecked","value","mask","range_all","BitMask","ALL","ZERO","new","value","test","insert","combine","mem","BitMemory","BITS","INDX","MASK","BitRegister","ONE","ALL","order","BitOrder","at","select","mask","Lsb0","Msb0","verify","verify_for_type","prelude","BitPtr","BitPtrRange","start","end","BitRef","ptr","from_bitptr","into_bitptr","replace","swap","set","EMPTY","raw_parts","into_range","is_empty","contains","DANGLING","try_new","new","raw_parts","range","into_bitref","immut","assert_mut","is_null","cast","as_ref","offset","wrapping_offset","offset_from","add","sub","wrapping_add","wrapping_sub","read","read_volatile","copy_to","copy_to_nonoverlapping","align_offset","from_ref","from_ptr","from_slice","pointer","from_mut","from_mut_ptr","from_mut_slice","pointer","as_mut","copy_from","copy_from_nonoverlapping","write","write_volatile","replace","swap","Const","Mut","Address","AddressError","Null","Misaligned","BitRef","BitPtrRange","start","end","BitPtr","BitPtrError","InvalidAddress","InvalidIndex","BitSpanError","InvalidBitptr","TooLong","TooHigh","copy","copy_nonoverlapping","eq","hash","read","read_volatile","replace","bitslice_from_raw_parts","bitslice_from_raw_parts_mut","swap","swap_nonoverlapping","write","write_volatile","slice","BitSlice","from_element","from_element_mut","from_slice","from_slice_mut","from_slice_unchecked","from_slice_unchecked_mut","empty","empty_mut","set","set_aliased","any","all","not_any","not_all","some","count_ones","count_zeros","iter_ones","iter_zeros","first_one","first_zero","last_one","last_zero","leading_ones","leading_zeros","trailing_ones","trailing_zeros","clone_from_bitslice","copy_from_bitslice","swap_with_bitslice","shift_left","shift_right","set_all","for_each","offset_from","set_unchecked","set_aliased_unchecked","swap_unchecked","split_at_unchecked","split_at_unchecked_mut","copy_within_unchecked","as_bitptr","as_mut_bitptr","as_bitptr_range","as_mut_bitptr_range","bit_domain","bit_domain_mut","domain","domain_mut","as_slice","split_at_aliased_mut","MAX_BITS","MAX_ELTS","from_raw_parts_unchecked","from_raw_parts_unchecked_mut","from_mut","from_raw_parts","from_raw_parts_mut","from_ref","BitSliceIndex","Immut","Mut","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Iter","IterMut","IterOnes","IterZeros","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","Split","SplitMut","SplitN","SplitNMut","Windows","store","BitStore","Mem","Access","Alias","Unalias","load_value","store_value","get_bit","view","BitView","Store","view_bits","view_bits_mut","AsBits","as_bits","AsBitsMut","as_bits_mut","bitarr","bits","view_bits","view_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","view_bits","view_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","view_bits","view_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","view_bits","view_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","view_bits","view_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","load","store","load","store","load","store","load","store","load","store","load_le","load_be","store_le","store_be","load_le","load_be","store_le","store_be","load_le","load_be","store_le","store_be","at","select","mask","at","select","mask","load_value","store_value","load_value","store_value","load_value","store_value","load_value","store_value","load_value","store_value","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","not","not","not","bitand","bitand","bitor","bitor","bitxor","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","drop","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","start_bound","end_bound","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","borrow","borrow_mut","try_from","try_from","try_from","try_from","try_from","try_from","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","next_back","nth_back","next_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","nth_back","next_back","next_back","next_back","next_back","next_back","next_back","next","nth","size_hint","count","last","next","next","nth","size_hint","count","last","next","size_hint","count","nth","last","next","size_hint","count","nth","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","nth","size_hint","count","last","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","count","last","next","size_hint","count","last","sum","into_iter","from","from","from","from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_mut","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","as_bitslice","as_mut_bitslice","to_const","to_mut","len","is_empty","first","first_mut","split_first","split_first_mut","split_last","split_last_mut","last","last_mut","get","get_mut","get_unchecked","get_unchecked_mut","swap","reverse","iter","iter_mut","windows","chunks","chunks_mut","chunks_exact","chunks_exact_mut","rchunks","rchunks_mut","rchunks_exact","rchunks_exact_mut","split_at","split_at_mut","split","split_mut","rsplit","rsplit_mut","splitn","splitn_mut","rsplitn","rsplitn_mut","contains","starts_with","ends_with","rotate_left","rotate_right","copy_within","align_to","align_to_mut","as_bitslice","by_ref","by_val","copied","into_bitslice","remainder","into_remainder","remainder","into_remainder","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias"],"q":["bitvec","","bitvec::access","","","","","","","","","","","","","","","","bitvec","bitvec::array","","","","","","","","","","","bitvec","bitvec::domain","","bitvec::domain::BitDomain","","","bitvec::domain","bitvec::domain::BitDomain","","","bitvec::domain","","","","bitvec::domain::BitDomainMut","","","bitvec::domain","bitvec::domain::BitDomainMut","","","bitvec::domain","","","","bitvec::domain::Domain","","","bitvec::domain","bitvec::domain::Domain","","","bitvec::domain","","","","bitvec::domain::DomainMut","","","bitvec::domain","bitvec::domain::DomainMut","","","bitvec::domain","","bitvec","bitvec::field","","","","","","","bitvec","bitvec::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec","bitvec::mem","","","","","","","bitvec","bitvec::order","","","","","","","","bitvec","bitvec::prelude","","","","","bitvec","bitvec::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::ptr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec","bitvec::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec","bitvec::store","","","","","","","","bitvec","bitvec::view","","","","","","","","bitvec","","bitvec::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::array","","","","","","","","","","","","","","","","bitvec::domain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::ptr","","","","","","","","","","","","","","bitvec::order","","","","","","","","","","","","","","bitvec::prelude","","","","","","","","","","","","","","","","","","","","","","bitvec::ptr","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::slicebitvec::access","","","","","","","","","","bitvec::slice","","","","","","","","bitvec::array","","","","bitvec::order","","","","","","bitvec::access","","","","","","","","","","bitvec::array","bitvec::prelude","bitvec::array","bitvec::prelude","bitvec::access","","","","","bitvec::array","","bitvec::domain","","","","bitvec::index","","","","","","bitvec::ptr","","bitvec::order","","bitvec::ptr","","bitvec::prelude","","","bitvec::ptr","","bitvec::slice","","","","","","","","","","","","","","","","","","","","","","bitvec::array","bitvec::index","","","","","","bitvec::ptr","bitvec::prelude","bitvec::ptr","","bitvec::slice","","bitvec::array","bitvec::index","","","","","","","","","","","","bitvec::ptr","","bitvec::order","","bitvec::ptr","","","bitvec::prelude","","","","","bitvec::ptr","","","","bitvec::slice","","","","","","","bitvec::array","bitvec::index","","","","","","bitvec::ptr","","bitvec::order","","bitvec::ptr","","bitvec::prelude","","bitvec::ptr","","bitvec::slice","","","","bitvec::array","bitvec::index","","","","","","bitvec::ptr","","bitvec::order","","bitvec::ptr","","bitvec::prelude","","","","bitvec::ptr","","bitvec::slice","","","","","bitvec::array","bitvec::index","bitvec::prelude","bitvec::array","bitvec::index","bitvec::array","bitvec::index","bitvec::array","","bitvec::slice","bitvec::array","bitvec::slice","bitvec::array","bitvec::slice","bitvec::prelude","bitvec::array","bitvec::slice","","","","","","","bitvec::array","bitvec::slice","","","","","","bitvec::prelude","","bitvec::array","bitvec::index","","","","","","bitvec::order","","bitvec::ptr","","bitvec::prelude","","","bitvec::ptr","bitvec::slice","bitvec::array","bitvec::domain","bitvec::prelude","bitvec::slice","","","","","","","","","","","","","bitvec::array","","","bitvec::index","bitvec::ptr","","bitvec::prelude","","bitvec::array","bitvec::domain","bitvec::slice","bitvec::array","bitvec::domain","bitvec::index","","","","","bitvec::slice","bitvec::array","bitvec::domain","bitvec::slice","bitvec::array","bitvec::domain","bitvec::slice","bitvec::ptr","bitvec::prelude","","bitvec::array","","bitvec::domain","bitvec::prelude","","bitvec::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::array","","","","","bitvec::domain","bitvec::prelude","","","","","bitvec::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitvec::index","bitvec::array","","bitvec::ptr","","","bitvec::prelude","","","bitvec::ptr","","","","","bitvec::array","bitvec::slice","bitvec::array","bitvec::prelude","bitvec::array","","bitvec::domain","","bitvec::index","","","","","","bitvec::ptr","","bitvec::order","","bitvec::ptr","","bitvec::prelude","","","bitvec::ptr","","bitvec::slice","","","","","","","","","","bitvec::array","bitvec::index","","","","","","bitvec::order","","bitvec::prelude","bitvec::slice","","bitvec::array","","bitvec::ptr","","bitvec::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Constructor macros for the crate’s collection types.","Memory access guards.","Abstracts over the instructions used when accessing a …","Clears any number of bits in a memory register to <code>0</code>.","Sets any number of bits in a memory register to <code>1</code>.","Inverts any number of bits in a memory register.","Writes a value to one bit in a memory register.","Gets the function that writes <code>value</code> into all bits under a …","Restricts memory modification to only exclusive …","The register type being guarded against shared mutation.","The accessor type being prevented from mutating while …","Reads the value out of memory only if a shared reference …","Writes a value into memory only if an exclusive reference …","A wrapper over a shared-mutable type that forbids writing …","A wrapper over a shared-mutable type that forbids writing …","A wrapper over a shared-mutable type that forbids writing …","A wrapper over a shared-mutable type that forbids writing …","A wrapper over a shared-mutable type that forbids writing …","A statically-allocated, fixed-size, buffer containing a …","An array of individual bits, able to be held by value on …","Constructs a new <code>BitArray</code> with its memory set to zero.","Wraps a buffer in a <code>BitArray</code>.","Removes the <code>BitArray</code> wrapper, leaving the contained …","Views the array as a <code>BitSlice</code>.","Views the array as a mutable <code>BitSlice</code>.","Views the array as a slice of its underlying memory …","Views the array as a mutable slice of its underlying …","Views the interior buffer.","Mutably views the interior buffer.","A by-value bit-array iterator.","Representations of the <code>BitSlice</code> region memory model.","Granular representation of the memory region containing a …","Indicates that a <code>BitSlice</code> is contained entirely in the …","The start index of the <code>BitSlice</code>.","The original <code>BitSlice</code> used to create this bit-domain view.","The end index of the <code>BitSlice</code>.","Indicates that a <code>BitSlice</code> region touches at least one edge…","Any bits that partially-fill the base element of the slice…","Any bits inside elements that the source <code>BitSlice</code> …","Any bits that partially fill the last element of the slice…","Attempts to view the domain as an enclave variant.","Attempts to view the domain as a region variant.","Granular representation of the memory region containing a …","Indicates that a <code>BitSlice</code> is contained entirely in the …","The start index of the <code>BitSlice</code>.","The original <code>BitSlice</code> used to create this bit-domain view.","The end index of the <code>BitSlice</code>.","Indicates that a <code>BitSlice</code> region touches at least one edge…","Any bits that partially-fill the base element of the slice…","Any bits inside elements that the source <code>BitSlice</code> …","Any bits that partially fill the last element of the slice…","Attempts to view the domain as an enclave variant.","Attempts to view the domain as a region variant.","Granular representation of the memory region containing a …","Indicates that a <code>BitSlice</code> is contained entirely in the …","The start index of the <code>BitSlice</code>.","An aliased view of the element containing the <code>BitSlice</code>.","The end index of the <code>BitSlice</code>.","Indicates that a <code>BitSlice</code> region touches at least one edge…","If the <code>BitSlice</code> started in the interior of its first …","All fully-spanned, unaliased, elements.","If the <code>BitSlice</code> ended in the interior of its last element,…","Attempts to view the domain as an enclave variant.","Attempts to view the domain as the region variant.","Granular representation of the memory region containing a …","Indicates that a <code>BitSlice</code> is contained entirely in the …","The start index of the <code>BitSlice</code>.","An aliased view of the element containing the <code>BitSlice</code>.","The end index of the <code>BitSlice</code>.","Indicates that a <code>BitSlice</code> region touches at least one edge…","If the <code>BitSlice</code> started in the interior of its first …","All fully-spanned, unaliased, elements.","If the <code>BitSlice</code> ended in the interior of its last element,…","Attempts to view the domain as an enclave variant.","Attempts to view the domain as the region variant.","Batched load/store access to bitfields.","Performs C-style bitfield access through a <code>BitSlice</code>.","Loads the bits in the <code>self</code> region into a local value.","Stores a sequence of bits from the user into the domain …","Loads from <code>self</code>, using little-endian element <code>T</code> ordering.","Loads from <code>self</code>, using big-endian element <code>T</code> ordering.","Stores into <code>self</code>, using little-endian element ordering.","Stores into <code>self</code>, using big-endian element ordering.","Well-typed counters and register descriptors.","A semantic index counter within a register element <code>R</code>.","The inclusive maximum index within an element <code>R</code>.","The inclusive minimum index within an element <code>R</code>.","Wraps a counter value as a known-good index into an <code>R</code> …","Wraps a counter value as an assumed-good index into an <code>R</code> …","Casts to a new index type.","Removes the index wrapper, leaving the internal counter.","Increments an index counter, wrapping at the back edge of …","Decrements an index counter, wrapping at the front edge …","Computes the bit position corresponding to <code>self</code> under …","Computes the bit selector corresponding to <code>self</code> under an …","Computes the bit selector for <code>self</code> as an accessor mask.","Iterates over all indices between an inclusive start and …","Iterates over all possible index values.","Computes the jump distance for some number of bits away …","Computes the span information for a region beginning at …","Marks an index that is invalid for a register type.","Removes the error wrapper, leaving the internal counter.","A semantic index counter within <em>or one bit past the end of</em>…","The inclusive maximum tail within an element <code>R</code>.","The inclusive minimum tail within an element <code>R</code>.","Wraps a counter value as a known-good tail of an <code>R</code> …","Removes the tail wrapper, leaving the internal counter.","Iterates over all tail indices at and after an inclusive …","An electrical position counter within a register element <code>R</code>…","Wraps a counter value as a known-good position within an <code>R</code>…","Wraps a counter value as an assumed-good position within …","Removes the position wrapper, leaving the internal …","Computes the bit selector corresponding to <code>self</code>.","Computes the bit selector for <code>self</code> as an accessor mask.","A one-hot selection mask for a register element <code>R</code>.","Wraps a counter value as a known-good selection of an <code>R</code> …","Wraps a counter value as an assumed-good selection of an <code>R</code>…","Removes the selector wrapper, leaving the internal …","Computes a bit-mask for <code>self</code>. This is a type-cast.","Iterates over all possible selector values.","A multi-bit selection mask for a register <code>R</code>.","A full mask.","An empty mask.","Wraps any <code>R</code> value as a bit-mask.","Removes the mask wrapper, leaving the internal value.","Tests whether the mask contains a given selector bit.","Inserts a selector bit into an existing mask.","Creates a new mask with a selector bit activated.","Memory element descriptions.","Description of an integer memory element.","The bit width of the integer.","The number of bits required to store an index in the …","A mask over all bits that can be used as an index within …","Description of a processor register.","The literal <code>1</code>.","The literal <code>!0</code>.","Ordering of bits within register elements.","An ordering over a register.","Converts a semantic bit index into an electrical bit …","Converts a semantic bit index into a one-hot selector …","Constructs a multiple-bit selector mask for batched …","Traverses a register from the least significant bit to …","Traverses a register from the most significant bit to the …","Verifies a <code>BitOrder</code> implementation’s adherence to the …","Verifies a <code>BitOrder</code> implementation’s adherence to the …","<code>bitvec</code> symbol export.","Pointer to an individual bit in a memory element. …","Equivalent to <code>Range<BitPtr<M, O, T>></code>.","The lower bound of the range (inclusive).","The higher bound of the range (exclusive).","A proxy reference, equivalent to C++ …","Mirror of the <code>core::ptr</code> module and <code>bitvec</code>-specific …","Converts a bit-pointer into a proxy bit-reference.","Decays the bit-reference to an ordinary bit-pointer.","Moves <code>src</code> into the referenced bit, returning the previous …","Swaps the values at two mutable locations, without …","Writes a bit into the proxied location without an …","The canonical empty range. All ranges with zero length …","Destructures the range back into its start and end …","Converts the structure into an actual <code>Range</code>. The <code>Range</code> …","Tests if the range is empty (the distance between …","Returns <code>true</code> if the <code>pointer</code> is contained in the range.","The dangling pointer. This selects the starting bit of …","Tries to construct a <code>BitPtr</code> from a memory location and a …","Constructs a <code>BitPtr</code> from a memory location and a bit …","Decomposes the pointer into its element address and bit …","Produces a pointer range starting at <code>self</code> and running for …","Converts a bit-pointer into a proxy bit-reference.","Removes write permissions from a bit-pointer.","Adds write permissions to a bit-pointer.","Tests if a bit-pointer is the null value.","Casts to a bit-pointer of another storage type, …","Produces a proxy reference to the referent bit.","Calculates the offset from a pointer.","Calculates the offset from a pointer using wrapping …","Calculates the distance between two pointers. The …","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Reads the bit from <code>*self</code>.","Performs a volatile read of the bit from <code>self</code>.","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","Computes the offset (in bits) that needs to be applied to …","Constructs a <code>BitPtr</code> from an element reference.","Attempts to construct a <code>BitPtr</code> from an element location.","Constructs a <code>BitPtr</code> from a slice reference.","Gets the pointer to the base memory location containing …","Constructs a <code>BitPtr</code> from an element reference.","Attempts to construct a <code>BitPtr</code> from an element location.","Constructs a <code>BitPtr</code> from a slice reference.","Gets the pointer to the base memory location containing …","Produces a proxy mutable reference to the referent bit.","Copies <code>count</code> bits from <code>src</code> to <code>self</code>. The source and …","Copies <code>count</code> bits from <code>src</code> to <code>self</code>. The source and …","Overwrites a memory location with the given bit.","Performs a volatile write of a memory location with the …","Replaces the bit at <code>*self</code> with <code>src</code>, returning the old bit.","Swaps the bits at two mutable locations. They may overlap.","An immutable pointer.","A mutable pointer. Contexts with a <code>Mutable</code> may lower to …","A non-null, well-aligned, <code>BitStore</code> element address.","An error produced when consuming <code>BitStore</code> memory …","<code>Address</code> cannot use the null pointer.","<code>Address</code> cannot be misaligned for the referent type <code>T</code>.","A proxy reference, equivalent to C++ …","Equivalent to <code>Range<BitPtr<M, O, T>></code>.","The lower bound of the range (inclusive).","The higher bound of the range (exclusive).","Pointer to an individual bit in a memory element. …","Errors produced by invalid bit-pointer components.","The element address was somehow invalid.","The bit index was somehow invalid.","An error produced when creating <code>BitSpan</code> encoded …","The base <code>BitPtr</code> is invalid.","<code>BitSpan</code> domains have a length ceiling.","<code>BitSpan</code> domains have an address ceiling.","Copies <code>count</code> bits from <code>src</code> to <code>dst</code>. The source and …","Copies <code>count</code> bits from <code>src</code> to <code>dst</code>. The source and …","Compares raw bit-pointers for equality.","Hash a raw bit-pointer.","Reads the bit from <code>src</code>.","Performs a volatile read of the bit from <code>src</code>.","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code>…","Forms a raw bit-slice from a bit-pointer and a length.","Performs the same functionality as <code>bitslice_from_raw_parts</code>…","Swaps the values at two mutable locations.","Swaps <code>count</code> bits between the two regions of memory …","Overwrites a memory location with the given bit.","Performs a volatile write of a memory location with the …","A dynamically-sized view into individual bits of a memory …","A slice of individual bits, anywhere in memory.","Constructs a shared <code>&BitSlice</code> reference over a shared …","Constructs an exclusive <code>&mut BitSlice</code> reference over an …","Constructs a shared <code>&BitSlice</code> reference over a slice.","Constructs an exclusive <code>&mut BitSlice</code> reference over a …","Converts a slice reference into a <code>BitSlice</code> reference …","Converts a slice reference into a <code>BitSlice</code> reference …","Produces the empty slice reference.","Produces the empty mutable slice reference.","Writes a new bit at a given index.","Writes a new bit at a given index.","Tests if <em>any</em> bit in the slice is set (logical <code>∨</code>).","Tests if <em>all</em> bits in the slice domain are set (logical <code>∧</code>…","Tests if <em>all</em> bits in the slice are unset (logical <code>¬∨</code>).","Tests if <em>any</em> bit in the slice is unset (logical <code>¬∧</code>).","Tests whether the slice has some, but not all, bits set …","Counts the number of bits set to <code>1</code> in the slice contents.","Counts the number of bits cleared to <code>0</code> in the slice …","Enumerates all bits in a <code>BitSlice</code> that are set to <code>1</code>.","Enumerates all bits in a <code>BitSlice</code> that are cleared to <code>0</code>.","Gets the index of the first bit in the bit-slice set to <code>1</code>.","Gets the index of the first bit in the bit-slice set to <code>0</code>.","Gets the index of the last bit in the bit-slice set to <code>1</code>.","Gets the index of the last bit in the bit-slice set to <code>0</code>.","Counts the number of bits from the start of the bit-slice …","Counts the number of bits from the start of the bit-slice …","Counts the number of bits from the end of the bit-slice …","Counts the number of bits from the end of the bit-slice …","Copies the bits from <code>src</code> into <code>self</code>.","Copies all bits from <code>src</code> into <code>self</code>, using a memcpy …","Swaps all bits in <code>self</code> with those in <code>other</code>.","Shifts the contents of a bit-slice left (towards index <code>0</code>).","Shifts the contents of a bit-slice right (towards index …","Sets all bits in the slice to a value.","Applies a function to each bit in the slice.","Produces the absolute offset in bits between two slice …","Writes a new bit at a given index, without doing bounds …","Writes a new bit at a given index, without doing bounds …","Swaps two bits in the slice.","Divides one slice into two at an index, without …","Divides one mutable slice into two at an index.","Copies bits from one part of the slice to another part of …","Returns a raw bit-pointer to the base of the …","Returns an unsafe mutable bit-pointer to the …","Returns the two raw bit-pointers spanning the bit-slice.","Returns the two unsafe mutable bit-pointers spanning the …","Splits the slice into subslices at alias boundaries.","Splits the slice into subslices at alias boundaries.","Views the underlying memory containing the slice, split …","Views the underlying memory containing the slice, split …","Views the underlying memory containing the slice.","Splits a mutable slice at some mid-point.","The inclusive maximum length of a <code>BitSlice<_, T></code>.","The inclusive maximum length that a slice <code>[T]</code> can be for …","Performs the same functionality as <code>from_raw_parts</code>, …","Performs the same functionality as <code>from_raw_parts_mut</code>, …","Converts a reference to <code>T</code> into a <code>BitSlice</code> over one …","Forms a bit-slice from a bit-pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to <code>T</code> into a <code>BitSlice</code> over one …","A helper trait used for indexing operations.","The output type for immutable accessors.","The output type for mutable accessors.","Returns a shared reference to the output at this …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this …","Returns a mutable reference to the output at this …","An iterator over a <code>BitSlice</code> in (non-overlapping) chunks (…","An iterator over a <code>BitSlice</code> in (non-overlapping) chunks (…","An iterator over a <code>BitSlice</code> in (non-overlapping) mutable …","An iterator over a <code>BitSlice</code> in (non-overlapping) mutable …","Immutable <code>BitSlice</code> iterator.","Mutable <code>BitSlice</code> iterator.","Enumerates bits in a <code>BitSlice</code> that are set to <code>1</code>.","Enumerates bits in a <code>BitSlice</code> that are cleared to <code>0</code>.","An iterator over a <code>BitSlice</code> in (non-overlapping) chunks (…","An iterator over a <code>BitSlice</code> in (non-overlapping) chunks (…","An iterator over a <code>BitSlice</code> in (non-overlapping) mutable …","An iterator over a <code>BitSlice</code> in (non-overlapping) mutable …","An iterator over subslices separated by bits that match a …","An iterator over subslices separated by bits that match a …","An iterator over subslices separated by bits that match a …","An iterator over subslices separated by bits that match a …","An iterator over subslices separated by bits that match a …","An iterator over the mutable subslices which are …","An iterator over subslices separated by bits that match a …","An iterator over subslices separated by bits that match a …","An iterator over overlapping subslices of length <code>size</code>.","Memory modeling.","Common interface for memory regions.","The register type used in the slice region underlying a …","A type that selects appropriate load/store instructions …","A sibling <code>BitStore</code> implementor. It is used when a <code>BitSlice</code>…","The inverse of <code>Alias</code>. It is used when a <code>BitSlice</code> removes …","Loads a value out of the memory system according to the …","Stores a value into the memory system according to the …","Reads a single bit out of the memory system according to …","<code>BitSlice</code> view adapters for memory regions.","Creates a <code>BitSlice</code> view over some type that supports it.","The region’s storage type.","Views a memory region as a <code>BitSlice</code>.","Views a memory region as a mutable <code>BitSlice</code>.","Views a region as an immutable <code>BitSlice</code> only.","Views memory as a slice of immutable bits.","Views a region as a mutable <code>BitSlice</code>.","Views memory as a slice of mutable bits.","Constructs a new <code>BitArray</code> from a bit-pattern description.","Creates a borrowed <code>BitSlice</code> in the local scopeoads from <code>self</code>, using little-endian element ordering if …","Loads from <code>self</code>, using big-endian element ordering if <code>self</code>…","Stores into <code>self</code>, using little-endian element ordering if …","Stores into <code>self</code>, using big-endian element ordering if …","Loads from <code>self</code>, using little-endian element ordering if …","Loads from <code>self</code>, using big-endian element ordering if <code>self</code>…","Stores into <code>self</code>, using little-endian element ordering if …","Stores into <code>self</code>, using big-endian element ordering if …ooks up a single bit by semantic indexeturns an immutable slice of all bits that have not been …","Returns a mutable slice of all bits that have not been …","Gets the address as a read-only pointer.","Gets the address as a write-capable pointer.","Returns the number of bits in the slice.","Returns <code>true</code> if the slice has a length of 0.","Returns the first bit of the slice, or <code>None</code> if it is …","Returns a mutable pointer to the first bit of the slice, …","Returns the first and all the rest of the bits of the …","Returns the first and all the rest of the bits of the …","Returns the last and all the rest of the bits of the …","Returns the last and all the rest of the bits of the …","Returns the last bit of the slice, or <code>None</code> if it is empty.","Returns a mutable pointer to the last bit in the slice.","Returns a reference to a bit or subslice depending on the …","Returns a mutable reference to a bit or subslice …","Returns a reference to a bit or subslice, without doing …","Returns a mutable reference to a bit or subslice, without …","Swaps two bits in the slice.","Reverses the order of bits in the slice, in place.","Returns an iterator over the slice.","Returns an iterator that allows modifying each bit.","Returns an iterator over all contiguous windows of length …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Returns an iterator over <code>chunk_size</code> bits of the slice at …","Divides one slice into two at an index.","Divides one mutable slice into two at an index.","Returns an iterator over subslices separated by bits that …","Returns an iterator over mutable subslices separated by …","Returns an iterator over subslices separated by bits that …","Returns an iterator over mutable subslices separated by …","Returns an iterator over subslices separated by bits that …","Returns an iterator over subslices separated by bits that …","Returns an iterator over subslices separated by bits that …","Returns an iterator over subslices separated by bits that …","Returns <code>true</code> if the slice contains a subslice that …","Returns <code>true</code> if <code>needle</code> is a prefix of the slice.","Returns <code>true</code> if <code>needle</code> is a suffix of the slice.","Rotates the slice in-place such that the first <code>by</code> bits of …","Rotates the slice in-place such that the first …","Copies bits from one part of the slice to another part of …","Transmute the bit-slice to a bit-slice of another type, …","Transmute the bit-slice to a bit-slice of another type, …","Views the underlying data as a subslice of the original …","Adapts the iterator to yield <code>&bool</code> references rather than …","Adapts the iterator to yield <code>bool</code> values rather than …","Forwards to <code>by_val</code>.","Views the underlying data as a subslice of the original …","Returns the remainder of the original <code>BitSlice</code> that is …","Returns the remainder of the original <code>BitSlice</code> that is …","Returns the remainder of the original <code>BitSlice</code> that is …","Returns the remainder of the original <code>BitSlice</code> that is …","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…","Adapts the iterator to no longer mark its yielded items as…"],"i":[0,0,0,1,1,1,1,1,0,2,2,2,2,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,4,5,5,5,4,6,6,6,4,4,0,7,8,8,8,7,9,9,9,7,7,0,10,11,11,11,10,12,12,12,10,10,0,13,14,14,14,13,15,15,15,13,13,0,0,16,16,16,16,16,16,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,0,19,19,19,19,19,0,20,20,20,20,20,0,21,21,21,21,21,0,22,22,22,22,22,22,22,0,0,23,23,23,0,24,24,0,0,25,25,25,0,0,0,0,0,0,0,26,26,0,0,27,27,27,27,27,26,26,26,26,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,29,29,0,0,26,26,0,0,30,30,0,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,33,33,33,33,33,33,33,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,34,34,34,0,0,35,35,35,0,36,0,37,0,0,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,13,13,13,13,13,13,13,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,47,47,47,47,47,47,47,28,28,28,28,28,28,28,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,48,48,48,48,48,48,48,29,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,32,32,32,32,32,32,32,38,38,39,39,40,40,41,41,42,42,32,32,32,32,32,32,32,32,3,3,3,3,46,46,46,47,47,47,38,38,39,39,40,40,41,41,42,42,3,27,3,27,38,39,40,41,42,43,3,4,7,10,13,17,18,19,20,21,22,44,45,46,47,48,29,27,26,28,30,31,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,32,3,17,18,19,20,21,22,29,27,30,31,32,32,3,17,17,18,18,19,19,20,20,21,21,22,22,44,45,46,47,48,29,29,27,27,27,26,28,30,30,31,31,68,68,69,69,32,32,32,3,17,18,19,20,21,22,44,45,46,47,48,29,27,28,30,31,68,69,32,32,3,17,18,19,20,21,22,44,45,46,47,48,29,27,27,27,28,30,31,68,69,32,32,32,3,22,27,3,22,3,22,3,3,32,3,32,3,32,27,3,32,32,32,32,32,32,32,3,32,32,32,32,32,32,26,26,3,17,18,19,20,21,22,46,47,48,29,27,26,28,30,32,43,10,26,49,50,51,52,53,54,55,56,57,58,59,68,69,3,3,3,17,48,48,28,28,3,10,32,3,10,17,19,20,21,22,32,3,10,32,3,10,32,48,27,28,43,43,10,26,26,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,61,62,63,68,69,43,43,43,43,43,10,26,26,26,26,26,49,49,49,49,49,50,50,50,50,50,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,68,68,69,69,69,69,22,3,3,48,48,29,26,28,28,30,30,30,31,31,3,49,3,26,43,3,4,10,17,18,19,20,21,22,44,45,46,47,48,29,27,26,28,30,31,49,51,52,54,56,58,60,62,68,69,3,17,18,19,20,21,22,46,47,26,68,69,43,43,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,49,49,49,50,54,55,58,59,50,53,55,57,59,61,63,65,67],"f":[null,null,null,[[["bitmask",3]]],[[["bitmask",3]]],[[["bitmask",3]]],[[["bool",15],["bitidx",3]]],[[["bool",15]]],null,null,null,[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["u8",15]],[["bitidxerror",3],["result",4]]],[[["u8",15]]],[[],[["bitidx",3],["result",4],["bitidxerror",3]]],[[],["u8",15]],[[]],[[]],[[],["bitpos",3]],[[],["bitsel",3]],[[],["bitmask",3]],[[["bittail",3]]],[[]],[[["isize",15]]],[[["usize",15]]],null,[[],["u8",15]],null,null,null,[[["u8",15]],["option",4]],[[],["u8",15]],[[["bitidx",3]]],null,[[["u8",15]],["option",4]],[[["u8",15]]],[[],["u8",15]],[[],["bitsel",3]],[[],["bitmask",3]],null,[[],["option",4]],[[]],[[]],[[],["bitmask",3]],[[]],null,null,null,[[]],[[]],[[["bitsel",3]],["bool",15]],[[["bitsel",3]]],[[["bitsel",3]]],null,null,null,null,null,null,null,null,null,null,[[["bitidx",3]],["bitpos",3]],[[["bitidx",3]],["bitsel",3]],[[],["bitmask",3]],null,null,[[["bool",15]]],[[["bool",15]]],null,null,null,null,null,null,null,[[["bitptr",3]]],[[],["bitptr",3]],[[["bool",15]],["bool",15]],[[["bitref",3]]],[[["bool",15]]],null,[[]],[[],[["range",3],["bitptr",3]]],[[],["bool",15]],[[["bitptr",3]],["bool",15]],null,[[["u8",15]],[["result",4],["bitptrerror",4]]],[[["bitidx",3],["address",3]]],[[]],[[["usize",15]],["bitptrrange",3]],[[],["bitref",3]],[[],[["bitptr",3],["const",3]]],[[],[["mut",3],["bitptr",3]]],[[],["bool",15]],[[],["bitptr",3]],[[],[["bitref",3],["option",4]]],[[["isize",15]]],[[["isize",15]]],[[],["isize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[["mut",3],["bitptr",3],["usize",15]]],[[["mut",3],["bitptr",3],["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[],[["result",4],["bitptrerror",4]]],[[]],[[]],[[]],[[],[["result",4],["bitptrerror",4]]],[[]],[[]],[[],[["bitref",3],["option",4]]],[[["usize",15],["const",3],["bitptr",3]]],[[["usize",15],["const",3],["bitptr",3]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]],["bool",15]],[[["mut",3],["bitptr",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["bitptr",3],["const",3],["mut",3],["bitptr",3]]],[[["usize",15],["bitptr",3],["const",3],["mut",3],["bitptr",3]]],[[["bitptr",3],["const",3],["bitptr",3]],["bool",15]],[[["bitptr",3],["const",3]]],[[["bitptr",3],["const",3]],["bool",15]],[[["bitptr",3],["const",3]],["bool",15]],[[["mut",3],["bitptr",3],["bool",15]],["bool",15]],[[["usize",15],["bitptr",3],["const",3]]],[[["mut",3],["bitptr",3],["usize",15]]],[[["mut",3],["bitptr",3],["bitptr",3]]],[[["usize",15],["bitptr",3],["bitptr",3],["mut",3]]],[[["mut",3],["bitptr",3],["bool",15]]],[[["mut",3],["bitptr",3],["bool",15]]],null,null,[[]],[[]],[[],[["result",4],["bitspanerror",4]]],[[],[["result",4],["bitspanerror",4]]],[[]],[[]],[[]],[[]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["iterones",3]],[[],["iterzeros",3]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["bitslice",3]]],[[]],[[["bitslice",3]]],[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[]],[[],["isize",15]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["bitptr",3],["const",3]]],[[],[["mut",3],["bitptr",3]]],[[],[["bitptrrange",3],["const",3]]],[[],[["mut",3],["bitptrrange",3]]],[[],["bitdomain",4]],[[],["bitdomainmut",4]],[[],["domain",4]],[[],["domainmut",4]],[[]],[[["usize",15]]],null,null,[[["usize",15],["bitptr",3],["const",3]],["bitslice",3]],[[["mut",3],["bitptr",3],["usize",15]],["bitslice",3]],[[],["bitslice",3]],[[["usize",15],["bitptr",3],["const",3]],[["bitslice",3],["bitspanerror",4],["result",4]]],[[["mut",3],["bitptr",3],["usize",15]],[["bitslice",3],["result",4],["bitspanerror",4]]],[[],["bitslice",3]],null,null,null,[[["bitslice",3]],["option",4]],[[["bitslice",3]],["option",4]],[[["bitslice",3]]],[[["bitslice",3]]],[[["bitslice",3]]],[[["bitslice",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["bitidx",3]],["bool",15]],null,null,null,[[],["bitslice",3]],[[],["bitslice",3]],null,[[],["bitslice",3]],null,[[],["bitslice",3]],null,null,[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["u8",15]],[[["u8",15]]],[[],["u16",15]],[[["u16",15]]],[[],["u32",15]],[[["u32",15]]],[[],["u64",15]],[[["u64",15]]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bitidx",3]],["bitpos",3]],[[["bitidx",3]],["bitsel",3]],[[],["bitmask",3]],[[["bitidx",3]],["bitpos",3]],[[["bitidx",3]],["bitsel",3]],[[],["bitmask",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bitarray",3]],["bool",15]],[[],["bool",15]],[[["bitidx",3]],["bool",15]],[[["bitidx",3]],["bool",15]],[[["bitidxerror",3]],["bool",15]],[[["bitidxerror",3]],["bool",15]],[[["bittail",3]],["bool",15]],[[["bittail",3]],["bool",15]],[[["bitpos",3]],["bool",15]],[[["bitpos",3]],["bool",15]],[[["bitsel",3]],["bool",15]],[[["bitsel",3]],["bool",15]],[[["bitmask",3]],["bool",15]],[[["bitmask",3]],["bool",15]],[[["const",3]],["bool",15]],[[["mut",3]],["bool",15]],[[["lsb0",3]],["bool",15]],[[["msb0",3]],["bool",15]],[[["address",3]],["bool",15]],[[["addresserror",4]],["bool",15]],[[["addresserror",4]],["bool",15]],[[["bitref",3]],["bool",15]],[[["bool",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["bitptrrange",3]],["bool",15]],[[["bitptr",3]],["bool",15]],[[["bitptrerror",4]],["bool",15]],[[["bitptrerror",4]],["bool",15]],[[["bitspanerror",4]],["bool",15]],[[["bitspanerror",4]],["bool",15]],[[["iterones",3]],["bool",15]],[[["iterones",3]],["bool",15]],[[["iterzeros",3]],["bool",15]],[[["iterzeros",3]],["bool",15]],[[["bitslice",3]],["bool",15]],[[["bitslice",3]],["bool",15]],[[["bitslice",3]],["bool",15]],[[],["ordering",4]],[[["bitidx",3]],["ordering",4]],[[["bitidxerror",3]],["ordering",4]],[[["bittail",3]],["ordering",4]],[[["bitpos",3]],["ordering",4]],[[["bitsel",3]],["ordering",4]],[[["bitmask",3]],["ordering",4]],[[["const",3]],["ordering",4]],[[["mut",3]],["ordering",4]],[[["lsb0",3]],["ordering",4]],[[["msb0",3]],["ordering",4]],[[],["ordering",4]],[[["addresserror",4]],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[["bitptrerror",4]],["ordering",4]],[[["bitspanerror",4]],["ordering",4]],[[["iterones",3]],["ordering",4]],[[["iterzeros",3]],["ordering",4]],[[],["ordering",4]],[[["bitarray",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["bitidx",3]],[["ordering",4],["option",4]]],[[["bitidxerror",3]],[["ordering",4],["option",4]]],[[["bittail",3]],[["ordering",4],["option",4]]],[[["bitpos",3]],[["ordering",4],["option",4]]],[[["bitsel",3]],[["ordering",4],["option",4]]],[[["bitmask",3]],[["ordering",4],["option",4]]],[[["const",3]],[["ordering",4],["option",4]]],[[["mut",3]],[["ordering",4],["option",4]]],[[["lsb0",3]],[["ordering",4],["option",4]]],[[["msb0",3]],[["ordering",4],["option",4]]],[[["address",3]],[["ordering",4],["option",4]]],[[["addresserror",4]],[["ordering",4],["option",4]]],[[["bitref",3]],[["ordering",4],["option",4]]],[[["bool",15]],[["ordering",4],["option",4]]],[[["bool",15]],[["ordering",4],["option",4]]],[[["bitptr",3]],[["ordering",4],["option",4]]],[[["bitptrerror",4]],[["ordering",4],["option",4]]],[[["bitspanerror",4]],[["ordering",4],["option",4]]],[[["iterones",3]],[["ordering",4],["option",4]]],[[["iterzeros",3]],[["ordering",4],["option",4]]],[[["bitslice",3]],[["ordering",4],["option",4]]],[[["bitslice",3]],[["ordering",4],["option",4]]],[[["bitslice",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15],["range",3]]],[[["usize",15],["rangefrom",3]]],[[["rangefull",3]]],[[["usize",15],["rangeinclusive",3]]],[[["usize",15],["rangeto",3]]],[[["usize",15],["rangetoinclusive",3]]],[[]],[[["usize",15],["range",3]]],[[["usize",15],["rangefrom",3]]],[[["rangefull",3]]],[[["usize",15],["rangeinclusive",3]]],[[["usize",15],["rangeto",3]]],[[["usize",15],["rangetoinclusive",3]]],[[],[["bound",4],["bitptr",3]]],[[],[["bound",4],["bitptr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bitslice",3]],[[],["bitslice",3]],[[["bitslice",3]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[["infallible",4]]],[[["range",3],["bitptr",3]]],[[]],[[]],[[["addresserror",4]]],[[["bitidxerror",3]]],[[["infallible",4]]],[[["bitptrerror",4]]],[[["infallible",4]]],[[],["bitslice",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[],[["range",3],["bitptr",3]]],[[],["intoiter",3]],[[]],[[]],[[]],[[],["bitidx",3]],[[],["bitidxerror",3]],[[],["bittail",3]],[[],["bitpos",3]],[[],["bitsel",3]],[[],["bitmask",3]],[[],["const",3]],[[],["mut",3]],[[],["lsb0",3]],[[],["msb0",3]],[[]],[[],["addresserror",4]],[[]],[[]],[[]],[[],["bitptrerror",4]],[[],["bitspanerror",4]],[[]],[[],["windows",3]],[[],["chunks",3]],[[],["chunksexact",3]],[[],["rchunks",3]],[[],["rchunksexact",3]],[[],["split",3]],[[],["rsplit",3]],[[],["iterones",3]],[[],["iterzeros",3]],[[]],[[],["bitidx",3]],[[],["bitidxerror",3]],[[],["bittail",3]],[[],["bitpos",3]],[[],["bitsel",3]],[[],["bitmask",3]],[[],["lsb0",3]],[[],["msb0",3]],[[]],[[]],[[]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[],[["bitref",3],["option",4]]],[[],[["option",4],["bitref",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["bitref",3],["option",4]]],[[],[["option",4],["bitref",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["usize",15]]],[[]],[[],["iter",3]],[[],["itermut",3]],[[["usize",15]],["windows",3]],[[["usize",15]],["chunks",3]],[[["usize",15]],["chunksmut",3]],[[["usize",15]],["chunksexact",3]],[[["usize",15]],["chunksexactmut",3]],[[["usize",15]],["rchunks",3]],[[["usize",15]],["rchunksmut",3]],[[["usize",15]],["rchunksexact",3]],[[["usize",15]],["rchunksexactmut",3]],[[["usize",15]]],[[["usize",15]]],[[],["split",3]],[[],["splitmut",3]],[[],["rsplit",3]],[[],["rsplitmut",3]],[[["usize",15]],["splitn",3]],[[["usize",15]],["splitnmut",3]],[[["usize",15]],["rsplitn",3]],[[["usize",15]],["rsplitnmut",3]],[[["bitslice",3]],["bool",15]],[[["bitslice",3]],["bool",15]],[[["bitslice",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["bitslice",3]],[[]],[[]],[[]],[[],["bitslice",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[],["itermutnoalias",3]],[[],["chunksmutnoalias",3]],[[],["chunksexactmutnoalias",3]],[[],["rchunksmutnoalias",3]],[[],["rchunksexactmutnoalias",3]],[[],["splitmutnoalias",3]],[[],["rsplitmutnoalias",3]],[[],["splitnmutnoalias",3]],[[],["rsplitnmutnoalias",3]]],"p":[[8,"BitAccess"],[8,"BitSafe"],[3,"BitArray"],[4,"BitDomain"],[13,"Enclave"],[13,"Region"],[4,"BitDomainMut"],[13,"Enclave"],[13,"Region"],[4,"Domain"],[13,"Enclave"],[13,"Region"],[4,"DomainMut"],[13,"Enclave"],[13,"Region"],[8,"BitField"],[3,"BitIdx"],[3,"BitIdxError"],[3,"BitTail"],[3,"BitPos"],[3,"BitSel"],[3,"BitMask"],[8,"BitMemory"],[8,"BitRegister"],[8,"BitOrder"],[3,"BitPtrRange"],[3,"BitRef"],[3,"BitPtr"],[4,"AddressError"],[4,"BitPtrError"],[4,"BitSpanError"],[3,"BitSlice"],[8,"BitSliceIndex"],[8,"BitStore"],[8,"BitView"],[8,"AsBits"],[8,"AsBitsMut"],[3,"BitSafeU8"],[3,"BitSafeU16"],[3,"BitSafeU32"],[3,"BitSafeU64"],[3,"BitSafeUsize"],[3,"IntoIter"],[3,"Const"],[3,"Mut"],[3,"Lsb0"],[3,"Msb0"],[3,"Address"],[3,"Iter"],[3,"IterMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"RChunks"],[3,"RChunksMut"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"Split"],[3,"SplitMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"IterOnes"],[3,"IterZeros"]]},\
"block_buffer":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BlockBuffer","input_block","input_blocks","input_lazy","len64_padding_be","len64_padding_le","len128_padding_be","size","position","remaining","reset","borrow","borrow_mut","try_from","from","into","try_into","type_id","clone","default"],"q":["block_buffer","","","","","","","","","","","","","","","","","","",""],"d":["Buffer for block processing of data","Process data in <code>input</code> in blocks of size <code>BlockSize</code> using …","Process data in <code>input</code> in blocks of size <code>BlockSize</code> using …","Variant that doesn’t flush the buffer until there’s …","Pad message with 0x80, zeros and 64-bit message length …","Pad message with 0x80, zeros and 64-bit message length …","Pad message with 0x80, zeros and 128-bit message length …","Return size of the internall buffer in bytes","Return current cursor position","Return number of remaining bytes in the internall buffer","Reset buffer by setting cursor position to zero","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u128",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["blockbuffer",3]],[[],["blockbuffer",3]]],"p":[[3,"BlockBuffer"]]},\
"block_modes":{"doc":"This crate contains generic implementation of block …","t":[3,3,3,3,3,3,3,3,3,8,16,10,11,11,10,10,11,11,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Cbc","Cfb","Cfb8","Ecb","BlockModeError","InvalidKeyIvLength","Ige","Ofb","Pcbc","BlockMode","IvSize","new","new_fix","new_from_slices","encrypt_blocks","decrypt_blocks","encrypt","decrypt","IvState","iv_state","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","encrypt_blocks","decrypt_blocks","new","encrypt_blocks","decrypt_blocks","new","encrypt_blocks","decrypt_blocks","new","new_from_slices","encrypt_blocks","decrypt_blocks","new","encrypt_blocks","decrypt_blocks","new","encrypt_blocks","decrypt_blocks","new","encrypt_blocks","decrypt_blocks","iv_state","iv_state","iv_state","iv_state","iv_state","iv_state","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","new_fix","new_from_slices","encrypt","decrypt","new"],"q":["block_modes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Cipher Block Chaining (CBC) block cipher mode instance.","Cipher feedback (CFB) block mode instance with a full …","Cipher feedback (CFB) block mode instance with a full …","Electronic Codebook (ECB) block cipher mode instance.","Block mode error.","Invalid key or IV length error.","Infinite Garble Extension (IGE) block cipher mode …","Output feedback (OFB) block mode instance with a full …","Propagating Cipher Block Chaining (PCBC) mode instance.","Trait for a block cipher mode of operation that is used …","Initialization Vector size.","Create a new block mode instance from initialized block …","Create a new block mode instance from fixed sized key and …","Create a new block mode instance from variable size key …","Encrypt blocks of data","Decrypt blocks of data","Encrypt message in-place.","Decrypt message in-place.","Trait for a BlockMode, used to obtain the current state …","Returns the IV needed to process the following block. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new block mode instance from fixed sized key and …","Create a new block mode instance from variable size key …","Encrypt message in-place.","Decrypt message in-place.","Initialize PCBC"],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,5,5,5,6,6,6,7,7,7,8,8,8,8,9,9,9,10,10,10,11,11,11,5,6,7,9,10,11,3,4,3,4,3,4,5,6,7,8,10,11,1,1,1,1,11],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["genericarray",3]]],[[["genericarray",3],["genericarray",3]]],[[],[["invalidkeyivlength",3],["result",4]]],[[]],[[]],[[["usize",15]],[["result",4],["blockmodeerror",3]]],[[],[["result",4],["blockmodeerror",3]]],null,[[],[["genericarray",3],["u8",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[]],[[]],[[["genericarray",3]]],[[]],[[]],[[["genericarray",3]]],[[]],[[]],[[["genericarray",3]]],[[],[["invalidkeyivlength",3],["result",4]]],[[]],[[]],[[["genericarray",3]]],[[]],[[]],[[["genericarray",3]]],[[]],[[]],[[["genericarray",3]]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["blockmodeerror",3]],[[],["invalidkeyivlength",3]],[[],["cbc",3]],[[],["cfb",3]],[[],["cfb8",3]],[[],["ecb",3]],[[],["ofb",3]],[[],["pcbc",3]],[[["genericarray",3],["genericarray",3]]],[[],[["invalidkeyivlength",3],["result",4]]],[[["usize",15]],[["result",4],["blockmodeerror",3]]],[[],[["result",4],["blockmodeerror",3]]],[[["genericarray",3]]]],"p":[[8,"BlockMode"],[8,"IvState"],[3,"BlockModeError"],[3,"InvalidKeyIvLength"],[3,"Cbc"],[3,"Cfb"],[3,"Cfb8"],[3,"Ecb"],[3,"Ige"],[3,"Ofb"],[3,"Pcbc"]]},\
"block_padding":{"doc":"Padding and unpadding of messages divided into blocks.","t":[3,3,8,10,11,10,4,4,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["PadError","UnpadError","Padding","pad_block","pad","unpad","ZeroPadding","Pkcs7","AnsiX923","Iso7816","NoPadding","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","pad_block","pad","unpad","pad_block","unpad","pad_block","unpad","pad_block","unpad","pad_block","pad","unpad","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone"],"q":["block_padding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error for indicating failed padding operation","Error for indicating failed unpadding operation","Trait for padding messages divided into blocks","Pads <code>block</code> filled with data up to <code>pos</code>.","Pads message with length <code>pos</code> in the provided buffer.","Unpad given <code>data</code> by truncating it according to the used …","Pad block with zeros.","Pad block with bytes with value equal to the number of …","Pad block with zeros except the last byte which will be …","Pad block with byte sequence <code>\\\\x80 00...00 00</code>.","Don’t pad the data. Useful for key wrapping. Padding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,4,4,4,5,5,6,6,7,7,8,8,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8],"f":[null,null,null,[[["usize",15]],[["result",4],["paderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[],[["result",4],["unpaderror",3]]],null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["result",4],["paderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[],[["result",4],["unpaderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[],[["result",4],["unpaderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[],[["result",4],["unpaderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[],[["result",4],["unpaderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[["usize",15]],[["result",4],["paderror",3]]],[[],[["result",4],["unpaderror",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["paderror",3]],[[],["unpaderror",3]],[[],["zeropadding",4]],[[],["pkcs7",4]],[[],["ansix923",4]],[[],["iso7816",4]],[[],["nopadding",4]]],"p":[[8,"Padding"],[3,"PadError"],[3,"UnpadError"],[4,"ZeroPadding"],[4,"Pkcs7"],[4,"AnsiX923"],[4,"Iso7816"],[4,"NoPadding"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[8,10,11,10,11,10,10,10,10,10,11,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,10,10,4,6,4,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ByteOrder","read_u16","read_u24","read_u32","read_u48","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u24","write_u32","write_u48","write_u64","write_u128","write_uint","write_uint128","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","read_f32","read_f64","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","write_f32","write_f64","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","write_u16_into","write_u32_into","write_u64_into","write_u128_into","write_i8_into","write_i16_into","write_i32_into","write_i64_into","write_i128_into","write_f32_into","write_f64_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_i128","from_slice_f32","from_slice_f64","BigEndian","BE","LittleEndian","LE","NetworkEndian","NativeEndian","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","fmt","fmt","eq","eq","cmp","cmp","partial_cmp","partial_cmp","hash","hash","clone","clone","default","default"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>ByteOrder</code> describes types that can serialize integers as …","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from <code>buf</code>.","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Converts the given slice of unsigned 16 bit integers to a …","Converts the given slice of unsigned 32 bit integers to a …","Converts the given slice of unsigned 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of IEEE754 single-precision (4 …","Converts the given slice of IEEE754 double-precision (8 …","Defines big-endian serialization.","A type alias for <code>BigEndian</code>.","Defines little-endian serialization.","A type alias for <code>LittleEndian</code>.","Defines network byte order serialization.","Defines system native-endian serialization.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3],"f":[null,[[],["u16",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i128",15]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["f32",15]],[[],["f64",15]],[[["i16",15]]],[[["i32",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i128",15]]],[[["i64",15],["usize",15]]],[[["usize",15],["i128",15]]],[[["f32",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[["bigendian",4]],[["ordering",4],["option",4]]],[[["littleendian",4]],[["ordering",4],["option",4]]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[],["bigendian",4]],[[],["littleendian",4]]],"p":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]},\
"cbor_smol":{"doc":"","t":[0,5,5,3,11,0,8,16,10,3,11,11,11,3,12,11,11,0,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,16,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,5,5,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["de","from_bytes","take_from_bytes","Deserializer","from_bytes","ser","Writer","Error","write_all","SliceWriter","new","bytes_written","into_inner","Serializer","writer","new","into_inner","error","Result","Error","WontImplement","NotYetImplemented","SerializeBufferFull","DeserializeUnexpectedEnd","DeserializeBadBool","DeserializeBadUtf8","DeserializeBadEnum","DeserializeBadMajor","DeserializeBadI8","DeserializeBadI16","DeserializeBadI32","DeserializeBadU8","DeserializeBadU16","DeserializeBadU32","DeserializeExpectedNull","InexistentSliceToArrayError","DeserializeNonMinimal","SerdeSerCustom","SerdeDeCustom","SerdeMissingField","ArrayLength","ArrayType","Bytes","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","cbor_serialize","cbor_serialize_extending_bytes","cbor_serialize_bytes","cbor_deserialize","try_debug","try_error","try_info","try_trace","try_warn","log","debug","error","info","trace","warn","log_now","debug_now","error_now","info_now","trace_now","warn_now","try_log_now","try_debug_now","try_error_now","try_info_now","try_trace_now","try_warn_now","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","default","fmt","serialize","as_mut","clone","from","into_iter","eq","hash","deref","as_ref","partial_cmp","deserialize","deref_mut","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","write_all","fmt","fmt","fmt","eq","ne","clone","custom","custom","missing_field","new","from","into_inner","into_vec","as_slice","as_mut_slice","try_convert_into","try_from_slice","try_from","insert_slice_at","insert","remove","resize_default","resize_to_capacity","to_bytes","try_to_bytes","from_serialized","new","new","new"],"q":["cbor_smol","cbor_smol::de","","","","cbor_smol","cbor_smol::ser","","","","","","","","","","","cbor_smol","cbor_smol::error","","","","","","","","","","","","","","","","","","","","","","cbor_smol","","","","cbor_smol::constscbor_smol","","","","","","","","","","","","","","","","","","","","","","","","","","","cbor_smol::de","","","","","","","cbor_smol::ser","","","","","","","","","","","","","","cbor_smol::error","","","","","","","cbor_smol","","","","","","","cbor_smol::consts","","","","","","","","","","","","","","","","","","","","","","cbor_smol","","","","","","","","","","","","","","cbor_smol::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cbor_smol::ser","","cbor_smol::error","","","","","","","","cbor_smol","","","","","","","","","","","","","","","","","cbor_smol::consts","",""],"d":["","Deserialize a message of type <code>T</code> from a byte slice. The …","Deserialize a message of type <code>T</code> from a byte slice. The …","A structure for deserializing a cbor-smol message.","Obtain a Deserializer from a slice of bytes","","","The type of error returned when a write operation fails.","Attempts to write an entire buffer into this write.","","Wraps a mutable slice so it can be used as a <code>Writer</code>.","Returns the number of bytes written to the underlying …","Returns the underlying slice.","","","","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","","This is the Result type used by cbor-smol.","This is the error type used by cbor-smol","This is a feature that cbor-smol will never implement","This is a feature that cbor-smol intends to support, but …","The serialize buffer is full","Hit the end of buffer, expected more data","Found a bool that wasn’t 0xf4 or 0xf5","Tried to parse invalid utf-8","Could not parse an enum","Expected a different major type","Expected a i8, was too large","Expected a i16, was too large","Expected a i32, was too large","Expected a u8","Expected a u16","Expected a u32","Expected a NULL marker","Inexistent slice-to-array cast error. Used here to avoid …","Value may be valid, but not encoded in minimal way","Serde Serialization Error","Serde Deserialization Error","Serde Missing required value","Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","","Append serialization of object to existing bytes, …","Serialize object into newly allocated Bytes.","","Fallible version of <code>debug!</code>.","Fallible version of <code>error!</code>.","Fallible version of <code>info!</code>.","Fallible version of <code>trace!</code>.","Fallible version of <code>warn!</code>.","Local version of <code>log!</code>.","Local version of <code>debug!</code>.","Local version of <code>error!</code>.","Local version of <code>info!</code>.","Local version of <code>trace!</code>.","Local version of <code>warn!</code>.","Immediate version of <code>log!</code>.","Immediate version of <code>debug!</code>.","Immediate version of <code>error!</code>.","Immediate version of <code>info!</code>.","Immediate version of <code>trace!</code>.","Immediate version of <code>warn!</code>.","Fallible immediate version of <code>log!</code>.","Fallible immediate version of <code>debug!</code>.","Fallible immediate version of <code>error!</code>.","Fallible immediate version of <code>info!</code>.","Fallible immediate version of <code>trace!</code>.","Fallible immediate version of <code>warn!</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new, empty <code>Bytes<N></code>.","Wrap existing bytes in a <code>Bytes<N></code>.","Unwraps the Vec<u8, N>, same as <code>into_vec</code>.","Unwraps the Vec<u8, N>, same as <code>into_inner</code>.","Returns an immutable slice view.","Returns a mutable slice view.","Low-noise conversion between lengths.","","Some APIs offer an interface of the form …","","","","","","Clone into at least same size byte buffer.","Fallible conversion into differently sized byte buffer.","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,1,0,0,2,2,0,3,3,3,0,4,4,4,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,9,8,9,10,9,8,9,10,8,9,8,10,9,10,8,10,9,8,8,10,8,9,10,8,9,10,10,10,8,9,8,9,10,10,10,10,9,9,9,8,8,8,8,8,10,10,9,9,10,10,10,10,10,10,8,9,8,9,10,10,8,9,10,10,9,8,10,10,10,10,10,10,10,10,10,9,8,10,9,10,8,3,3,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10],"f":[null,[[],["result",6]],[[],["result",6]],null,[[]],null,null,null,[[],["result",4]],null,[[],["slicewriter",3]],[[],["usize",15]],[[]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[["bytes",3]],[["result",6],["usize",15]]],[[],[["result",6],["bytes",3]]],[[],[["deserialize",8],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bytes",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[]],[[],["bytes",3]],[[["vec",3],["u8",15]],["bytes",3]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[],[["result",4],["bytes",3]]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[],["error",4]],[[]],[[]],[[["str",15]]],[[],["bytes",3]],[[],["bytes",3]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[]],[[]],[[],[["result",4],["bytes",3]]],[[],[["result",4],["bytes",3]]],[[],[["result",4],["bytes",3]]],[[["usize",15]],["result",4]],[[["usize",15],["u8",15]],[["u8",15],["result",4]]],[[["usize",15]],[["result",4],["u8",15]]],[[["usize",15]],["result",4]],[[]],[[],["bytes",3]],[[],[["result",4],["bytes",3]]],[[],["bytes",3]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[3,"Deserializer"],[8,"Writer"],[3,"SliceWriter"],[3,"Serializer"],[4,"Error"],[8,"ArrayLength"],[3,"Bytes"],[3,"B0"],[3,"B1"],[3,"Z0"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"chacha20":{"doc":"The ChaCha20 stream cipher (RFC 8439)","t":[3,6,6,6,6,6,3,3,3,3,3,3,6,6,6,6,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha","ChaCha12","ChaCha20","ChaCha8","Key","Nonce","ChaCha12Rng","ChaCha12RngCore","ChaCha20Rng","ChaCha20RngCore","ChaCha8Rng","ChaCha8RngCore","XChaCha12","XChaCha20","XChaCha8","XNonce","BLOCK_SIZE","KEY_SIZE","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","new","try_apply_keystream","try_current_pos","try_seek","generate","generate","generate","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed"],"q":["chacha20","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha family stream cipher, generic around a number of …","ChaCha12 stream cipher (reduced-round variant of [<code>ChaCha20</code>…","ChaCha20 stream cipher (RFC 8439 version with 96-bit …","ChaCha8 stream cipher (reduced-round variant of [<code>ChaCha20</code>]…","ChaCha20 key type (256-bits/32-bytes)","Nonce type (96-bits/12-bytes)","Random number generator over the ChaCha12 stream cipher.","Core random number generator, for use with […","Random number generator over the ChaCha20 stream cipher.","Core random number generator, for use with […","Random number generator over the ChaCha8 stream cipher.","Core random number generator, for use with […","XChaCha12 stream cipher (reduced-round variant of […","XChaCha20 is a ChaCha20 variant with an extended 192-bit …","XChaCha8 stream cipher (reduced-round variant of […","EXtended ChaCha20 nonce (192-bits/24-bytes)","Size of a ChaCha20 block in bytes","Size of a ChaCha20 key in bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,1,1,1,1,1,3,5,7,2,2,2,2,4,4,4,4,6,6,6,6,2,3,4,5,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["nonce",6],["key",6]]],[[],[["result",4],["looperror",3]]],[[],[["seeknum",8],["overflowerror",3],["result",4]]],[[["seeknum",8]],[["result",4],["looperror",3]]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ChaCha"],[3,"ChaCha8Rng"],[3,"ChaCha8RngCore"],[3,"ChaCha12Rng"],[3,"ChaCha12RngCore"],[3,"ChaCha20Rng"],[3,"ChaCha20RngCore"]]},\
"chacha20poly1305":{"doc":"[<code>ChaCha20Poly1305</code>] (RFC 8439) is an Authenticated …","t":[6,6,6,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Key","Nonce","Tag","ChaCha20Poly1305","ChaCha8Poly1305","ChaCha12Poly1305","ChaChaPoly1305","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_in_place","encrypt_in_place_detached","decrypt_in_place","decrypt_in_place_detached","drop","clone","new","encrypt_in_place_detached","decrypt_in_place_detached"],"q":["chacha20poly1305","","","","","","","","","","","","","","","","","","","","","",""],"d":["Key type (256-bits/32-bytes).","Nonce type (96-bits/12-bytes).","Poly1305 tag.","ChaCha20Poly1305 Authenticated Encryption with Additional …","ChaCha8Poly1305 (reduced round variant) Authenticated …","ChaCha12Poly1305 (reduced round variant) Authenticated …","Generic ChaCha+Poly1305 Authenticated Encryption with …","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]],[["error",3],["result",4]]],[[["genericarray",3]],[["genericarray",3],["error",3],["result",4]]],[[["genericarray",3]],[["error",3],["result",4]]],[[["genericarray",3],["genericarray",3]],[["error",3],["result",4]]],[[]],[[]],[[["key",6]]],[[["nonce",6]],[["tag",6],["error",3],["result",4]]],[[["tag",6],["nonce",6]],[["result",4],["error",3]]]],"p":[[3,"ChaChaPoly1305"]]},\
"cipher":{"doc":"This crate defines a set of traits which describe the …","t":[0,3,3,3,6,6,6,8,16,10,11,8,16,16,8,10,11,11,8,10,11,11,8,10,8,10,6,6,8,16,16,10,11,8,16,16,10,8,11,10,8,10,10,11,11,8,10,10,8,10,10,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["errors","LoopError","InvalidLength","OverflowError","BlockCipherKey","Block","ParBlocks","NewBlockCipher","KeySize","new","new_from_slice","BlockCipher","BlockSize","ParBlocks","BlockEncrypt","encrypt_block","encrypt_par_blocks","encrypt_blocks","BlockDecrypt","decrypt_block","decrypt_par_blocks","decrypt_blocks","BlockEncryptMut","encrypt_block_mut","BlockDecryptMut","decrypt_block_mut","CipherKey","Nonce","NewCipher","KeySize","NonceSize","new","new_from_slices","FromBlockCipher","BlockCipher","NonceSize","from_block_cipher","StreamCipher","apply_keystream","try_apply_keystream","StreamCipherSeek","try_current_pos","try_seek","current_pos","seek","AsyncStreamCipher","encrypt","decrypt","SeekNum","from_block_byte","to_block_byte","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","fmt","fmt","fmt","fmt","fmt","fmt","from","clone","clone","clone","new_from_slice","encrypt_par_blocks","encrypt_blocks","decrypt_par_blocks","decrypt_blocks","new_from_slices","apply_keystream","current_pos","seek","new","new","new"],"q":["cipher","cipher::errors","","","cipher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cipher::constscipher::errors","","","","","","","","","","","","","","","","","","","","","cipher::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cipher::errors","","","","","","","","","","cipher","","","","","","","","","cipher::consts","",""],"d":["Error types.","The error type returned when stream cipher has reached …","The error type returned when key and/or nonce used in …","The error type returned when a cipher position can not be …","Key for an algorithm that implements [<code>NewBlockCipher</code>].","Block on which a [<code>BlockCipher</code>] operates.","Block on which a [<code>BlockCipher</code>] operates in parallel.","Instantiate a [<code>BlockCipher</code>] algorithm.","Key size in bytes with which cipher guaranteed to be …","Create new block cipher instance from key with fixed size.","Create new block cipher instance from key with variable …","Trait which marks a type as being a block cipher.","Size of the block in bytes","Number of blocks which can be processed in parallel by …","Encrypt-only functionality for block ciphers.","Encrypt block in-place","Encrypt several blocks in parallel using instruction …","Encrypt a slice of blocks, leveraging parallelism when …","Decrypt-only functionality for block ciphers.","Decrypt block in-place","Decrypt several blocks in parallel using instruction …","Decrypt a slice of blocks, leveraging parallelism when …","Encrypt-only functionality for block ciphers with mutable …","Encrypt block in-place","Decrypt-only functionality for block ciphers with mutable …","Decrypt block in-place","Key for an algorithm that implements [<code>NewCipher</code>].","Nonce for an algorithm that implements [<code>NewCipher</code>].","Cipher creation trait.","Key size in bytes","Nonce size in bytes","Create new stream cipher instance from key and nonce …","Create new stream cipher instance from variable length …","Trait for types which can be initialized from a block …","Block cipher","Nonce size in bytes","Instantiate a stream cipher from a block cipher","Synchronous stream cipher core trait.","Apply keystream to the data.","Apply keystream to the data, but return an error if end …","Trait for seekable stream ciphers.","Try to get current keystream position","Try to seek to the given position","Get current keystream position","Seek to the given position","Asynchronous stream cipher core trait.","Encrypt data in place.","Decrypt data in place.","Trait implemented for numeric types which can be used …","Try to get position for block number <code>block</code>, byte position …","Try to get block number and bytes position for given …","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new block cipher instance from key with variable …","Encrypt several blocks in parallel using instruction …","Encrypt a slice of blocks, leveraging parallelism when …","Decrypt several blocks in parallel using instruction …","Decrypt a slice of blocks, leveraging parallelism when …","Create new stream cipher instance from variable length …","Apply keystream to the data.","Get current keystream position","Seek to the given position","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,0,0,0,0,1,1,1,0,2,2,0,3,3,3,0,4,4,4,0,5,0,6,0,0,0,7,7,7,7,0,8,8,8,0,9,9,0,10,10,10,10,0,11,11,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,17,16,17,18,17,16,17,18,16,17,16,18,17,18,16,18,17,16,16,18,16,17,18,16,17,18,18,18,16,17,16,17,18,18,18,18,17,17,17,16,16,16,16,16,18,18,17,17,18,18,18,18,18,18,16,17,16,17,18,18,16,17,18,18,17,16,18,18,18,18,18,18,18,18,18,17,16,18,17,18,16,13,14,15,13,14,15,13,13,14,15,1,3,3,4,4,7,9,10,10,16,17,18],"f":[null,null,null,null,null,null,null,null,null,[[["blockcipherkey",6]]],[[],[["invalidlength",3],["result",4]]],null,null,null,null,[[["block",6]]],[[["parblocks",6]]],[[]],null,[[["block",6]]],[[["parblocks",6]]],[[]],null,[[["block",6]]],null,[[["block",6]]],null,null,null,null,null,[[["cipherkey",6],["nonce",6]]],[[],[["invalidlength",3],["result",4]]],null,null,null,[[["genericarray",3]]],null,[[]],[[],[["looperror",3],["result",4]]],null,[[],[["seeknum",8],["result",4],["overflowerror",3]]],[[["seeknum",8]],[["looperror",3],["result",4]]],[[],["seeknum",8]],[[["seeknum",8]]],null,[[]],[[]],null,[[["seeknum",8],["u8",15]],[["overflowerror",3],["result",4]]],[[["u8",15]],[["overflowerror",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["overflowerror",3]],["looperror",3]],[[],["looperror",3]],[[],["invalidlength",3]],[[],["overflowerror",3]],[[],[["invalidlength",3],["result",4]]],[[["parblocks",6]]],[[]],[[["parblocks",6]]],[[]],[[],[["invalidlength",3],["result",4]]],[[]],[[],["seeknum",8]],[[["seeknum",8]]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"NewBlockCipher"],[8,"BlockCipher"],[8,"BlockEncrypt"],[8,"BlockDecrypt"],[8,"BlockEncryptMut"],[8,"BlockDecryptMut"],[8,"NewCipher"],[8,"FromBlockCipher"],[8,"StreamCipher"],[8,"StreamCipherSeek"],[8,"AsyncStreamCipher"],[8,"SeekNum"],[3,"LoopError"],[3,"InvalidLength"],[3,"OverflowError"],[3,"B0"],[3,"B1"],[3,"Z0"]]},\
"cosey":{"doc":"cosey","t":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,3,4,13,13,13,13,3,12,12,3,12,12,3,12,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","ByteBuf","PublicKey","P256Key","EcdhEsHkdf256Key","Ed25519Key","TotpKey","P256PublicKey","x","y","EcdhEsHkdf256PublicKey","x","y","Ed25519PublicKey","x","TotpPublicKey","X25519PublicKey","pub_key","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","default","fmt","serialize","as_mut","clone","from","into_iter","eq","hash","deref","as_ref","partial_cmp","deserialize","deref_mut","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","from","from","from","from","clone","clone","clone","clone","clone","clone","default","deserialize","deserialize","deserialize","serialize","serialize","serialize","serialize","serialize","new","new","new","new","from","into_inner","into_vec","as_slice","as_mut_slice","try_convert_into","try_from_slice","try_from","insert_slice_at","insert","remove","resize_default","resize_to_capacity","to_bytes","try_to_bytes","from_serialized"],"q":["cosey","cosey::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cosey","","","","","","","","","","","","","","","","","cosey::consts","","","","","","","","","","","","","","","","","","","","","","cosey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cosey::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cosey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cosey::consts","","","cosey","","","","","","","","","","","","","","","",""],"d":["Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integernstantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0.","Construct a new, empty <code>Bytes<N></code>.","Wrap existing bytes in a <code>Bytes<N></code>.","Unwraps the Vec<u8, N>, same as <code>into_vec</code>.","Unwraps the Vec<u8, N>, same as <code>into_inner</code>.","Returns an immutable slice view.","Returns a mutable slice view.","Low-noise conversion between lengths.","","Some APIs offer an interface of the form …","","","","","","Clone into at least same size byte buffer.","Fallible conversion into differently sized byte buffer.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,2,2,0,3,3,0,4,0,0,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,10,10,10,10,10,10,10,5,5,5,5,5,5,5,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,7,6,7,8,7,6,7,8,6,7,6,8,7,8,6,8,7,6,6,8,6,7,8,6,7,8,8,8,6,7,6,7,8,8,8,8,7,7,7,6,6,6,6,6,8,8,7,7,8,8,8,8,8,8,6,7,6,7,8,8,6,7,8,8,7,6,8,8,8,8,8,8,8,8,8,7,6,8,7,8,6,1,2,3,4,10,5,1,1,2,2,3,3,4,4,10,5,5,1,1,1,1,1,2,3,4,10,5,10,2,3,4,1,10,2,3,4,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bytes",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[]],[[],["bytes",3]],[[["vec",3],["u8",15]],["bytes",3]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[],[["result",4],["bytes",3]]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["publickey",4]],["bool",15]],[[["publickey",4]],["bool",15]],[[["p256publickey",3]],["bool",15]],[[["p256publickey",3]],["bool",15]],[[["ecdheshkdf256publickey",3]],["bool",15]],[[["ecdheshkdf256publickey",3]],["bool",15]],[[["ed25519publickey",3]],["bool",15]],[[["ed25519publickey",3]],["bool",15]],[[["totppublickey",3]],["bool",15]],[[["x25519publickey",3]],["bool",15]],[[["x25519publickey",3]],["bool",15]],[[["p256publickey",3]]],[[["ecdheshkdf256publickey",3]]],[[["ed25519publickey",3]]],[[["totppublickey",3]]],[[],["publickey",4]],[[],["p256publickey",3]],[[],["ecdheshkdf256publickey",3]],[[],["ed25519publickey",3]],[[],["totppublickey",3]],[[],["x25519publickey",3]],[[],["totppublickey",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]],[[],["bytes",3]],[[],["bytes",3]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[]],[[]],[[],[["result",4],["bytes",3]]],[[],[["result",4],["bytes",3]]],[[],[["result",4],["bytes",3]]],[[["usize",15]],["result",4]],[[["usize",15],["u8",15]],[["u8",15],["result",4]]],[[["usize",15]],[["result",4],["u8",15]]],[[["usize",15]],["result",4]],[[]],[[],["bytes",3]],[[],[["result",4],["bytes",3]]],[[],["bytes",3]]],"p":[[4,"PublicKey"],[3,"P256PublicKey"],[3,"EcdhEsHkdf256PublicKey"],[3,"Ed25519PublicKey"],[3,"X25519PublicKey"],[3,"B0"],[3,"B1"],[3,"Z0"],[3,"ByteBuf"],[3,"TotpPublicKey"]]},\
"cpufeatures":{"doc":"This crate provides macros for runtime CPU feature …","t":[14],"n":["new"],"q":["cpufeatures"],"d":["Create module with CPU feature detection code."],"i":[0],"f":[null],"p":[]},\
"crypto_mac":{"doc":"This crate provides trait for Message Authentication Code …","t":[3,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,6,8,16,10,11,8,16,10,10,10,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["InvalidKeyLength","MacError","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","Key","NewMac","KeySize","new","new_from_slice","Mac","OutputSize","update","reset","finalize","finalize_reset","verify","Output","new","into_bytes","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","fmt","fmt","fmt","fmt","eq","eq","eq","clone","clone","clone","default","default","ct_eq","new","new","new"],"q":["crypto_mac","","","crypto_mac::constscrypto_mac","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crypto_mac::consts","","","","","","","","","","","","","","","","","","","","","","crypto_mac","","","","","","","crypto_mac::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crypto_mac","","","","","","","","","","","","","crypto_mac::consts","",""],"d":["Error type for signaling invalid key length for MAC …","Error type for signaling failed MAC verification","Type aliases for many constants.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Key for an algorithm that implements [<code>NewMac</code>].","Instantiate a [<code>Mac</code>] algorithm.","Key size in bytes with which cipher guaranteed to be …","Initialize new MAC instance from key with fixed size.","Initialize new MAC instance from key with variable size.","The [<code>Mac</code>] trait defines methods for a Message …","Output size of the [[<code>Mac</code>]]","Update MAC state with the given data.","Reset [<code>Mac</code>] instance.","Obtain the result of a [<code>Mac</code>] computation as a [<code>Output</code>] …","Obtain the result of a [<code>Mac</code>] computation as a [<code>Output</code>] …","Check if tag/code value is correct for the processed …","[<code>Output</code>] is a thin wrapper around bytes array which …","Create a new MAC [<code>Output</code>].","Get the MAC tag/code value as a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,2,2,2,2,2,0,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,8,7,6,7,8,7,6,7,8,6,7,6,8,7,8,6,8,7,6,6,8,6,7,8,6,7,8,8,8,6,7,6,7,8,8,8,8,7,7,7,6,6,6,6,6,8,8,7,7,8,8,8,8,8,8,6,7,6,7,8,8,6,7,8,8,7,6,8,8,8,8,8,8,8,8,8,7,6,8,7,8,6,4,5,4,5,4,5,3,4,5,3,4,5,3,6,7,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["key",6]]],[[],[["invalidkeylength",3],["result",4]]],null,null,[[]],[[]],[[],["output",3]],[[],["output",3]],[[],[["result",4],["macerror",3]]],null,[[["genericarray",3],["u8",15]],["output",3]],[[],[["genericarray",3],["u8",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["macerror",3]],["bool",15]],[[["invalidkeylength",3]],["bool",15]],[[["output",3]],["bool",15]],[[],["macerror",3]],[[],["invalidkeylength",3]],[[],["output",3]],[[],["macerror",3]],[[],["invalidkeylength",3]],[[],["choice",3]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"NewMac"],[8,"Mac"],[3,"Output"],[3,"MacError"],[3,"InvalidKeyLength"],[3,"B0"],[3,"B1"],[3,"Z0"]]},\
"cstr_core":{"doc":"","t":[6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["c_char","CStr","FromBytesWithNulError","from_ptr","from_bytes_with_nul","from_bytes_with_nul_unchecked","as_ptr","to_bytes","to_bytes_with_nul","to_str","borrow","borrow_mut","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","eq","ne","eq","cmp","partial_cmp","hash","as_ref","clone"],"q":["cstr_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Re-export c_char","Representation of a borrowed C string.","An error returned from <code>CStr::from_bytes_with_nul</code> to …","Casts a raw C string to a safe C string wrapper.","Creates a C string wrapper from a byte slice.","Unsafely creates a C string wrapper from a byte slice.","Returns the inner pointer to this C string.","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","Yields a <code>&str</code> slice if the <code>CStr</code> contains valid UTF-8.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,2,2,2,1,1,1,1,1,2],"f":[null,null,null,[[],["cstr",3]],[[],[["cstr",3],["frombyteswithnulerror",3],["result",4]]],[[],["cstr",3]],[[]],[[]],[[]],[[],[["utf8error",3],["result",4],["str",15]]],[[]],[[]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["frombyteswithnulerror",3]],["bool",15]],[[["frombyteswithnulerror",3]],["bool",15]],[[["cstr",3]],["bool",15]],[[["cstr",3]],["ordering",4]],[[["cstr",3]],[["option",4],["ordering",4]]],[[]],[[],["cstr",3]],[[],["frombyteswithnulerror",3]]],"p":[[3,"CStr"],[3,"FromBytesWithNulError"]]},\
"cty":{"doc":"Type aliases to C types like c_int for use with bindgen","t":[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"n":["c_char","c_int","c_uint","c_long","c_ulong","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","c_schar","c_short","c_longlong","c_uchar","c_ushort","c_ulonglong","c_float","c_double","intmax_t","uintmax_t","size_t","ptrdiff_t","intptr_t","uintptr_t","ssize_t","c_void"],"q":["cty","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"delog":{"doc":"Compile-time configurable deferred logging (for <code>printf()</code>…","t":[0,8,18,3,8,18,3,12,5,0,5,5,3,5,3,4,13,13,13,13,13,4,13,13,13,13,13,13,3,8,10,10,10,10,11,3,12,12,12,12,12,8,10,10,10,10,10,8,10,8,11,5,5,5,8,10,8,10,5,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["hex","Unsigned","N","U1","Separator","SEPARATOR","HexStr","value","HexStr","render","render_arguments","render_record","DefaultRenderer","default","RipgrepRenderer","Level","Error","Warn","Info","Debug","Trace","LevelFilter","Off","Error","Warn","Info","Debug","Trace","Record","Delogger","buffer","claimed","flush","render","capacity","Statistics","attempts","successes","flushes","read","written","State","attempts","successes","flushes","read","written","TryLog","try_log","TryLogWithStatistics","statistics","dequeue","enqueue","try_enqueue","Flusher","flush","Renderer","render","logger","hex_str","hexstr","try_log","generate_macros","delog","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","eq","eq","eq","eq","fmt","fmt","fmt","from_str","from_str","fmt","fmt","clone","clone","clone","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","hash","hash","cmp","cmp","render","render","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","capacity","statistics","max","to_level_filter","as_str","max","to_level","as_str","builder","args","metadata","level","target","module_path","module_path_static","file","file_static","line"],"q":["delog","delog::hex","","","","","","","","delog","delog::render","","","","","delog","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","delog::hex","","","","","","","","","","","","","","delog","","","","","","","delog::render","","","","","","","","","","","","","","delog","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","delog::render","","delog::hex","delog","delog::hex","","","delog","delog::render","","delog","","","","","","","","","","","","","","","","",""],"d":["Convenient <code>Display</code> and other traits for binary data.","A type that specifies an unsigned integer.","The actual number.","A type that represents the integer <code>1</code>.","A type that specifies a separator str.","The actual separator str.","Zero-sized wrapper newtype, allowing grouping bytes in …","The value to be formatted.","Explicitly construct a newtype to format with.","The default, minimal renderer, and some helper functions.","For some reason, there seems to be no existing method to …","Render record, based on feature flags.","Renders just the <code>record.args()</code>.","The default, minimal renderer.","Renders the <code>record.args()</code>, prefixed by level, target, and …","An enum representing the available verbosity levels of …","The “error” level.","The “warn” level.","The “info” level.","The “debug” level.","The “trace” level.","An enum representing the available verbosity level …","A level lower than all log levels.","Corresponds to the <code>Error</code> log level.","Corresponds to the <code>Warn</code> log level.","Corresponds to the <code>Info</code> log level.","Corresponds to the <code>Debug</code> log level.","Corresponds to the <code>Trace</code> log level.","The “payload” of a log message.","Semi-abstract characterization of the deferred loggers …","the underlying buffer","How many characters were claimed so far.","Call the flusher.","Actually render the arguments (via internal static …","Capacity of circular buffer.","Statistics on logger usage.","How often was one of the logging macros called.","How often was one of the logging macros called without …","How often was the flusher called.","How many bytes were flushed so far.","How many bytes were logged so far.","Trait for either state or statistics of loggers.","How often was one of the logging macros called.","How often was one of the logging macros called without …","How often was the flusher called.","How many bytes were flushed so far.","How many bytes were logged so far.","Fallible, panic-free version of the <code>log::Log</code> trait.","Fallible logging call (fails when buffer is full)","TryLog with some usage statistics on top.","Read out statistics on logger usage.","The core “read from circular buffer” method. Marked …","The core “write to circular buffer” method. Marked …","The fallible “write to circular buffer” method. …","A way to pass on logs, user supplied.","Implementor must handle passed log <code>&str</code> in some hopefully …","A way to format logs, user supplied.","Implementor must render record into <code>buf</code>, returning the …","Returns a reference to the logger (as <code>TryLogWithStatistics</code>…","Compactly format byte arrays and slices as hexadecimals.","More compactly format byte arrays and slices as …","Fallible (ungated) version of <code>log!</code>.","Generate logging macros that can be gated by library.","Generate a deferred logger with specified capacity and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Capacity of circular buffer.","Read out statistics on logger usage.","Returns the most verbose logging level.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Returns the string representation of the <code>Level</code>.","Returns the most verbose logging level filter.","Converts <code>self</code> to the equivalent <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","Returns a new builder.","The message body.","Metadata about the log directive.","The verbosity level of the message.","The name of the target of the directive.","The module path of the message.","The module path of the message, if it is a <code>\'static</code> string.","The source file containing the message.","The module path of the message, if it is a <code>\'static</code> string.","The line containing the message."],"i":[0,0,1,0,0,2,0,3,0,0,0,0,0,0,0,0,4,4,4,4,4,0,5,5,5,5,5,5,0,0,6,6,6,6,6,0,7,7,7,7,7,0,8,8,8,8,8,0,9,0,10,0,0,0,0,11,0,12,0,0,0,0,0,0,13,13,13,13,13,13,13,3,3,3,3,3,3,3,7,7,7,7,7,7,7,14,14,14,14,14,14,14,15,15,15,15,15,15,15,4,4,4,4,4,4,4,5,5,5,5,5,5,5,16,16,16,16,16,16,16,5,4,4,5,16,4,5,4,5,4,5,5,16,4,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,5,5,4,14,15,3,7,3,3,3,7,14,15,6,10,4,4,4,5,5,5,16,16,16,16,16,16,16,16,16,16],"f":[null,null,null,null,null,null,null,null,[[],[["sized",8],["unsigned",8],["hexstr",3],["separator",8]]],null,[[["arguments",3]]],[[["record",3]]],null,[[],["defaultrenderer",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["atomicusize",3]],[[["str",15]]],[[["record",3]]],[[],["usize",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[["record",3]],["result",4]],null,[[],["statistics",3]],[[],["str",15]],[[["record",3]]],[[["record",3]],["result",4]],null,[[["str",15]]],null,[[["record",3]]],[[],["option",4]],null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["str",15]],[["level",4],["result",4]]],[[["str",15]],[["levelfilter",4],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["levelfilter",4]],[[],["record",3]],[[],["level",4]],[[["level",4]],[["option",4],["ordering",4]]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],[["option",4],["ordering",4]]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],[["option",4],["ordering",4]]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],[["option",4],["ordering",4]]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[]],[[]],[[["levelfilter",4]],["ordering",4]],[[["level",4]],["ordering",4]],[[["record",3]]],[[["record",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["statistics",3]],[[],["defaultrenderer",3]],[[],["ripgreprenderer",3]],[[],["usize",15]],[[],["statistics",3]],[[],["level",4]],[[],["levelfilter",4]],[[],["str",15]],[[],["levelfilter",4]],[[],[["option",4],["level",4]]],[[],["str",15]],[[],["recordbuilder",3]],[[],["arguments",3]],[[],["metadata",3]],[[],["level",4]],[[],["str",15]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],[["u32",15],["option",4]]]],"p":[[8,"Unsigned"],[8,"Separator"],[3,"HexStr"],[4,"Level"],[4,"LevelFilter"],[8,"Delogger"],[3,"Statistics"],[8,"State"],[8,"TryLog"],[8,"TryLogWithStatistics"],[8,"Flusher"],[8,"Renderer"],[3,"U1"],[3,"DefaultRenderer"],[3,"RipgrepRenderer"],[3,"Record"]]},\
"der":{"doc":"Pure Rust embedded-friendly implementation of the …","t":[0,8,10,5,3,3,8,10,3,3,3,3,3,3,8,16,10,3,3,3,3,8,10,11,3,8,10,10,11,3,3,4,13,13,12,13,13,13,13,13,12,12,13,13,12,12,13,12,12,13,12,13,13,12,6,3,12,12,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,18,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,24,24,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,11,11,11,11,11,18,11,11,11,11,11],"n":["message","Message","fields","encoded_len","Any","BitString","Choice","can_decode","GeneralizedTime","Ia5String","Null","OctetString","PrintableString","Sequence","SetOf","Iter","elements","SetOfRef","SetOfRefIter","UtcTime","Utf8String","Decodable","decode","from_der","Decoder","Encodable","encoded_len","encode","encode_to_slice","Encoder","Error","ErrorKind","Failed","Length","tag","Noncanonical","MalformedOid","Overflow","Overlength","TrailingData","decoded","remaining","Truncated","Underlength","expected","actual","UnexpectedTag","expected","actual","UnknownTag","byte","Utf8","Value","tag","Result","Header","tag","length","Length","Tag","Boolean","Integer","BitString","OctetString","Null","ObjectIdentifier","Utf8String","Set","PrintableString","Ia5String","UtcTime","GeneralizedTime","Sequence","ContextSpecific0","ContextSpecific1","ContextSpecific2","ContextSpecific3","Tagged","TAG","BigUInt","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","Choice","Message","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","can_decode","elements","decode","decode","decode","decode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","encoded_len","encode","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","add","add","add","add","add","add","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","next","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","new","tag","len","is_empty","is_null","as_bytes","bit_string","generalized_time","ia5_string","octet_string","printable_string","sequence","utc_time","utf8_string","new","as_bytes","len","is_empty","new","as_bytes","len","is_empty","LENGTH","length","new","unix_duration","new","as_str","as_bytes","len","is_empty","new","as_bytes","len","is_empty","new","as_str","as_bytes","len","is_empty","as_bytes","decode_nested","new","as_bytes","LENGTH","length","new","unix_duration","new","as_str","as_bytes","len","is_empty","from_der","new","decode","error","is_failed","finish","is_finished","any","int8","int16","uint8","uint16","big_uint","bit_string","generalized_time","ia5_string","null","octet_string","optional","printable_string","utc_time","utf8_string","sequence","encode_to_slice","new","encode","error","is_failed","finish","bit_string","generalized_time","ia5_string","message","null","octet_string","printable_string","sequence","utc_time","utf8_string","new","kind","position","nested","at","new","ZERO","ONE","MAX","new","zero","one","max","for_tlv","TAG","assert_eq","type_name","new","new","new"],"q":["der","der::message","","","der","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","der::ErrorKind","der","","","","","der::ErrorKind","","der","","der::ErrorKind","","der","der::ErrorKind","","der","der::ErrorKind","der","","der::ErrorKind","der","","","","","","","","","","","","","","","","","","","","","","","","","","","der::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","der","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","der::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","derder::consts","",""],"d":["The [<code>Message</code>] pattern provided by this crate simplifies …","Messages encoded as an ASN.1 <code>SEQUENCE</code>.","Call the provided function with a slice of [<code>Encodable</code>] …","Obtain the length of an ASN.1 <code>SEQUENCE</code> consisting of the …","ASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.","ASN.1 <code>BIT STRING</code> type.","ASN.1 <code>CHOICE</code> denotes a union of one or more possible …","Is the provided [<code>Tag</code>] decodable as a variant of this …","ASN.1 <code>GeneralizedTime</code> type.","ASN.1 <code>IA5String</code> type.","ASN.1 <code>NULL</code> type.","ASN.1 <code>OCTET STRING</code> type.","ASN.1 <code>PrintableString</code> type.","ASN.1 <code>SEQUENCE</code> type.","ASN.1 <code>SET OF</code> denotes a collection of zero or more …","Iterator over the elements of the set.","Iterate over the elements of the set.","ASN.1 <code>SET OF</code> backed by a byte slice containing serialized …","Iterator over the elements of an [<code>SetOfRef</code>].","ASN.1 <code>UTCTime</code> type.","ASN.1 <code>UTF8String</code> type.","Decoding trait.","Attempt to decode this message using the provided decoder.","Parse <code>Self</code> from the provided DER-encoded byte slice.","DER decoder.","Encoding trait.","Compute the length of this value in bytes when encoded as …","Encode this value as ASN.1 DER using the provided [<code>Encoder</code>…","Encode this value to the provided byte slice, returning a …","DER encoder.","Error type.","Error type.","This error indicates a previous DER parsing operation …","Incorrect length for a given field.","Tag type of the value being decoded.","Message is not canonically encoded.","Malformed OID","Integer overflow occurred (library bug!).","Message is longer than this library’s internal limits …","Undecoded trailing data at end of message.","Length of the decoded data.","Total length of the remaining data left in the buffer.","Unexpected end-of-message/nested field when decoding.","Encoded message is shorter than the expected length.","Expected length","Actual length","Unexpected tag.","Tag the decoder was expecting (if there is a single such …","Actual tag encountered in the message.","Unknown/unsupported tag.","Raw byte value of the tag.","UTF-8 errors.","Unexpected value.","Tag of the unexpected value.","Result type.","ASN.1 DER headers: tag + length component of TLV-encoded …","Tag representing the type of the encoded value","Length of the encoded value","ASN.1-encoded length.","ASN.1 tags.","<code>BOOLEAN</code> tag.","<code>INTEGER</code> tag.","<code>BIT STRING</code> tag.","<code>OCTET STRING</code> tag.","<code>NULL</code> tag.","<code>OBJECT IDENTIFIER</code> tag.","<code>UTF8String</code> tag.","<code>SET</code> and <code>SET OF</code> tag.","<code>PrintableString</code> tag.","<code>IA5String</code> tag.","<code>UTCTime</code> tag.","<code>GeneralizedTime</code> tag.","<code>SEQUENCE</code> tag.","Context-specific tag (0) unique to a particular structure.","Context-specific tag (1) unique to a particular structure.","Context-specific tag (2) unique to a particular structure.","Context-specific tag (3) unique to a particular structure.","Types with an associated ASN.1 [<code>Tag</code>].","ASN.1 tag","“Big” unsigned ASN.1 <code>INTEGER</code> type.","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Derive the <code>Choice</code> trait on an enum.","Derive the <code>Message</code> trait on a structreate a new [<code>Any</code>] from the provided [<code>Tag</code>] and slice.","Get the tag for this [<code>Any</code>] type.","Get the [<code>Length</code>] of this [<code>Any</code>] type’s value.","Is the body of this [<code>Any</code>] type empty?","Is this value an ASN.1 NULL value?","Get the raw value for this [<code>Any</code>] type as a byte slice.","Attempt to decode an ASN.1 <code>BIT STRING</code>.","Attempt to decode an ASN.1 <code>GeneralizedTime</code>.","Attempt to decode an ASN.1 <code>IA5String</code>.","Attempt to decode an ASN.1 <code>OCTET STRING</code>.","Attempt to decode an ASN.1 <code>PrintableString</code>.","Attempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating …","Attempt to decode an ASN.1 <code>UTCTime</code>.","Attempt to decode an ASN.1 <code>UTF8String</code>.","Create a new [<code>BigUInt</code>] from a byte slice.","Borrow the inner byte slice which contains the least …","Get the length of this [<code>BigUInt</code>] in bytes.","Is the inner byte slice empty?","Create a new ASN.1 <code>BIT STRING</code> from a byte slice.","Borrow the inner byte slice.","Get the length of the inner byte slice.","Is the inner byte slice empty?","Length of an RFC 5280-flavored ASN.1 DER-encoded […","Length of an RFC 5280-flavored ASN.1 DER-encoded […","Create a new [<code>GeneralizedTime</code>] given a [<code>Duration</code>] since …","Get the duration of this timestamp since <code>UNIX_EPOCH</code>.","Create a new <code>IA5String</code>.","Borrow the string as a <code>str</code>.","Borrow the string as bytes.","Get the length of the inner byte slice.","Is the inner string empty?","Create a new ASN.1 <code>OCTET STRING</code> from a byte slice.","Borrow the inner byte slice.","Get the length of the inner byte slice.","Is the inner byte slice empty?","Create a new ASN.1 <code>PrintableString</code>.","Borrow the string as a <code>str</code>.","Borrow the string as bytes.","Get the length of the inner byte slice.","Is the inner string empty?","Borrow the inner byte sequence.","Decode values nested within a sequence, creating a new […","Create a new [<code>SetOfRef</code>] from a slice.","Borrow the inner byte sequence.","Length of an RFC 5280-flavored ASN.1 DER-encoded [<code>UtcTime</code>]…","Length of an RFC 5280-flavored ASN.1 DER-encoded [<code>UtcTime</code>]…","Create a new [<code>UtcTime</code>] given a [<code>Duration</code>] since <code>UNIX_EPOCH</code>…","Get the duration of this timestamp since <code>UNIX_EPOCH</code>.","Create a new ASN.1 <code>UTF8String</code>.","Borrow the string as a <code>str</code>.","Borrow the string as bytes.","Get the length of the inner byte slice.","Is the inner string empty?","Parse <code>Self</code> from the provided DER-encoded byte slice.","Create a new decoder for the given byte slice.","Decode a value which impls the [<code>Decodable</code>] trait.","Return an error with the given [<code>ErrorKind</code>], annotating it …","Did the decoding operation fail due to an error?","Finish decoding, returning the given value if there is no …","Have we decoded all of the bytes in this [<code>Decoder</code>]?","Attempt to decode an ASN.1 <code>ANY</code> value.","Attempt to decode ASN.1 <code>INTEGER</code> as <code>i8</code>","Attempt to decode ASN.1 <code>INTEGER</code> as <code>i16</code>","Attempt to decode unsigned ASN.1 <code>INTEGER</code> as <code>u8</code>","Attempt to decode unsigned ASN.1 <code>INTEGER</code> as <code>u16</code>","Attempt to decode an ASN.1 <code>INTEGER</code> as a [<code>BigUInt</code>].","Attempt to decode an ASN.1 <code>BIT STRING</code>.","Attempt to decode an ASN.1 <code>GeneralizedTime</code>.","Attempt to decode an ASN.1 <code>IA5String</code>.","Attempt to decode an ASN.1 <code>NULL</code> value.","Attempt to decode an ASN.1 <code>OCTET STRING</code>.","Attempt to decode an ASN.1 <code>OPTIONAL</code> value.","Attempt to decode an ASN.1 <code>PrintableString</code>.","Attempt to decode an ASN.1 <code>UTCTime</code>.","Attempt to decode an ASN.1 <code>UTF8String</code>.","Attempt to decode an ASN.1 <code>SEQUENCE</code>, creating a new nested…","Encode this value to the provided byte slice, returning a …","Create a new encoder with the given byte slice as a …","Encode a value which impls the [<code>Encodable</code>] trait.","Return an error with the given [<code>ErrorKind</code>], annotating it …","Did the decoding operation fail due to an error?","Finish encoding to the buffer, returning a slice …","Encode the provided value as an ASN.1 <code>BIT STRING</code>","Encode the provided value as an ASN.1 <code>GeneralizedTime</code>","Encode the provided value as an ASN.1 <code>IA5String</code>","Encode a message with the provided [<code>Encodable</code>] fields as …","Encode an ASN.1 <code>NULL</code> value.","Encode the provided value as an ASN.1 <code>OCTET STRING</code>","Encode the provided value as an ASN.1 <code>PrintableString</code>","Encode an ASN.1 <code>SEQUENCE</code> of the given length.","Encode the provided value as an ASN.1 <code>UTCTime</code>","Encode the provided value as an ASN.1 <code>Utf8String</code>","Create a new [<code>Error</code>].","Get the [<code>ErrorKind</code>] which occurred.","Get the position inside of the message where the error …","For errors occurring inside of a nested message, extend …","Annotate an [<code>ErrorKind</code>] with context about where it …","Create a new [<code>Header</code>] from a [<code>Tag</code>] and a specified length.","Length of <code>0</code>","Length of <code>1</code>","Maximum length currently supported: <code>65535</code>.","Create a new [<code>Length</code>] for any value which fits inside of …","Return a length of <code>0</code>.","Return a length of <code>1</code>.","Get the maximum length supported by this crate","Get the length of DER Tag-Length-Value (TLV) encoded data …","ASN.1 tag","Assert that this [<code>Tag</code>] matches the provided expected tag.","Names of ASN.1 type which corresponds to a given [<code>Tag</code>].","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,3,3,0,0,0,0,0,4,4,0,0,5,5,5,0,0,0,6,6,7,6,6,6,6,6,8,8,6,6,9,9,6,10,10,6,11,6,6,12,0,0,13,13,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,6,6,6,6,6,6,6,13,13,13,13,13,13,13,32,32,32,32,32,32,32,14,14,14,14,14,14,14,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,34,33,34,35,34,33,34,35,33,34,33,35,34,35,33,35,34,33,33,35,33,34,35,33,34,35,35,35,33,34,33,34,35,35,35,35,34,34,34,33,33,33,33,33,35,35,34,34,35,35,35,35,35,35,33,34,33,34,35,35,33,34,35,35,34,33,35,35,35,35,35,35,35,35,35,34,33,35,34,35,33,16,25,16,13,32,14,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,27,27,28,28,13,13,32,32,14,14,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,6,13,32,14,20,23,28,31,6,32,14,16,16,17,17,18,18,19,19,20,20,21,22,22,23,23,24,24,25,25,27,27,28,28,31,31,6,6,13,13,32,32,14,16,18,19,20,21,22,23,24,27,28,32,14,16,17,18,19,20,21,22,23,24,27,28,32,14,32,32,32,32,32,36,16,17,18,19,20,21,22,23,24,25,27,28,32,32,14,26,17,18,16,19,20,16,16,16,22,16,23,16,16,16,27,28,16,29,31,31,31,32,32,18,20,20,22,23,23,24,25,28,28,16,17,18,19,20,21,22,23,24,25,27,28,31,6,13,32,14,32,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,20,22,22,22,22,23,23,23,23,23,24,24,25,25,27,27,27,27,28,28,28,28,28,4,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,5,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,6,13,32,32,32,32,32,32,32,32,15,14,14,33,34,35],"f":[null,null,[[],["result",6]],[[],[["result",6],["length",3]]],null,null,null,[[["tag",4]],["bool",15]],null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,[[["decoder",3]],["result",6]],[[],["result",6]],null,null,[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["tag",4]],["bool",15]],[[]],[[["decoder",3]],[["result",6],["any",3]]],[[["decoder",3]],[["result",6],["header",3]]],[[["decoder",3]],[["result",6],["length",3]]],[[["decoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[],[["result",6],["length",3]]],[[["encoder",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["any",3]],["bool",15]],[[["any",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["bitstring",3]],["bool",15]],[[["bitstring",3]],["bool",15]],[[["generalizedtime",3]],["bool",15]],[[["generalizedtime",3]],["bool",15]],[[["ia5string",3]],["bool",15]],[[["ia5string",3]],["bool",15]],[[["null",3]],["bool",15]],[[["octetstring",3]],["bool",15]],[[["octetstring",3]],["bool",15]],[[["printablestring",3]],["bool",15]],[[["printablestring",3]],["bool",15]],[[["sequence",3]],["bool",15]],[[["sequence",3]],["bool",15]],[[["setofref",3]],["bool",15]],[[["setofref",3]],["bool",15]],[[["utctime",3]],["bool",15]],[[["utctime",3]],["bool",15]],[[["utf8string",3]],["bool",15]],[[["utf8string",3]],["bool",15]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["header",3]],["bool",15]],[[["header",3]],["bool",15]],[[["length",3]],["bool",15]],[[["length",3]],["bool",15]],[[["tag",4]],["bool",15]],[[["any",3]],["ordering",4]],[[["bitstring",3]],["ordering",4]],[[["generalizedtime",3]],["ordering",4]],[[["ia5string",3]],["ordering",4]],[[["null",3]],["ordering",4]],[[["octetstring",3]],["ordering",4]],[[["printablestring",3]],["ordering",4]],[[["sequence",3]],["ordering",4]],[[["utctime",3]],["ordering",4]],[[["utf8string",3]],["ordering",4]],[[["length",3]],["ordering",4]],[[["tag",4]],["ordering",4]],[[["any",3]],[["ordering",4],["option",4]]],[[["biguint",3]],[["ordering",4],["option",4]]],[[["bitstring",3]],[["ordering",4],["option",4]]],[[["generalizedtime",3]],[["ordering",4],["option",4]]],[[["ia5string",3]],[["ordering",4],["option",4]]],[[["null",3]],[["ordering",4],["option",4]]],[[["octetstring",3]],[["ordering",4],["option",4]]],[[["printablestring",3]],[["ordering",4],["option",4]]],[[["sequence",3]],[["ordering",4],["option",4]]],[[["utctime",3]],[["ordering",4],["option",4]]],[[["utf8string",3]],[["ordering",4],["option",4]]],[[["length",3]],[["ordering",4],["option",4]]],[[["tag",4]],[["ordering",4],["option",4]]],[[],["result",6]],[[["u8",15]],["result",6]],[[["u16",15]],["result",6]],[[["u32",15]],["result",6]],[[["usize",15]],["result",6]],[[["length",3]]],[[],[["result",6],["any",3]]],[[["any",3]],[["result",6],["biguint",3]]],[[["any",3]],[["result",6],["bitstring",3]]],[[["any",3]],[["result",6],["generalizedtime",3]]],[[["any",3]],[["ia5string",3],["result",6]]],[[["any",3]],[["null",3],["result",6]]],[[["any",3]],[["result",6],["octetstring",3]]],[[["any",3]],[["result",6],["printablestring",3]]],[[["any",3]],["result",6]],[[["any",3]],["result",6]],[[["any",3]],[["result",6],["utctime",3]]],[[["any",3]],[["utf8string",3],["result",6]]],[[["u32",15]],[["result",6],["length",3]]],[[["usize",15]],[["result",6],["length",3]]],[[["u8",15]],[["tag",4],["result",6]]],[[],["option",4]],[[["biguint",3]],["biguint",3]],[[["bitstring",3]],["bitstring",3]],[[["bitstring",3]],["any",3]],[[["generalizedtime",3]],["generalizedtime",3]],[[["ia5string",3]],["ia5string",3]],[[["ia5string",3]],["any",3]],[[["null",3]],["any",3]],[[],["any",3]],[[["octetstring",3]],["octetstring",3]],[[["octetstring",3]],["any",3]],[[["printablestring",3]],["printablestring",3]],[[["printablestring",3]],["any",3]],[[["sequence",3]],["any",3]],[[["setofref",3]],["any",3]],[[["utctime",3]],["utctime",3]],[[["utf8string",3]],["utf8string",3]],[[["utf8string",3]],["any",3]],[[],["decoder",3]],[[["errorkind",4]],["error",3]],[[["infallible",4]],["error",3]],[[["utf8error",3]],["error",3]],[[["u8",15]],["length",3]],[[["u16",15]],["length",3]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["str",15]],[[]],[[],["any",3]],[[],["biguint",3]],[[],["bitstring",3]],[[],["generalizedtime",3]],[[],["ia5string",3]],[[],["null",3]],[[],["octetstring",3]],[[],["printablestring",3]],[[],["sequence",3]],[[],["setofref",3]],[[],["utctime",3]],[[],["utf8string",3]],[[],["error",3]],[[],["errorkind",4]],[[],["header",3]],[[],["length",3]],[[],["tag",4]],[[],["length",3]],[[["tag",4]],["result",6]],[[],["tag",4]],[[],["length",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[],[["result",6],["bitstring",3]]],[[],[["result",6],["generalizedtime",3]]],[[],[["ia5string",3],["result",6]]],[[],[["result",6],["octetstring",3]]],[[],[["result",6],["printablestring",3]]],[[],["result",6]],[[],[["result",6],["utctime",3]]],[[],[["utf8string",3],["result",6]]],[[],["result",6]],[[]],[[],["length",3]],[[],["bool",15]],[[],["result",6]],[[]],[[],["length",3]],[[],["bool",15]],null,[[],["length",3]],[[["duration",3]],["result",6]],[[],["duration",3]],[[],["result",6]],[[],["str",15]],[[]],[[],["length",3]],[[],["bool",15]],[[],["result",6]],[[]],[[],["length",3]],[[],["bool",15]],[[],["result",6]],[[],["str",15]],[[]],[[],["length",3]],[[],["bool",15]],[[]],[[],["result",6]],[[],["result",6]],[[]],null,[[],["length",3]],[[["duration",3]],["result",6]],[[],["duration",3]],[[],["result",6]],[[],["str",15]],[[]],[[],["length",3]],[[],["bool",15]],[[],["result",6]],[[]],[[],[["decodable",8],["result",6]]],[[["errorkind",4]],["result",6]],[[],["bool",15]],[[],["result",6]],[[],["bool",15]],[[],[["result",6],["any",3]]],[[],[["result",6],["i8",15]]],[[],[["result",6],["i16",15]]],[[],[["result",6],["u8",15]]],[[],[["result",6],["u16",15]]],[[],[["result",6],["biguint",3]]],[[],[["result",6],["bitstring",3]]],[[],[["result",6],["generalizedtime",3]]],[[],[["ia5string",3],["result",6]]],[[],[["null",3],["result",6]]],[[],[["result",6],["octetstring",3]]],[[],[["result",6],["option",4]]],[[],[["result",6],["printablestring",3]]],[[],[["result",6],["utctime",3]]],[[],[["utf8string",3],["result",6]]],[[],["result",6]],[[],["result",6]],[[]],[[],["result",6]],[[["errorkind",4]],["result",6]],[[],["bool",15]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["length",3]],["result",6]],[[],["result",6]],[[],["result",6]],[[["errorkind",4],["length",3]],["error",3]],[[],["errorkind",4]],[[],[["option",4],["length",3]]],[[["length",3]]],[[["length",3]],["error",3]],[[["tag",4]],["result",6]],null,null,null,[[["u16",15]]],[[]],[[]],[[]],[[],["result",6]],null,[[["tag",4]],[["tag",4],["result",6]]],[[],["str",15]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"Message"],[8,"Choice"],[8,"SetOf"],[8,"Decodable"],[8,"Encodable"],[4,"ErrorKind"],[13,"Length"],[13,"TrailingData"],[13,"Underlength"],[13,"UnexpectedTag"],[13,"UnknownTag"],[13,"Value"],[3,"Header"],[4,"Tag"],[8,"Tagged"],[3,"Any"],[3,"BigUInt"],[3,"BitString"],[3,"GeneralizedTime"],[3,"Ia5String"],[3,"Null"],[3,"OctetString"],[3,"PrintableString"],[3,"Sequence"],[3,"SetOfRef"],[3,"SetOfRefIter"],[3,"UtcTime"],[3,"Utf8String"],[3,"Decoder"],[3,"Encoder"],[3,"Error"],[3,"Length"],[3,"B0"],[3,"B1"],[3,"Z0"],[6,"Result"]]},\
"der_derive":{"doc":"Custom derive support for the <code>der</code> crate.","t":[24,24],"n":["Choice","Message"],"q":["der_derive",""],"d":["Derive the <code>Choice</code> trait on an enum.","Derive the <code>Message</code> trait on a struct."],"i":[0,0],"f":[null,null],"p":[]},\
"des":{"doc":"Pure Rust implementation of the DES cipher, including …","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Des","TdesEde2","TdesEde3","TdesEee2","TdesEee3","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","encrypt_block_mut","decrypt_block_mut","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","new","new","new","new","new","encrypt_block","encrypt_block","encrypt_block","encrypt_block","encrypt_block","decrypt_block","decrypt_block","decrypt_block","decrypt_block","decrypt_block"],"q":["des","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Data Encryption Standard (DES) block cipher.","Triple DES (3DES) block cipher.","Triple DES (3DES) block cipher.","Triple DES (3DES) block cipher.","Triple DES (3DES) block cipher.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],"f":[null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["des",3]],[[],["tdesede3",3]],[[],["tdeseee3",3]],[[],["tdesede2",3]],[[],["tdeseee2",3]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["genericarray",3]]]],"p":[[3,"Des"],[3,"TdesEde3"],[3,"TdesEee3"],[3,"TdesEde2"],[3,"TdesEee2"]]},\
"digest":{"doc":"This crate provides traits which describe functionality …","t":[8,16,10,10,10,10,10,10,10,10,6,3,8,16,10,10,11,11,8,16,10,8,10,10,10,10,8,10,10,10,8,16,10,10,8,16,10,8,10,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,8,10,11,8,16,8,10,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Digest","OutputSize","new","update","chain","finalize","finalize_reset","reset","output_size","digest","Output","InvalidOutputSize","FixedOutput","OutputSize","finalize_into","finalize_into_reset","finalize_fixed","finalize_fixed_reset","FixedOutputDirty","OutputSize","finalize_into_dirty","VariableOutput","new","output_size","finalize_variable","finalize_variable_reset","VariableOutputDirty","new","output_size","finalize_variable_dirty","ExtendableOutput","Reader","finalize_xof","finalize_xof_reset","ExtendableOutputDirty","Reader","finalize_xof_dirty","XofReader","read","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","Update","update","chain","BlockInput","BlockSize","Reset","reset","impl_write","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","fmt","fmt","clone","default","finalize_fixed","finalize_fixed_reset","new","new","new"],"q":["digest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","digest::constsdigest","","","","","","","","","","","","","","","digest::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","digest","","","","","","digest::consts","",""],"d":["The <code>Digest</code> trait specifies an interface common for digest …","Output size for <code>Digest</code>","Create new hasher instance","Digest data, updating the internal state.","Digest input data in a chained manner.","Retrieve result and consume hasher instance.","Retrieve result and reset hasher instance.","Reset hasher instance to its initial state.","Get output size of the hasher","Convenience function to compute hash of the <code>data</code>. It will …","Output of a [<code>Digest</code>] function","The error type for variable hasher initialization","Trait for returning digest result with the fixed size","Output size for fixed output digest","Write result into provided array and consume the hasher …","Write result into provided array and reset the hasher …","Retrieve result and consume the hasher instance.","Retrieve result and reset the hasher instance.","Trait for fixed-output digest implementations to use to …","Output size for fixed output digest","Retrieve result into provided buffer and leave hasher in …","Trait for returning digest result with the variable size","Create new hasher instance with the given output size.","Get output size of the hasher instance provided to the <code>new</code>…","Retrieve result via closure and consume hasher.","Retrieve result via closure and reset the hasher state.","Trait for variable-sized output digest implementations to …","Create new hasher instance with the given output size.","Get output size of the hasher instance provided to the <code>new</code>…","Retrieve result into provided buffer and leave hasher in …","Trait which describes extendable-output functions (XOF).","Reader","Retrieve XOF reader and consume hasher instance.","Retrieve XOF reader and reset hasher instance state.","Trait for extendable-output function (XOF) …","Reader","Retrieve XOF reader.","Trait for describing readers which are used to extract …","Read output into the <code>buffer</code>. Can be called an unlimited …","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Trait for updating digest state with input data.","Digest input data.","Digest input data in a chained manner.","Trait to indicate that digest function processes data in …","Block size","Trait for resetting hash instances","Reset hasher instance to its initial state and return …","Implements <code>std::io::Write</code> trait for implementer of [<code>Update</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieve result and consume the hasher instance.","Retrieve result and reset the hasher instance.","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,0,3,3,0,4,4,4,4,0,5,5,5,0,6,6,6,0,7,7,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,10,0,11,0,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,14,13,14,15,14,13,14,15,13,14,13,15,14,15,13,15,14,13,13,15,13,14,15,13,14,15,15,15,13,14,13,14,15,15,15,15,14,14,14,13,13,13,13,13,15,15,14,14,15,15,15,15,15,15,13,14,13,14,15,15,13,14,15,15,14,13,15,15,15,15,15,15,15,15,15,14,13,15,14,15,13,12,12,12,12,2,2,13,14,15],"f":[null,null,[[]],[[]],[[]],[[],["output",6]],[[],["output",6]],[[]],[[],["usize",15]],[[],["output",6]],null,null,null,null,[[["genericarray",3]]],[[["genericarray",3]]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],null,null,[[["genericarray",3]]],null,[[["usize",15]],[["result",4],["invalidoutputsize",3]]],[[],["usize",15]],[[]],[[]],null,[[["usize",15]],[["result",4],["invalidoutputsize",3]]],[[],["usize",15]],[[]],null,null,[[]],[[]],null,null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,[[]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["invalidoutputsize",3]],[[],["invalidoutputsize",3]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"Digest"],[8,"FixedOutput"],[8,"FixedOutputDirty"],[8,"VariableOutput"],[8,"VariableOutputDirty"],[8,"ExtendableOutput"],[8,"ExtendableOutputDirty"],[8,"XofReader"],[8,"Update"],[8,"BlockInput"],[8,"Reset"],[3,"InvalidOutputSize"],[3,"B0"],[3,"B1"],[3,"Z0"]]},\
"ecdsa":{"doc":"Elliptic Curve Digital Signature Algorithm (ECDSA) as …","t":[0,6,6,3,11,11,0,8,10,8,10,8,10,8,16,8,10,0,5,3,8,3,3,3,6,6,3,11,11,11,11,11,11,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["der","MaxOverhead","MaxSize","Signature","len","as_bytes","hazmat","SignPrimitive","try_sign_prehashed","RecoverableSignPrimitive","try_sign_recoverable_prehashed","VerifyPrimitive","verify_prehashed","DigestPrimitive","Digest","FromDigest","from_digest","rfc6979","generate_k","EncodedPoint","Curve","Error","SigningKey","VerifyingKey","SignatureSize","SignatureBytes","Signature","from_scalars","from_der","to_der","r","s","normalize_s","NormalizeLow","normalize_low","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","as_ref","fmt","clone","from","from","eq","ne","cmp","conditional_select","zeroize","partial_cmp","fmt","default","fmt","fmt","fmt","fmt","eq","eq","ne","try_from","try_from","try_from","from","from","from","from","from","from","as_ref","as_ref","clone","clone","from_bytes","from_bytes","try_sign_digest","try_sign","verify_digest","verify","try_sign_with_rng","try_sign_digest_with_rng","random","from_bytes","verifying_key","to_bytes","from_sec1_bytes","from_encoded_point","to_encoded_point","from_bytes","from_untagged_bytes","from_affine_coordinates","from_secret_key","identity","len","as_bytes","to_untagged_bytes","is_identity","is_compressed","compress","decompress","encode","decode","tag","coordinates","x","y","new"],"q":["ecdsa","ecdsa::der","","","","","ecdsa","ecdsa::hazmat","","","","","","","","","","ecdsa","ecdsa::rfc6979","ecdsa","","","","","","","","","","","","","","","","ecdsa::der","","","","","","","","ecdsa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ecdsa::der","ecdsa","","","","","ecdsa::der","ecdsa","","","","","","","","ecdsa::der","ecdsa","","","ecdsa::der","ecdsa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Support for ECDSA signatures encoded as ASN.1 DER.","Maximum overhead of an ASN.1 DER-encoded ECDSA signature …","Maximum size of an ASN.1 DER encoded signature for the …","ASN.1 DER-encoded signature.","Get the length of the signature in bytes","Borrow this signature as a byte slice","Low-level ECDSA primitives.","Try to sign the given prehashed message using ECDSA.","Try to sign the prehashed message.","[<code>SignPrimitive</code>] for signature implementations that can …","Try to sign the prehashed message.","Verify the given prehashed message using ECDSA.","Verify the prehashed message against the provided …","Bind a preferred [<code>Digest</code>] algorithm to an elliptic curve …","Preferred digest to use when computing ECDSA signatures …","Instantiate this type from the output of a digest.","Instantiate this type from a [<code>Digest</code>] instance","Support for computing deterministic ECDSA ephemeral …","Generate ephemeral scalar <code>k</code> from the secret scalar and a …","SEC1 encoded curve point.","Marker trait for elliptic curves in short Weierstrass …","Signature errors.","ECDSA signing key. Generic over elliptic curves.","ECDSA verification key (i.e. public key). Generic over …","Size of a fixed sized signature for the given elliptic …","Fixed-size byte array containing an ECDSA signature","ECDSA signature (fixed-size). Generic over elliptic curve …","Create a [<code>Signature</code>] from the serialized <code>r</code> and <code>s</code> scalar …","Parse a signature from ASN.1 DER","Serialize this signature as ASN.1 DER","Get the <code>r</code> component of this signature","Get the <code>s</code> component of this signature","Normalize signature into “low S” form as described in …","Normalize a scalar (i.e. ECDSA S) to the lower half the …","Normalize scalar to the lower half of the field (i.e. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse an ASN.1 DER-encoded ECDSA signature from a byte …","","Sign message prehash using a deterministic ephemeral …","","","","","Sign message prehash using an ephemeral scalar (<code>k</code>) …","Generate a cryptographically random [<code>SigningKey</code>].","Initialize signing key from a raw scalar serialized as a …","Get the [<code>VerifyingKey</code>] which corresponds to this […","Serialize this [<code>SigningKey</code>] as bytes","Initialize [<code>VerifyingKey</code>] from a SEC1-encoded public key.","Initialize [<code>VerifyingKey</code>] from an [<code>EncodedPoint</code>].","Serialize this [<code>VerifyingKey</code>] as a SEC1 [<code>EncodedPoint</code>], …","Decode elliptic curve point (compressed or uncompressed) …","Decode elliptic curve point from raw uncompressed …","Encode an elliptic curve point from big endian serialized …","Compute [<code>EncodedPoint</code>] representing the public key for …","Return [<code>EncodedPoint</code>] representing the additive identity …","Get the length of the encoded point in bytes","Get byte slice containing the serialized [<code>EncodedPoint</code>].","Serialize point as raw uncompressed coordinates without …","Is this [<code>EncodedPoint</code>] the additive identity? (a.k.a. …","Is this [<code>EncodedPoint</code>] compressed?","Compress this [<code>EncodedPoint</code>], returning a new […","Decompress this [<code>EncodedPoint</code>], returning a new […","Encode an [<code>EncodedPoint</code>] from the desired type","Decode this [<code>EncodedPoint</code>] into the desired type","Get the SEC1 tag for this [<code>EncodedPoint</code>]","Get the [<code>Coordinates</code>] for this [<code>EncodedPoint</code>].","Get the x-coordinate for this [<code>EncodedPoint</code>].","Get the y-coordinate for this [<code>EncodedPoint</code>].","Create a new error with no associated source"],"i":[0,0,0,0,1,1,0,0,2,0,3,0,4,0,5,0,6,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,0,8,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,7,7,7,7,7,7,7,7,11,11,11,11,11,11,11,11,11,11,11,12,12,12,1,10,7,10,7,7,1,7,7,9,9,10,11,10,10,1,7,10,7,1,7,9,9,10,10,9,9,9,9,9,9,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"f":[null,null,null,null,[[],["usize",15]],[[]],null,null,[[["scalar",6]],[["error",3],["result",4],["signature",3]]],null,[[["scalar",6]],[["error",3],["result",4]]],null,[[["scalar",6],["signature",3]],[["result",4],["error",3]]],null,null,null,[[]],null,[[["nonzeroscalar",3]],[["nonzeroscalar",3],["zeroizing",3]]],null,null,null,null,null,null,null,null,[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["signature",3]],[[],["nonzeroscalar",3]],[[],["nonzeroscalar",3]],[[],[["bool",15],["error",3],["result",4]]],null,[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[],["encodedpoint",3]],[[["publickey",3]],["encodedpoint",3]],[[["publickey",3]],["encodedpoint",3]],[[["encodedpoint",3]],["bool",15]],[[["encodedpoint",3]],["bool",15]],[[["encodedpoint",3]],["ordering",4]],[[["choice",3],["encodedpoint",3]],["encodedpoint",3]],[[]],[[["encodedpoint",3]],[["option",4],["ordering",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["error",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["signature",3]],[["error",3],["result",4],["signature",3]]],[[["secretkey",3]]],[[["nonzeroscalar",3]]],[[["signingkey",3]],["verifyingkey",3]],[[["verifyingkey",3]],["encodedpoint",3]],[[["publickey",3]],["verifyingkey",3]],[[["publickey",3]],["verifyingkey",3]],[[]],[[]],[[],["verifyingkey",3]],[[],["signature",3]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4],["signature",3]]],[[],[["error",3],["signature",3],["result",4]]],[[["signature",3]],[["result",4],["error",3]]],[[["signature",3]],[["result",4],["error",3]]],[[],[["error",3],["result",4],["signature",3]]],[[],[["error",3],["result",4],["signature",3]]],[[]],[[],[["result",4],["error",3]]],[[],["verifyingkey",3]],[[],["fieldbytes",6]],[[],[["result",4],["error",3]]],[[["encodedpoint",3]],[["result",4],["error",3]]],[[["bool",15]],["encodedpoint",3]],[[],[["result",4],["error",3],["encodedpoint",3]]],[[["genericarray",3]],["encodedpoint",3]],[[["bool",15],["genericarray",3]],["encodedpoint",3]],[[["bool",15],["secretkey",3]],["encodedpoint",3]],[[],["encodedpoint",3]],[[],["usize",15]],[[]],[[],[["genericarray",3],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["encodedpoint",3]],[[],[["option",4],["encodedpoint",3]]],[[["bool",15]],["encodedpoint",3]],[[],[["error",3],["result",4]]],[[],["tag",4]],[[],["coordinates",4]],[[],[["genericarray",3],["option",4]]],[[],[["genericarray",3],["option",4]]],[[],["error",3]]],"p":[[3,"Signature"],[8,"SignPrimitive"],[8,"RecoverableSignPrimitive"],[8,"VerifyPrimitive"],[8,"DigestPrimitive"],[8,"FromDigest"],[3,"Signature"],[8,"NormalizeLow"],[3,"SigningKey"],[3,"VerifyingKey"],[3,"EncodedPoint"],[3,"Error"]]},\
"elliptic_curve":{"doc":"General purpose Elliptic Curve Cryptography (ECC) …","t":[0,8,16,10,8,10,8,16,10,8,16,10,8,16,10,8,10,8,16,10,0,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,12,12,13,12,12,11,4,13,13,13,13,11,11,11,11,8,10,8,10,8,11,0,5,5,5,5,5,5,0,8,8,18,8,10,0,5,3,11,11,11,3,11,3,6,8,16,18,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,6,8,16,6,3,3,6,6,8,10,10,10,10,10,11,10,10,10,11,8,16,10,10,10,10,10,3,8,16,10,3,8,16,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ops","Add","Output","add","AddAssign","add_assign","Mul","Output","mul","Neg","Output","neg","Sub","Output","sub","SubAssign","sub_assign","Invert","Output","invert","sec1","CompressedPointSize","UncompressedPointSize","UntaggedPointSize","EncodedPoint","from_bytes","from_untagged_bytes","from_affine_coordinates","from_secret_key","identity","len","as_bytes","to_untagged_bytes","is_identity","is_compressed","compress","decompress","encode","decode","tag","coordinates","x","y","Coordinates","Identity","Compressed","x","y_is_odd","Uncompressed","x","y","tag","Tag","Identity","CompressedEvenY","CompressedOddY","Uncompressed","from_u8","is_identity","is_compressed","message_len","FromEncodedPoint","from_encoded_point","ToEncodedPoint","to_encoded_point","ValidatePublicKey","validate_public_key","util","adc32","adc64","sbb32","sbb64","mac32","mac64","weierstrass","Curve","PointCompression","COMPRESS_POINTS","DecompressPoint","decompress","ecdh","diffie_hellman","EphemeralSecret","random","public_key","diffie_hellman","SharedSecret","as_bytes","Error","Result","Order","Limbs","ORDER","ScalarBytes","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","AffinePoint","ProjectiveArithmetic","ProjectivePoint","ProjectivePoint","PublicKey","NonZeroScalar","Scalar","ScalarBits","Field","random","zero","one","is_zero","square","cube","double","invert","sqrt","pow_vartime","Group","Scalar","random","identity","generator","is_identity","double","SecretBytes","SecretValue","Secret","from_secret_bytes","SecretKey","Curve","FieldSize","FieldBytes","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","invert","from_encoded_point","to_encoded_point","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","eq","eq","eq","cmp","partial_cmp","drop","drop","drop","try_from","try_from","try_from","try_from","try_from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","ct_eq","conditional_select","conditional_select","conditional_select","zeroize","zeroize","zeroize","zeroize","zeroize","ORDER","new","from_scalar","to_scalar","into_scalar","as_bytes","into_bytes","zero","is_zero","random","from_repr","new","from_affine","from_secret_scalar","from_sec1_bytes","as_affine","to_projective","random","new","from_bytes","to_bytes","secret_scalar","public_key","new","new","new"],"q":["elliptic_curve","elliptic_curve::ops","","","","","","","","","","","","","","","","","","","elliptic_curve","elliptic_curve::sec1","","","","","","","","","","","","","","","","","","","","","","","","","elliptic_curve::sec1::Coordinates","","elliptic_curve::sec1","elliptic_curve::sec1::Coordinates","","elliptic_curve::sec1","","","","","","","","","","","","","","","","elliptic_curve","elliptic_curve::util","","","","","","elliptic_curve","elliptic_curve::weierstrass","","","","","elliptic_curve","elliptic_curve::ecdh","","","","","","","elliptic_curve","","","","","","","elliptic_curve::constselliptic_curve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","elliptic_curve::sec1","","","","","","","","","","","","","","","","","","","","","","elliptic_curve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","elliptic_curve::ecdh","","","","","","","","","","","","","","elliptic_curve","","","","","","","","","","","","","","","elliptic_curve::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","elliptic_curve","","","","","elliptic_curve::sec1","","","elliptic_curve","","","","","elliptic_curve::sec1","","","","","elliptic_curve","","","elliptic_curve::sec1","","elliptic_curve::ecdh","","elliptic_curve","","","","","","","","elliptic_curve::sec1","","elliptic_curve","elliptic_curve::ecdh","elliptic_curve","","elliptic_curve::sec1","elliptic_curve","","","","","elliptic_curve::sec1","","","elliptic_curve","","","","","","","","elliptic_curve::sec1","elliptic_curve","","elliptic_curve::sec1","elliptic_curve","elliptic_curve::ecdh","","elliptic_curve","","","","","","","","","","","","","","","","","","","","","","","","elliptic_curve::consts","",""],"d":["Traits for arithmetic operations on elliptic curve field …","The addition operator <code>+</code>.","The resulting type after applying the <code>+</code> operator.","Performs the <code>+</code> operation.","The addition assignment operator <code>+=</code>.","Performs the <code>+=</code> operation.","The multiplication operator <code>*</code>.","The resulting type after applying the <code>*</code> operator.","Performs the <code>*</code> operation.","The unary negation operator <code>-</code>.","The resulting type after applying the <code>-</code> operator.","Performs the unary <code>-</code> operation.","The subtraction operator <code>-</code>.","The resulting type after applying the <code>-</code> operator.","Performs the <code>-</code> operation.","The subtraction assignment operator <code>-=</code>.","Performs the <code>-=</code> operation.","Perform an inversion on a field element (i.e. base field …","Field element type","Invert a field element.","SEC1 encoding support.","Size of a compressed point for the given elliptic curve …","Size of an uncompressed point for the given elliptic …","Size of an untagged point for given elliptic curve.","SEC1 encoded curve point.","Decode elliptic curve point (compressed or uncompressed) …","Decode elliptic curve point from raw uncompressed …","Encode an elliptic curve point from big endian serialized …","Compute [<code>EncodedPoint</code>] representing the public key for …","Return [<code>EncodedPoint</code>] representing the additive identity …","Get the length of the encoded point in bytes","Get byte slice containing the serialized [<code>EncodedPoint</code>].","Serialize point as raw uncompressed coordinates without …","Is this [<code>EncodedPoint</code>] the additive identity? (a.k.a. …","Is this [<code>EncodedPoint</code>] compressed?","Compress this [<code>EncodedPoint</code>], returning a new […","Decompress this [<code>EncodedPoint</code>], returning a new […","Encode an [<code>EncodedPoint</code>] from the desired type","Decode this [<code>EncodedPoint</code>] into the desired type","Get the SEC1 tag for this [<code>EncodedPoint</code>]","Get the [<code>Coordinates</code>] for this [<code>EncodedPoint</code>].","Get the x-coordinate for this [<code>EncodedPoint</code>].","Get the y-coordinate for this [<code>EncodedPoint</code>].","Enum representing the coordinates of either compressed or …","Identity point (a.k.a. point at infinity)","Compressed curve point","x-coordinate","Is the y-coordinate odd?","Uncompressed curve point","x-coordinate","y-coordinate","Get the tag value needed to encode this set of […","Tag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …","Identity point (<code>0x00</code>)","Compressed point with even y-coordinate (<code>0x02</code>)","Compressed point with odd y-coordinate (<code>0x03</code>)","Uncompressed point (<code>0x04</code>)","Parse a tag value from a byte","Is this point the identity point?","Is this point compressed?","Compute the expected total message length for a message …","Trait for deserializing a value from a SEC1 encoded curve …","Deserialize the type this trait is impl’d on from an […","Trait for serializing a value to a SEC1 encoded curve …","Serialize this value as a SEC1 [<code>EncodedPoint</code>], optionally …","Validate that the given [<code>EncodedPoint</code>] represents the …","Validate that the given [<code>EncodedPoint</code>] is a valid public …","Arithmetic helper functions designed for efficient LLVM …","Computes <code>a + b + carry</code>, returning the result along with …","Computes <code>a + b + carry</code>, returning the result along with …","Computes <code>a - (b + borrow)</code>, returning the result along …","Computes <code>a - (b + borrow)</code>, returning the result along …","Computes <code>a + (b * c) + carry</code>, returning the result along …","Computes <code>a + (b * c) + carry</code>, returning the result along …","Elliptic curves in short Weierstrass form.","Marker trait for elliptic curves in short Weierstrass …","Point compression settings.","Should point compression be applied by default?","Attempt to decompress an elliptic curve point from its …","Attempt to decompress an elliptic curve point.","Elliptic Curve Diffie-Hellman Support.","Low-level Elliptic Curve Diffie-Hellman (ECDH) function.","Ephemeral Diffie-Hellman Secret.","Generate a cryptographically random [<code>EphemeralSecret</code>].","Get the public key associated with this ephemeral secret.","Compute a Diffie-Hellman shared secret from an ephemeral …","Shared secret value computed via ECDH key agreement.","Shared secret value, serialized as bytes.","Elliptic curve errors.","Result type.","Order of an elliptic curve group.","Type representing the “limbs” of the curves group’s …","Order constant.","Scalar bytes: wrapper for [<code>FieldBytes</code>] which guarantees …","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Affine point type for a given curve with a […","Elliptic curve with projective arithmetic implementation.","Elliptic curve point in projective coordinates.","Projective point type for a given curve with a […","Elliptic curve public keys.","Non-zero scalar type.","Scalar field element for a particular elliptic curve.","Bit representation of a scalar field element of a given …","This trait represents an element of a field.","Returns an element chosen uniformly at random using a …","Returns the zero element of the field, the additive …","Returns the one element of the field, the multiplicative …","Returns true iff this element is zero.","Squares this element.","Cubes this element.","Doubles this element.","Computes the multiplicative inverse of this element, …","Returns the square root of the field element, if it is …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","This trait represents an element of a cryptographic group.","Scalars modulo the order of this group’s scalar field.","Returns an element chosen uniformly at random from the …","Returns the additive identity, also known as the “…","Returns a fixed generator of the prime-order subgroup.","Determines if this point is the identity.","Doubles this element.","Newtype wrapper for [<code>FieldBytes</code>] which impls [<code>Zeroize</code>].","Inner value stored by a [<code>SecretKey</code>].","Inner secret value.","Parse the secret value from bytes","Elliptic curve secret keys.","Elliptic curve.","Size of this curve’s field in <em>bytes</em>, i.e. the number of …","Byte representation of a base/scalar field element of a …erform a scalar inversion","Initialize [<code>PublicKey</code>] from an [<code>EncodedPoint</code>]","Serialize this [<code>PublicKey</code>] as a SEC1 [<code>EncodedPoint</code>], …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NOTE: this impl is intended to be used by curve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Order constant.","Create new [<code>ScalarBytes</code>], checking that the given input …","Convert from a [<code>Scalar</code>] type for this curve.","Convert to a [<code>Scalar</code>] type for this curve.","Convert into a [<code>Scalar</code>] type for this curve.","Borrow the inner [<code>FieldBytes</code>]","Convert into [<code>FieldBytes</code>]","Create [<code>ScalarBytes</code>] representing a value of zero.","Is this [<code>ScalarBytes</code>] value all zeroes?","Generate a random <code>NonZeroScalar</code>","Decode a [`NonZeroScalar] from a serialized field element","Create a [<code>NonZeroScalar</code>] from a scalar.","Convert an [<code>AffinePoint</code>] into a [<code>PublicKey</code>]","Compute a [<code>PublicKey</code>] from a secret [<code>NonZeroScalar</code>] value …","Decode [<code>PublicKey</code>] (compressed or uncompressed) from the …","Borrow the inner [<code>AffinePoint</code>] from this [<code>PublicKey</code>].","Convert this [<code>PublicKey</code>] to a [<code>ProjectivePoint</code>] for the …","Generate a random [<code>SecretKey</code>]","Create a new secret key from a serialized scalar value","Deserialize raw private scalar as a big endian integer","Expose the byte serialization of the value this [<code>SecretKey</code>…","Borrow the inner secret [<code>Scalar</code>] value.","Get the [<code>PublicKey</code>] which corresponds to this secret key","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,1,1,0,2,0,3,3,0,4,4,0,5,5,0,6,0,7,7,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,10,10,9,11,11,9,0,12,12,12,12,12,12,12,12,0,13,0,14,0,15,0,0,0,0,0,0,0,0,0,0,16,0,17,0,0,0,18,18,18,0,19,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,0,0,24,24,0,0,25,0,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,12,12,12,12,12,12,12,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,18,18,18,18,18,18,18,19,19,19,19,19,19,19,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,33,32,33,34,33,32,33,34,32,33,32,34,33,34,32,34,33,32,32,34,32,33,34,32,33,34,34,34,32,33,32,33,34,34,34,34,33,33,33,32,32,32,32,32,34,34,33,33,34,34,34,34,34,34,32,33,32,33,34,34,32,33,34,34,33,32,34,34,34,34,34,34,34,34,34,33,32,34,33,34,32,28,29,29,28,31,8,9,12,26,27,29,30,26,8,8,9,9,12,26,27,29,8,8,18,19,30,27,28,29,29,30,35,35,8,8,29,19,31,35,8,27,27,28,29,31,8,9,12,26,27,28,29,30,31,27,27,8,27,28,8,28,18,19,31,20,27,27,27,27,27,27,27,27,28,28,28,29,29,29,29,29,30,30,30,30,30,30,32,33,34],"f":[null,null,null,[[]],null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,[[]],null,null,[[],["ctoption",3]],null,null,null,null,null,[[],["result",6]],[[["genericarray",3]]],[[["fieldbytes",6],["bool",15]]],[[["bool",15],["secretkey",3]]],[[]],[[],["usize",15]],[[]],[[],[["option",4],["genericarray",3]]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["option",4]],[[["bool",15]]],[[],["result",6]],[[],["tag",4]],[[],["coordinates",4]],[[],[["option",4],["fieldbytes",6]]],[[],[["option",4],["fieldbytes",6]]],null,null,null,null,null,null,null,null,[[],["tag",4]],null,null,null,null,null,[[["u8",15]],["result",6]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["usize",15]],null,[[["encodedpoint",3]],["option",4]],null,[[["bool",15]],["encodedpoint",3]],null,[[["encodedpoint",3],["secretkey",3]],["result",6]],null,[[["u32",15]]],[[["u64",15]]],[[["u32",15]]],[[["u64",15]]],[[["u32",15]]],[[["u64",15]]],null,null,null,null,null,[[["fieldbytes",6],["choice",3]],["ctoption",3]],null,[[],["sharedsecret",3]],null,[[]],[[],["publickey",3]],[[["publickey",3]],["sharedsecret",3]],null,[[],["fieldbytes",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["ctoption",3]],[[],["ctoption",3]],[[]],null,null,[[]],[[]],[[]],[[],["choice",3]],[[]],null,null,null,[[["fieldbytes",6]],["option",4]],null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[],["ctoption",3]],[[["encodedpoint",3]],["option",4]],[[["bool",15]],["encodedpoint",3]],[[],["scalar",6]],[[],["fieldbytes",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["encodedpoint",3]],["bool",15]],[[["encodedpoint",3]],["bool",15]],[[["coordinates",4]],["bool",15]],[[["coordinates",4]],["bool",15]],[[["tag",4]],["bool",15]],[[["error",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["encodedpoint",3]],["ordering",4]],[[["encodedpoint",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[["encodedpoint",3]],["result",6]],[[["encodedpoint",3]],["result",6]],[[],["result",6]],[[["scalarbytes",3]],["fieldbytes",6]],[[["nonzeroscalar",3]],["fieldbytes",6]],[[["publickey",3]],["encodedpoint",3]],[[["publickey",3]],["encodedpoint",3]],[[["ephemeralsecret",3]]],[[["fieldbytes",6]]],[[["fieldbytes",6]],["secretbytes",3]],[[["secretbytes",3]],["fieldbytes",6]],[[]],[[],["fieldbytes",6]],[[]],[[],["scalar",6]],[[],["affinepoint",6]],[[]],[[],["encodedpoint",3]],[[],["coordinates",4]],[[],["tag",4]],[[],["error",3]],[[],["scalarbytes",3]],[[],["nonzeroscalar",3]],[[],["publickey",3]],[[],["secretkey",3]],[[],["secretbytes",3]],[[]],[[],["choice",3]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[]],[[]],[[]],[[]],[[]],null,[[["fieldbytes",6]],["ctoption",3]],[[["scalar",6]]],[[],["scalar",6]],[[],["scalar",6]],[[],["fieldbytes",6]],[[],["fieldbytes",6]],[[]],[[],["choice",3]],[[]],[[["fieldbytes",6]],["option",4]],[[["scalar",6]],["option",4]],[[["affinepoint",6]],["result",6]],[[["nonzeroscalar",3]]],[[],["result",6]],[[],["affinepoint",6]],[[],["projectivepoint",6]],[[]],[[]],[[],["result",6]],[[],["fieldbytes",6]],[[],["nonzeroscalar",3]],[[],["publickey",3]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"Add"],[8,"AddAssign"],[8,"Mul"],[8,"Neg"],[8,"Sub"],[8,"SubAssign"],[8,"Invert"],[3,"EncodedPoint"],[4,"Coordinates"],[13,"Compressed"],[13,"Uncompressed"],[4,"Tag"],[8,"FromEncodedPoint"],[8,"ToEncodedPoint"],[8,"ValidatePublicKey"],[8,"PointCompression"],[8,"DecompressPoint"],[3,"EphemeralSecret"],[3,"SharedSecret"],[8,"Order"],[8,"ProjectiveArithmetic"],[8,"Field"],[8,"Group"],[8,"SecretValue"],[8,"Curve"],[3,"Error"],[3,"ScalarBytes"],[3,"NonZeroScalar"],[3,"PublicKey"],[3,"SecretKey"],[3,"SecretBytes"],[3,"B0"],[3,"B1"],[3,"Z0"],[6,"FieldBytes"]],"a":{"*":[6],"+":[1,4],"+=":[4],"-":[9,12,15],"-=":[15]}},\
"embedded_hal":{"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","t":[0,8,16,10,8,16,10,0,0,8,10,8,10,0,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,0,8,16,10,0,0,8,8,16,10,10,0,0,8,0,8,0,8,8,16,10,8,16,10,8,16,10,0,0,0,8,8,10,10,8,10,10,8,10,8,10,10,0,0,8,8,16,10,10,8,10,10,8,16,10,8,16,10,10,0,3,11,3,11,0,0,0,0,8,16,10,8,16,10,10,0,8,16,10,10,4,13,13,4,13,13,3,12,12,17,17,17,17,0,8,16,10,10,8,8,16,10,0,8,10,8,16,10,8,10,8,16,16,16,16,10,10,10,10,10,8,16,16,16,10,10,10,10,10,10,10,8,16,10,10,10,10,10,8,16,10,10,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["adc","Channel","ID","channel","OneShot","Error","read","blocking","delay","DelayMs","delay_ms","DelayUs","delay_us","i2c","Read","Error","read","Write","Error","write","WriteIter","Error","write","WriteRead","Error","write_read","WriteIterRead","Error","write_iter_read","rng","Read","Error","read","serial","write","Default","Write","Error","bwrite_all","bflush","spi","transfer","Default","write","Default","write_iter","Default","Transfer","Error","transfer","Write","Error","write","WriteIter","Error","write_iter","digital","v1","toggleable","Default","OutputPin","set_low","set_high","StatefulOutputPin","is_set_high","is_set_low","ToggleableOutputPin","toggle","InputPin","is_high","is_low","v2","toggleable","Default","OutputPin","Error","set_low","set_high","StatefulOutputPin","is_set_high","is_set_low","ToggleableOutputPin","Error","toggle","InputPin","Error","is_high","is_low","v1_compat","OldOutputPin","new","OldInputPin","new","v2_compat","fmt","prelude","serial","Read","Error","read","Write","Error","write","flush","spi","FullDuplex","Error","read","send","Polarity","IdleLow","IdleHigh","Phase","CaptureOnFirstTransition","CaptureOnSecondTransition","Mode","polarity","phase","MODE_0","MODE_1","MODE_2","MODE_3","timer","CountDown","Time","start","wait","Periodic","Cancel","Error","cancel","watchdog","Watchdog","feed","WatchdogEnable","Time","start","WatchdogDisable","disable","Capture","Error","Channel","Time","Capture","capture","disable","enable","get_resolution","set_resolution","Pwm","Channel","Time","Duty","disable","enable","get_period","get_duty","get_max_duty","set_duty","set_period","PwmPin","Duty","disable","enable","get_duty","get_max_duty","set_duty","Qei","Count","count","direction","Direction","Downcounting","Upcounting","set_low","set_high","is_set_low","is_set_high","borrow","borrow_mut","try_from","from","into","try_into","type_id","is_low","is_high","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","set_low","set_high","is_set_low","is_set_high","is_low","is_high","fmt","eq","eq","eq","ne","eq","write_str","from","from","clone","clone","clone","clone"],"q":["embedded_hal","embedded_hal::adc","","","","","","embedded_hal","embedded_hal::blocking","embedded_hal::blocking::delay","","","","embedded_hal::blocking","embedded_hal::blocking::i2c","","","","","","","","","","","","","","","embedded_hal::blocking","embedded_hal::blocking::rng","","","embedded_hal::blocking","embedded_hal::blocking::serial","embedded_hal::blocking::serial::write","embedded_hal::blocking::serial","","","","embedded_hal::blocking","embedded_hal::blocking::spi","embedded_hal::blocking::spi::transfer","embedded_hal::blocking::spi","embedded_hal::blocking::spi::write","embedded_hal::blocking::spi","embedded_hal::blocking::spi::write_iter","embedded_hal::blocking::spi","","","","","","","","","embedded_hal","embedded_hal::digital","embedded_hal::digital::v1","embedded_hal::digital::v1::toggleable","embedded_hal::digital::v1","","","","","","","","","","","embedded_hal::digital","embedded_hal::digital::v2","embedded_hal::digital::v2::toggleable","embedded_hal::digital::v2","","","","","","","","","","","","","","embedded_hal::digital","embedded_hal::digital::v1_compat","","","","embedded_hal::digital","embedded_hal","","","embedded_hal::serial","","","","","","","embedded_hal","embedded_hal::spi","","","","","","","","","","","","","","","","","embedded_hal","embedded_hal::timer","","","","","","","","embedded_hal","embedded_hal::watchdog","","","","","","","embedded_hal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_hal::digital::v1_compat","","","","","","","","","","","","","","","","","","","","embedded_hal::spi","","","","","","","","","","","","","","","","","","","","","embedded_hal","","","","","","","embedded_hal::digital::v1_compat","","","","","","embedded_hal","embedded_hal::spi","","","","embedded_hal","embedded_hal::serial","embedded_hal::digital::v1_compat","","embedded_hal::spi","","","embedded_hal"],"d":["Analog-digital conversion traits","A marker trait to identify MCU pins that can be used as …","Channel ID type","Get the specific ID that identifies this channel, for …","ADCs that sample on single channels per request, and do …","Error type returned by ADC methods","Request that the ADC begin a conversion on the specified …","Blocking API","Delays","Millisecond delay","Pauses execution for <code>ms</code> milliseconds","Microsecond delay","Pauses execution for <code>us</code> microseconds","Blocking I2C API","Blocking read","Error type","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","Blocking write","Error type","Sends bytes to slave with address <code>addr</code>","Blocking write (iterator version)","Error type","Sends bytes to slave with address <code>addr</code>","Blocking write + read","Error type","Sends bytes to slave with address <code>addr</code> and then reads …","Blocking write (iterator version) + read","Error type","Sends bytes to slave with address <code>addr</code> and then reads …","Blocking hardware random number generator","Blocking read","Error type","Reads enough bytes from hardware random number generator …","Blocking serial API","Blocking serial write","Marker trait to opt into default blocking write …","Write half of a serial interface (blocking variant)","The type of error that can occur when writing","Writes a slice, blocking until everything has been written","Block until the serial interface has sent all buffered …","Blocking SPI API","Blocking transfer","Default implementation of <code>blocking::spi::Transfer<W></code> for …","Blocking write","Default implementation of <code>blocking::spi::Write<W></code> for …","Blocking write (iterator version)","Default implementation of <code>blocking::spi::WriteIter<W></code> for …","Blocking transfer","Error type","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","Blocking write","Error type","Sends <code>words</code> to the slave, ignoring all the incoming words","Blocking write (iterator version)","Error type","Sends <code>words</code> to the slave, ignoring all the incoming words","Digital I/O","Digital I/O","If you can read <strong>and</strong> write the output state, a pin is …","Software-driven <code>toggle()</code> implementation.","Single digital push-pull output pin","Drives the pin low","Drives the pin high","Push-pull output pin that can read its output state","Is the pin in drive high mode?","Is the pin in drive low mode?","Output pin that can be toggled","Toggle pin output.","Single digital input pin","Is the input pin high?","Is the input pin low?","Digital I/O","If you can read <strong>and</strong> write the output state, a pin is …","Software-driven <code>toggle()</code> implementation.","Single digital push-pull output pin","Error type","Drives the pin low","Drives the pin high","Push-pull output pin that can read its output state","Is the pin in drive high mode?","Is the pin in drive low mode?","Output pin that can be toggled","Error type","Toggle pin output.","Single digital input pin","Error type","Is the input pin high?","Is the input pin low?","v1 compatibility wrappers","Wrapper to allow fallible <code>v2::OutputPin</code> traits to be …","Create a new OldOutputPin wrapper around a <code>v2::OutputPin</code>","Wrapper to allow fallible <code>v2::InputPin</code> traits to be …","Create an <code>OldInputPin</code> wrapper around a <code>v2::InputPin</code>.","v2 compatibility shims","Implementation of <code>core::fmt::Write</code> for the HAL’s …","The prelude is a collection of all the traits in this …","Serial interface","Read half of a serial interface","Read error","Reads a single word from the serial interface","Write half of a serial interface","Write error","Writes a single word to the serial interface","Ensures that none of the previously written words are …","Serial Peripheral Interface","Full duplex (master mode)","An enumeration of SPI errors","Reads the word stored in the shift register","Sends a word to the slave","Clock polarity","Clock signal low when idle","Clock signal high when idle","Clock phase","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","SPI mode","Clock polarity","Clock phase","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","Timers","A count down timer","The unit of time used by this timer","Starts a new count down","Non-blockingly “waits” until the count down finishes","Marker trait that indicates that a timer is periodic","Trait for cancelable countdowns.","Error returned when a countdown can’t be canceled.","Tries to cancel this countdown.","Traits for interactions with a processors watchdog timer.","Feeds an existing watchdog to ensure the processor isn’…","Triggers the watchdog. This must be done once the …","Enables A watchdog timer to reset the processor if …","Unit of time used by the watchdog","Starts the watchdog with a given period, typically once …","Disables a running watchdog timer so the processor won’…","Disables the watchdog","Input capture","Enumeration of <code>Capture</code> errors","Enumeration of channels that can be used with this <code>Capture</code>…","A time unit that can be converted into a human time unit …","The type of the value returned by <code>capture</code>","“Waits” for a transition in the capture <code>channel</code> and …","Disables a capture <code>channel</code>","Enables a capture <code>channel</code>","Returns the current resolution","Sets the resolution of the capture timer","Pulse Width Modulation","Enumeration of channels that can be used with this <code>Pwm</code> …","A time unit that can be converted into a human time unit …","Type for the <code>duty</code> methods","Disables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","Returns the current PWM period","Returns the current duty cycle","Returns the maximum duty cycle value","Sets a new duty cycle","Sets a new PWM period","A single PWM channel / pin","Type for the <code>duty</code> methods","Disables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","Returns the current duty cycle","Returns the maximum duty cycle value","Sets a new duty cycle","Quadrature encoder interface","The type of the value returned by <code>count</code>","Returns the current pulse count of the encoder","Returns the count direction","Count direction","3, 2, 1","1, 2, 3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,2,2,0,0,0,3,0,4,0,0,5,5,0,6,6,0,7,7,0,8,8,0,9,9,0,0,10,10,0,0,0,0,11,11,11,0,0,0,0,0,0,0,0,12,12,0,13,13,0,14,14,0,0,0,0,0,15,15,0,16,16,0,17,0,18,18,0,0,0,0,19,19,19,0,20,20,0,21,21,0,22,22,22,0,0,23,0,24,0,0,0,0,0,25,25,0,26,26,26,0,0,27,27,27,0,28,28,0,29,29,0,30,30,0,0,0,0,0,0,31,31,31,0,0,32,32,0,0,33,0,34,34,0,35,0,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,0,39,39,39,0,40,40,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,40,40,40,40,40,40,40,23,23,23,23,24,24,40,28,29,30,30,40,26,23,24,28,29,30,40],"f":[null,null,null,[[]],null,null,[[],["result",6]],null,null,null,[[]],null,[[]],null,null,null,[[["u8",15]],["result",4]],null,null,[[["u8",15]],["result",4]],null,null,[[["u8",15]],["result",4]],null,null,[[["u8",15]],["result",4]],null,null,[[["u8",15]],["result",4]],null,null,null,[[],["result",4]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,[[],["result",4]],null,null,[[],["result",4]],null,null,[[],["result",4]],null,null,null,null,null,[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],null,[[]],null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],null,[[],[["bool",15],["result",4]]],[[],[["bool",15],["result",4]]],null,null,[[],["result",4]],null,null,[[],[["bool",15],["result",4]]],[[],[["bool",15],["result",4]]],null,null,[[]],null,[[]],null,null,null,null,null,null,[[],["result",6]],null,null,[[],["result",6]],[[],["result",6]],null,null,null,[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],[["result",6],["void",4]]],null,null,null,[[],["result",4]],null,null,[[]],null,null,[[]],null,[[]],null,null,null,null,null,[[],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[],["direction",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],[["bool",15],["result",4]]],[[],[["bool",15],["result",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],[["bool",15],["result",4]]],[[],[["bool",15],["result",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["polarity",4]],["bool",15]],[[["phase",4]],["bool",15]],[[["mode",3]],["bool",15]],[[["mode",3]],["bool",15]],[[["direction",4]],["bool",15]],[[["str",15]],["result",6]],[[]],[[]],[[],["polarity",4]],[[],["phase",4]],[[],["mode",3]],[[],["direction",4]]],"p":[[8,"Channel"],[8,"OneShot"],[8,"DelayMs"],[8,"DelayUs"],[8,"Read"],[8,"Write"],[8,"WriteIter"],[8,"WriteRead"],[8,"WriteIterRead"],[8,"Read"],[8,"Write"],[8,"Transfer"],[8,"Write"],[8,"WriteIter"],[8,"OutputPin"],[8,"StatefulOutputPin"],[8,"ToggleableOutputPin"],[8,"InputPin"],[8,"OutputPin"],[8,"StatefulOutputPin"],[8,"ToggleableOutputPin"],[8,"InputPin"],[3,"OldOutputPin"],[3,"OldInputPin"],[8,"Read"],[8,"Write"],[8,"FullDuplex"],[4,"Polarity"],[4,"Phase"],[3,"Mode"],[8,"CountDown"],[8,"Cancel"],[8,"Watchdog"],[8,"WatchdogEnable"],[8,"WatchdogDisable"],[8,"Capture"],[8,"Pwm"],[8,"PwmPin"],[8,"Qei"],[4,"Direction"]]},\
"ff":{"doc":"This crate provides traits for working with finite fields.","t":[8,16,10,10,6,8,10,10,10,10,10,11,10,10,10,11,8,16,16,11,10,10,10,10,11,10,18,18,10,18,10,5,5,5],"n":["BitView","Store","view_bits","view_bits_mut","FieldBits","Field","random","zero","one","is_zero","square","cube","double","invert","sqrt","pow_vartime","PrimeField","Repr","ReprBits","from_str","from_repr","to_repr","to_le_bits","is_odd","is_even","char_le_bits","NUM_BITS","CAPACITY","multiplicative_generator","S","root_of_unity","sbb","adc","mac_with_carry"],"q":["ff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Creates a <code>BitSlice</code> view over some type that supports it.","The region’s storage type.","Views a memory region as a <code>BitSlice</code>.","Views a memory region as a mutable <code>BitSlice</code>.","Bit representation of a field element.","This trait represents an element of a field.","Returns an element chosen uniformly at random using a …","Returns the zero element of the field, the additive …","Returns the one element of the field, the multiplicative …","Returns true iff this element is zero.","Squares this element.","Cubes this element.","Doubles this element.","Computes the multiplicative inverse of this element, …","Returns the square root of the field element, if it is …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","This represents an element of a prime field.","The prime field can be converted back and forth into this …","The backing store for a bit representation of a prime …","Interpret a string of numbers as a (congruent) prime …","Attempts to convert a byte representation of a field …","Converts an element of the prime field into the standard …","Converts an element of the prime field into a …","Returns true iff this element is odd.","Returns true iff this element is even.","Returns the bits of the field characteristic (the …","How many bits are needed to represent an element of this …","How many bits of information can be reliably stored in …","Returns a fixed multiplicative generator of <code>modulus - 1</code> …","An integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code>…","Returns the <code>2^s</code> root of unity.","Calculate a - b - borrow, returning the result and …","Calculate a + b + carry, returning the sum and modifying …","Calculate a + (b * c) + carry, returning the least …"],"i":[0,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0],"f":[null,null,[[],["bitslice",3]],[[],["bitslice",3]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["ctoption",3]],[[],["ctoption",3]],[[["asref",8]]],null,null,null,[[["str",15]],["option",4]],[[],["option",4]],[[]],[[],["fieldbits",6]],[[],["bool",15]],[[],["bool",15]],[[],["fieldbits",6]],null,null,[[]],null,[[]],[[["u64",15],["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u64",15]]],"p":[[8,"BitView"],[8,"Field"],[8,"PrimeField"]]},\
"flexiber":{"doc":"flexiber","t":[24,24,3,3,3,4,13,13,12,13,12,13,13,12,13,13,13,12,12,13,13,12,12,13,12,12,13,6,3,3,3,4,13,13,13,13,3,12,12,12,8,10,11,11,6,3,8,10,8,10,11,8,10,10,11,8,10,8,11,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Decodable","Encodable","Decoder","Encoder","Error","ErrorKind","Failed","InvalidClass","value","InvalidTag","byte","InvalidLength","Length","tag","Overflow","Overlength","TrailingData","decoded","remaining","Truncated","Underlength","expected","actual","UnexpectedTag","expected","actual","UnsupportedTagSize","Result","Length","SimpleTag","Slice","Class","Universal","Application","Context","Private","Tag","class","constructed","number","TagLike","embedding","assert_eq","with_value","TaggedSlice","TaggedValue","Container","fields","Decodable","decode","from_bytes","Encodable","encoded_length","encode","encode_to_slice","Tagged","tag","EncodableHeapless","encode_to_heapless_vec","to_heapless_vec","try_debug","try_error","try_info","try_trace","try_warn","log","debug","error","info","trace","warn","log_now","debug_now","error_now","info_now","trace_now","warn_now","try_log_now","try_debug_now","try_error_now","try_info_now","try_trace_now","try_warn_now","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","embedding","embedding","decode","decode","decode","decode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","cmp","partial_cmp","add","add","add","add","add","try_from","try_from","try_from","try_from","try_from","try_from","from","from","from","from","from","as_ref","clone","clone","clone","clone","clone","clone","clone","clone","default","new","decode","decode_tagged_value","decode_tagged_slice","error","is_failed","finish","is_finished","new","encode","error","is_failed","finish","encode_tagged_collection","encode_untagged_collection","new","kind","position","nested","at","zero","max","to_usize","new","as_bytes","length","is_empty","BOOLEAN","INTEGER","BIT_STRING","OCTET_STRING","NULL","OBJECT_IDENTIFIER","UTF8_STRING","PRINTABLE_STRING","UTC_TIME","GENERALIZED_TIME","SEQUENCE","SET","from","universal","application","context","private","constructed","assert_eq","with_value","new","tag","from","as_bytes","length","is_empty","decode_nested","from","as_bytes","length","is_empty","decode_nested","from_bytes","encode_to_slice","encode_to_heapless_vec","to_heapless_vec"],"q":["flexiber","","","","","","","","flexiber::ErrorKind","flexiber","flexiber::ErrorKind","flexiber","","flexiber::ErrorKind","flexiber","","","flexiber::ErrorKind","","flexiber","","flexiber::ErrorKind","","flexiber","flexiber::ErrorKind","","flexiber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Derive the <code>Decodable</code> trait on a struct.","Derive the <code>Encodable</code> trait on a struct.","BER-TLV decoder.","BER-TLV encoder.","Error type.","Error type.","Operation failed due to previous error","Class has more than 2 bytes","","Invalid tag","Raw byte value of the tag","Length greater than u16::MAX","Incorrect length for a given field","Tag type of the value being decoded","Integer overflow occurred (library bug!)","Message is longer than BER-TLV’s limits support","Undecoded trailing data at end of message","Length of the decoded data","Total length of the remaining data left in the buffer","Unexpected end-of-message/nested field when decoding","Encoded message is shorter than the expected length (i.e. …","Expected length","Actual length","Unexpected tag","Tag the decoder was expecting (if there is a single such …","Actual tag encountered in the message","Tag does not fit in 3 bytes","Result type.","BER-TLV-encoded length.","These are tags like in SIMPLE-TLV.","Slice of at most <code>Length::max()</code> bytes.","Class of BER tag.","","","","","The tag field consists of a single byte encoding a tag …","","","","This is the common trait that types to be used as tags …","To stick with one Error type, make sure the tag type can …","Assert that this [<code>Tag</code>] matches the provided expected tag.","Ergonomic way to get a TaggedValue for a given tag and …","Raw BER-TLV data object <code>TaggedValue<Slice<\'_>></code>.","BER-TLV data object.","Multiple encodables in a container.","Call the provided function with a slice of [<code>Encodable</code>] …","Decoding trait.","Attempt to decode this message using the provided decoder.","Parse <code>Self</code> from the provided byte slice.","Encoding trait.","Compute the length of this value in bytes when encoded as …","Encode this value as BER-TLV using the provided [<code>Encoder</code>].","Encode this value to the provided byte slice, returning a …","Types with an associated BER-TLV [<code>Tag</code>].","The tag","The equivalent of the <code>encode_to_vec</code> and <code>to_vec</code> methods.","Encode this message as BER-TLV, appending it to the …","Serialize this message as a byte vector.","Fallible version of <code>debug!</code>.","Fallible version of <code>error!</code>.","Fallible version of <code>info!</code>.","Fallible version of <code>trace!</code>.","Fallible version of <code>warn!</code>.","Local version of <code>log!</code>.","Local version of <code>debug!</code>.","Local version of <code>error!</code>.","Local version of <code>info!</code>.","Local version of <code>trace!</code>.","Local version of <code>warn!</code>.","Immediate version of <code>log!</code>.","Immediate version of <code>debug!</code>.","Immediate version of <code>error!</code>.","Immediate version of <code>info!</code>.","Immediate version of <code>trace!</code>.","Immediate version of <code>warn!</code>.","Fallible immediate version of <code>log!</code>.","Fallible immediate version of <code>debug!</code>.","Fallible immediate version of <code>error!</code>.","Fallible immediate version of <code>info!</code>.","Fallible immediate version of <code>trace!</code>.","Fallible immediate version of <code>warn!</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new decoder for the given byte slice.","Decode a value which impls the [<code>Decodable</code>] trait.","Decode a TaggedValue with tag checked to be as expected, …","Decode a TaggedSlice with tag checked to be as expected, …","Return an error with the given [<code>ErrorKind</code>], annotating it …","Did the decoding operation fail due to an error?","Finish decoding, returning the given value if there is no …","Have we decoded all of the bytes in this [<code>Decoder</code>]?","Create a new encoder with the given byte slice as a …","Encode a value which impls the [<code>Encodable</code>] trait.","Return an error with the given [<code>ErrorKind</code>], annotating it …","Did the decoding operation fail due to an error?","Finish encoding to the buffer, returning a slice …","Encode a collection of values which impl the [<code>Encodable</code>] …","Encode a collection of values which impl the [<code>Encodable</code>] …","Create a new [<code>Error</code>]","Get the [<code>ErrorKind</code>] which occurred.","Get the position inside of the message where the error …","For errors occurring inside of a nested message, extend …","Annotate an [<code>ErrorKind</code>] with context about where it …","Return a length of <code>0</code>.","Get the maximum length supported by BER-TLV: 65,535.","Convert length to <code>usize</code>.","Create a new [<code>Slice</code>], ensuring that the provided <code>slice</code> …","Borrow the inner byte slice","Get the [<code>Length</code>] of this [<code>Slice</code>]","Is this [<code>Slice</code>] empty?","","","","","","","","","","","","","","","","","","","Assert that this [<code>Tag</code>] matches the provided expected tag.","Ergonomic way to get a TaggedValue for a given tag and …","","","Create a new tagged slice, checking lengths.","Borrow the inner byte slice.","Get the length of the inner byte slice.","Is the inner byte slice empty?","Decode nested values, creating a new [<code>Decoder</code>] for the …","Create a new tagged slice, checking lengths.","Borrow the inner byte slice.","Get the length of the inner byte slice.","Is the inner byte slice empty?","Decode nested values, creating a new [<code>Decoder</code>] for the …","Parse <code>Self</code> from the provided byte slice.","Encode this value to the provided byte slice, returning a …","Encode this message as BER-TLV, appending it to the …","Serialize this message as a byte vector."],"i":[0,0,0,0,0,0,1,1,2,1,3,1,1,4,1,1,1,5,5,1,1,6,6,1,7,7,1,0,0,0,0,0,8,8,8,8,0,9,9,9,0,10,10,10,0,0,0,11,0,12,12,0,13,13,13,0,14,0,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,1,1,1,1,1,1,1,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,8,8,8,8,8,8,8,9,9,9,9,9,9,9,22,22,22,22,22,22,22,20,9,19,20,9,23,19,19,20,20,9,9,22,22,23,23,16,17,18,1,19,21,8,9,22,18,1,19,9,18,18,1,1,19,19,20,20,21,21,8,9,9,22,22,19,19,19,19,19,19,24,19,19,20,8,9,9,16,18,18,19,19,21,18,1,19,20,21,8,9,22,19,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,1,19,19,19,21,21,21,21,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,22,22,22,22,22,22,22,23,23,23,23,23,12,13,15,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["tag",3]],[[],["result",6]],[[],["taggedvalue",3]],null,null,null,[[],["result",6]],null,[[["decoder",3]],["result",6]],[[],["result",6]],null,[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[],["result",6]],null,[[],["tag",3]],null,[[["vec",3]],[["length",3],["result",6]]],[[],[["vec",3],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["tag",3]],[[],["tag",3]],[[["decoder",3]],[["length",3],["result",6]]],[[["decoder",3]],["result",6]],[[["decoder",3]],["result",6]],[[["decoder",3]],["result",6]],[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["length",3]],["bool",15]],[[["length",3]],["bool",15]],[[["simpletag",3]],["bool",15]],[[["simpletag",3]],["bool",15]],[[["slice",3]],["bool",15]],[[["slice",3]],["bool",15]],[[["class",4]],["bool",15]],[[["tag",3]],["bool",15]],[[["tag",3]],["bool",15]],[[["taggedvalue",3]],["bool",15]],[[["taggedvalue",3]],["bool",15]],[[["length",3]],["ordering",4]],[[["length",3]],[["ordering",4],["option",4]]],[[],["result",6]],[[["u8",15]],["result",6]],[[["u16",15]],["result",6]],[[["usize",15]],["result",6]],[[["length",3]]],[[],[["length",3],["result",6]]],[[["usize",15]],[["length",3],["result",6]]],[[["u8",15]],["result",6]],[[["u8",15]],["result",6]],[[],["result",6]],[[["u8",15]],["result",6]],[[],["decoder",3]],[[["errorkind",4]],["error",3]],[[["infallible",4]],["error",3]],[[["u8",15]],["length",3]],[[["u16",15]],["length",3]],[[]],[[],["error",3]],[[],["errorkind",4]],[[],["length",3]],[[],["simpletag",3]],[[],["slice",3]],[[],["class",4]],[[],["tag",3]],[[],["taggedvalue",3]],[[],["length",3]],[[]],[[],[["decodable",8],["result",6]]],[[["decodable",8],["taglike",8]],[["decodable",8],["result",6]]],[[["decodable",8],["taglike",8]],["result",6]],[[["errorkind",4]],["result",6]],[[],["bool",15]],[[],["result",6]],[[],["bool",15]],[[]],[[],["result",6]],[[["errorkind",4]],["result",6]],[[],["bool",15]],[[],["result",6]],[[["tag",3]],["result",6]],[[],["result",6]],[[["errorkind",4],["length",3]],["error",3]],[[],["errorkind",4]],[[],[["length",3],["option",4]]],[[["length",3]]],[[["length",3]],["error",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["result",6]],[[]],[[],["length",3]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15],["u16",15],["class",4]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[]],[[],["result",6]],[[],["taggedvalue",3]],[[]],[[]],[[],["result",6]],[[]],[[],["length",3]],[[],["bool",15]],[[],["result",6]],[[],["result",6]],[[]],[[],["length",3]],[[],["bool",15]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["vec",3]],[["length",3],["result",6]]],[[],[["vec",3],["result",6]]]],"p":[[4,"ErrorKind"],[13,"InvalidClass"],[13,"InvalidTag"],[13,"Length"],[13,"TrailingData"],[13,"Underlength"],[13,"UnexpectedTag"],[4,"Class"],[3,"Tag"],[8,"TagLike"],[8,"Container"],[8,"Decodable"],[8,"Encodable"],[8,"Tagged"],[8,"EncodableHeapless"],[3,"Decoder"],[3,"Encoder"],[3,"Error"],[3,"Length"],[3,"SimpleTag"],[3,"Slice"],[3,"TaggedValue"],[6,"TaggedSlice"],[6,"Result"]]},\
"flexiber_derive":{"doc":"Custom derive support for the <code>flexiber</code> crate","t":[24,24],"n":["Decodable","Encodable"],"q":["flexiber_derive",""],"d":["Derive the <code>Decodable</code> trait on a struct.","Derive the <code>Encodable</code> trait on a struct."],"i":[0,0],"f":[null,null],"p":[]},\
"funty":{"doc":"<code>fun</code>damental <code>ty</code>pes","t":[8,16,10,10,10,10,10,10,8,18,18,18,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,8,10,10,10,8,16,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"n":["IsNumber","Bytes","to_be_bytes","to_le_bytes","to_ne_bytes","from_be_bytes","from_le_bytes","from_ne_bytes","IsInteger","ZERO","MIN","MAX","min_value","max_value","from_str_radix","count_ones","count_zeros","leading_zeros","trailing_zeros","leading_ones","trailing_ones","rotate_left","rotate_right","swap_bytes","reverse_bits","from_be","from_le","to_be","to_le","checked_add","checked_sub","checked_mul","checked_div","checked_div_euclid","checked_rem","checked_rem_euclid","checked_neg","checked_shl","checked_shr","checked_pow","saturating_add","saturating_sub","saturating_mul","saturating_pow","wrapping_add","wrapping_sub","wrapping_mul","wrapping_div","wrapping_div_euclid","wrapping_rem","wrapping_rem_euclid","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_pow","overflowing_add","overflowing_sub","overflowing_mul","overflowing_div","overflowing_div_euclid","overflowing_rem","overflowing_rem_euclid","overflowing_neg","overflowing_shl","overflowing_shr","overflowing_pow","pow","div_euclid","rem_euclid","IsSigned","checked_abs","wrapping_abs","overflowing_abs","abs","signum","is_positive","is_negative","IsUnsigned","is_power_of_two","next_power_of_two","checked_next_power_of_two","IsFloat","Raw","RADIX","MANTISSA_DIGITS","DIGITS","EPSILON","MIN","MIN_POSITIVE","MAX","MIN_EXP","MAX_EXP","MIN_10_EXP","MAX_10_EXP","NAN","INFINITY","NEG_INFINITY","PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FRAC_1_PI","FRAC_2_PI","FRAC_2_SQRT_PI","SQRT_2","FRAC_1_SQRT_2","E","LOG2_E","LOG10_E","LN_2","LN_10","is_nan","is_infinite","is_finite","is_normal","classify","is_sign_positive","is_sign_negative","recip","to_degrees","to_radians","max","min","to_bits","from_bits","Is8","Is16","Is32","Is64","Is128","AtLeast8","AtLeast16","AtLeast32","AtLeast64","AtLeast128","AtMost8","AtMost16","AtMost32","AtMost64","AtMost128"],"q":["funty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Declare that a type is an abstract number.","","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Create a numeric value from its representation as a byte …","Create a numeric value from its representation as a byte …","Create a numeric value from its memory representation as …","Declare that a type is a fixed-point integer.","The type’s zero value.","The type’s minimum value. This is zero for unsigned …","The type’s maximum value.","Returns the smallest value that can be represented by …","Returns the largest value that can be represented by this …","Converts a string slice in a given base to an integer.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of leading ones in the binary …","Returns the number of trailing ones in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Reverses the bit pattern of the integer.","Converts an integer from big endian to the target’s …","Converts an integer frm little endian to the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>…","Wrapping (modular) addition. Computes <code>self + rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) division. Computes <code>self / rhs</code>, …","Wrapping Eulidean division. Computes <code>self.div_euclid(rhs)</code>…","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping Euclidean remainder. Computes …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>…","Calculates <code>self + rhs</code>","Calculates <code>self - rhs</code>","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the quotient of Euclidean division …","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Overflowing Euclidean remainder. Calculates …","Negates self, overflowing if this is equal to the minimum …","Shifts self left by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Calculates the quotient of Euclidean division of self by …","Calculates the least nonnegative remainder of …","Declare that a type is a signed integer.","Checked absolute value. Computes <code>self.abs()</code>, returning …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Computes the absolute value of <code>self</code>.","Overflow behavior","Returns a number representing sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Declare that a type is an unsigned integer.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Declare that a type is a floating-point number.","The unsigned integer type of the same width as <code>Self</code>.","The radix or base of the internal representation of <code>f32</code>.","Number of significant digits in base 2.","Approximate number of significant digits in base 10.","Machine epsilon value for <code>f32</code>.","Smallest finite <code>f32</code> value.","Smallest positive normal <code>f32</code> value.","Largest finite <code>f32</code> value.","One greater than the minimum possible normal power of 2 …","Maximum possible power of 2 exponent.","Minimum possible normal power of 10 exponent.","Maximum possible power of 10 exponent.","Not a Number (NaN).","Infinity (∞).","Negative infinity (−∞).","Archimedes’ constant (π)","π/2","π/3","π/4","π/6","π/8","1/π","2/π","2/sqrt(π)","sqrt(2)","1/sqrt(2)","Euler’s number (e)","log2(e)","log10(e)","ln(2)","ln(10)","Returns <code>true</code> if this value is <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Takes the reciprocal (inverse) of a number, <code>1/x</code>.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","Raw transmutation to <code>u32</code>.","Raw transmutation from <code>u32</code>.","Declare that a type is exactly eight bits wide.","Declare that a type is exactly sixteen bits wide.","Declare that a type is exactly thirty-two bits wide.","Declare that a type is exactly sixty-four bits wide.","Declare that a type is exactly one hundred twenty-eight …","Declare that a type is eight or more bits wide.","Declare that a type is sixteen or more bits wide.","Declare that a type is thirty-two or more bits wide.","Declare that a type is sixty-four or more bits wide.","Declare that a type is one hundred twenty-eight or more …","Declare that a type is eight or fewer bits wide.","Declare that a type is sixteen or fewer bits wide.","Declare that a type is thirty-two or fewer bits wide.","Declare that a type is sixty-four or fewer bits wide.","Declare that a type is one hundred twenty-eight or fewer …"],"i":[0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,0,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[["u32",15],["str",15]],[["result",4],["parseinterror",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],null,[[],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[]],[[],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[8,"IsNumber"],[8,"IsInteger"],[8,"IsSigned"],[8,"IsUnsigned"],[8,"IsFloat"]]},\
"generic_array":{"doc":"This crate implements a structure that can be used as a …","t":[0,8,16,6,0,8,16,6,8,11,11,11,0,3,11,11,0,8,16,16,10,6,8,16,10,10,8,16,10,10,8,16,16,10,8,16,16,10,8,16,3,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["arr","AddLength","Output","Inc","functional","MappedGenericSequence","Mapped","MappedSequence","FunctionalSequence","map","zip","fold","iter","GenericArrayIter","as_slice","as_mut_slice","sequence","GenericSequence","Length","Sequence","generate","SequenceItem","Lengthen","Longer","append","prepend","Shorten","Shorter","pop_back","pop_front","Split","First","Second","split","Concat","Rest","Output","concat","ArrayLength","ArrayType","GenericArray","as_slice","as_mut_slice","from_slice","from_mut_slice","clone_from_slice","from_exact_iter","arr","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","map","zip","fold","generate","append","prepend","pop_back","pop_front","split","concat","deref","deref_mut","fmt","fmt","eq","cmp","partial_cmp","drop","hash","len","borrow","borrow_mut","from_iter","fmt","fmt","next_back","rfold","next","fold","size_hint","count","nth","last","into_iter","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","clone","clone","default"],"q":["generic_array","generic_array::arr","","","generic_array","generic_array::functional","","","","","","","generic_array","generic_array::iter","","","generic_array","generic_array::sequence","","","","","","","","","","","","","","","","","","","","","generic_array","","","","","","","","","","generic_array::iter","","","","","","","","generic_array","","","","","","","","","","","","","","","","","","","","generic_array::iter","generic_array","","","generic_array::iter","generic_array","generic_array::iter","generic_array","","","","","generic_array::iter","","","","","","","","generic_array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","generic_array::iter","generic_array"],"d":["Implementation for <code>arr!</code> macro.","Helper trait for <code>arr!</code> macro","Resulting length","Helper type for <code>arr!</code> macro","Functional programming with generic sequences","Defines the relationship between one generic sequence and …","Mapped sequence type","Accessor type for a mapped generic sequence","Defines functional programming methods for generic …","Maps a <code>GenericSequence</code> to another <code>GenericSequence</code>.","Combines two <code>GenericSequence</code> instances and iterates …","Folds (or reduces) a sequence of data into a single value.","<code>GenericArray</code> iterator implementation.","An iterator that moves out of a <code>GenericArray</code>","Returns the remaining items of this iterator as a slice","Returns the remaining items of this iterator as a mutable …","Useful traits for manipulating sequences of data stored …","Defines some sequence with an associated length and …","<code>GenericArray</code> associated length","Concrete sequence type used in conjuction with reference …","Initializes a new sequence instance using the given …","Accessor for <code>GenericSequence</code> item type, which is really …","Defines any <code>GenericSequence</code> which can be lengthened or …","<code>GenericSequence</code> that has one more element than <code>Self</code>","Returns a new array with the given element appended to …","Returns a new array with the given element prepended to …","Defines a <code>GenericSequence</code> which can be shortened by …","<code>GenericSequence</code> that has one less element than <code>Self</code>","Returns a new array without the last element, and the …","Returns a new array without the first element, and the …","Defines a <code>GenericSequence</code> that can be split into two …","First part of the resulting split array","Second part of the resulting split array","Splits an array at the given index, returning the …","Defines <code>GenericSequence</code>s which can be joined together, …","Sequence to be concatenated with <code>self</code>","Resulting sequence formed by the concatenation.","Concatenate, or join, two sequences.","Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","Struct representing a generic array - <code>GenericArray<T, N></code> …","Extracts a slice containing the entire array.","Extracts a mutable slice containing the entire array.","Converts slice to a generic array reference with inferred …","Converts mutable slice to a mutable generic array …","Construct a <code>GenericArray</code> from a slice by cloning its …","Creates a new <code>GenericArray</code> instance from an iterator with …","Macro allowing for easy generation of Generic Arrays. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,2,0,0,3,3,3,0,0,4,4,0,0,5,5,5,0,0,6,6,6,0,7,7,7,0,8,8,8,0,9,9,9,0,10,0,11,11,11,11,11,11,0,4,4,4,4,4,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,11,11,11,4,11,4,11,11,11,11,11,4,4,4,4,4,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,11],"f":[null,null,null,null,null,null,null,null,null,[[],["mappedsequence",6]],[[],["mappedsequence",6]],[[]],null,null,[[]],[[]],null,null,null,null,[[]],null,null,null,[[]],[[]],null,null,[[]],[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],[[]],[[],["genericarray",3]],[[],["genericarray",3]],[[],["genericarray",3]],[[],["option",4]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["mappedsequence",6]],[[],["mappedsequence",6]],[[]],[[],["genericarray",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[["genericarray",3]],["ordering",4]],[[["genericarray",3]],[["option",4],["ordering",4]]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["genericarray",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["optiongenericarray",3]],[[]],[[]]],"p":[[8,"AddLength"],[8,"MappedGenericSequence"],[8,"FunctionalSequence"],[3,"GenericArrayIter"],[8,"GenericSequence"],[8,"Lengthen"],[8,"Shorten"],[8,"Split"],[8,"Concat"],[8,"ArrayLength"],[3,"GenericArray"]]},\
"group":{"doc":"","t":[0,8,16,10,10,11,11,8,16,8,16,16,10,10,10,10,0,8,8,16,8,16,16,10,10,10,10,8,8,8,8,8,16,10,10,10,10,10,8,16,11,10,8,16,10,10,10,8,16,10,10,10],"n":["cofactor","CofactorGroup","Subgroup","clear_cofactor","into_subgroup","is_small_order","is_torsion_free","CofactorCurve","Affine","CofactorCurveAffine","Scalar","Curve","identity","generator","is_identity","to_curve","prime","PrimeGroup","PrimeCurve","Affine","PrimeCurveAffine","Scalar","Curve","identity","generator","is_identity","to_curve","GroupOps","GroupOpsOwned","ScalarMul","ScalarMulOwned","Group","Scalar","random","identity","generator","is_identity","double","Curve","AffineRepr","batch_normalize","to_affine","GroupEncoding","Repr","from_bytes","from_bytes_unchecked","to_bytes","UncompressedEncoding","Uncompressed","from_uncompressed","from_uncompressed_unchecked","to_uncompressed"],"q":["group","group::cofactor","","","","","","","","","","","","","","","group","group::prime","","","","","","","","","","group","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","This trait represents an element of a cryptographic group …","The large prime-order subgroup in which cryptographic …","Maps <code>self</code> to the prime-order subgroup by multiplying this …","Returns <code>self</code> if it is contained in the prime-order …","Determines if this element is of small order.","Determines if this element is “torsion free”, i.e., …","Efficient representation of an elliptic curve point …","","Affine representation of an elliptic curve point …","","","Returns the additive identity.","Returns a fixed generator of unknown exponent.","Determines if this point represents the point at …","Converts this element to its curve representation.","","This trait represents an element of a prime-order …","Efficient representation of an elliptic curve point …","","Affine representation of an elliptic curve point …","","","Returns the additive identity.","Returns a fixed generator of unknown exponent.","Determines if this point represents the point at …","Converts this element to its curve representation.","A helper trait for types with a group operation.","A helper trait for references with a group operation.","A helper trait for types implementing group scalar …","A helper trait for references implementing group scalar …","This trait represents an element of a cryptographic group.","Scalars modulo the order of this group’s scalar field.","Returns an element chosen uniformly at random from the …","Returns the additive identity, also known as the “…","Returns a fixed generator of the prime-order subgroup.","Determines if this point is the identity.","Doubles this element.","Efficient representation of an elliptic curve point …","The affine representation for this elliptic curve.","Converts a batch of projective elements into affine …","Converts this element into its affine representation.","","The encoding of group elements.","Attempts to deserialize a group element from its encoding.","Attempts to deserialize a group element, not checking if …","Converts this element into its byte encoding. This may or …","Affine representation of a point on an elliptic curve …","","Attempts to deserialize an element from its uncompressed …","Attempts to deserialize an uncompressed element, not …","Converts this element into its uncompressed encoding, so …"],"i":[0,0,1,1,1,1,1,0,2,0,3,3,3,3,3,3,0,0,0,4,0,5,5,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,0,7,7,7,0,8,8,8,8,0,9,9,9,9],"f":[null,null,null,[[]],[[],["ctoption",3]],[[],["choice",3]],[[],["choice",3]],null,null,null,null,null,[[]],[[]],[[],["choice",3]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[],["choice",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[],["choice",3]],[[]],null,null,[[]],[[]],null,null,[[],["ctoption",3]],[[],["ctoption",3]],[[]],null,null,[[],["ctoption",3]],[[],["ctoption",3]],[[]]],"p":[[8,"CofactorGroup"],[8,"CofactorCurve"],[8,"CofactorCurveAffine"],[8,"PrimeCurve"],[8,"PrimeCurveAffine"],[8,"Group"],[8,"Curve"],[8,"GroupEncoding"],[8,"UncompressedEncoding"]]},\
"half":{"doc":"A crate that provides support for half-precision 16-bit …","t":[0,8,10,10,10,10,10,10,8,10,10,5,5,5,5,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],"n":["slice","HalfFloatSliceExt","reinterpret_cast","reinterpret_cast_mut","convert_from_f32_slice","convert_from_f64_slice","convert_to_f32_slice","convert_to_f64_slice","HalfBitsSliceExt","reinterpret_cast","reinterpret_cast_mut","from_bits_mut","to_bits_mut","from_bits","to_bits","consts","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","MIN_POSITIVE_SUBNORMAL","MAX_SUBNORMAL","ONE","ZERO","NEG_ZERO","E","PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","SQRT_2","prelude","f16","bf16","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","from_str","from_str","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","clone","clone","default","default","from_bits","from_f32","from_f64","to_bits","to_le_bytes","to_be_bytes","to_ne_bytes","from_le_bytes","from_be_bytes","from_ne_bytes","to_f32","to_f64","is_nan","is_infinite","is_finite","is_normal","classify","signum","is_sign_positive","is_sign_negative","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","MIN_POSITIVE_SUBNORMAL","MAX_SUBNORMAL","ONE","ZERO","NEG_ZERO","E","PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG10_2","LOG2_E","LOG2_10","SQRT_2","from_bits","from_f32","from_f64","to_bits","to_le_bytes","to_be_bytes","to_ne_bytes","from_le_bytes","from_be_bytes","from_ne_bytes","as_bits","to_f32","to_f64","is_nan","is_infinite","is_finite","is_normal","classify","signum","is_sign_positive","is_sign_negative","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","MIN_POSITIVE_SUBNORMAL","MAX_SUBNORMAL","ONE","ZERO","NEG_ZERO","E","PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG10_2","LOG2_E","LOG2_10","SQRT_2"],"q":["half","half::slice","","","","","","","","","","","","","","half","half::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halfd":["Contains utility functions and traits to convert between …","Extensions to <code>[f16]</code> and <code>[bf16]</code> slices to support …","Reinterpret a slice of <code>f16</code> or <code>bf16</code> numbers as a slice of …","Reinterpret a mutable slice of <code>f16</code> or <code>bf16</code> numbers as a …","Convert all of the elements of a <code>[f32]</code> slice into <code>f16</code> or …","Convert all of the elements of a <code>[f64]</code> slice into <code>f16</code> or …","Convert all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f32</code> …","Convert all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f64</code> …","Extensions to <code>[u16]</code> slices to support reinterpret …","Reinterpret a slice of <code>u16</code> bits as a slice of <code>f16</code> or <code>bf16</code> …","Reinterpret a mutable slice of <code>u16</code> bits as a mutable …","Reinterpret a mutable slice of <code>u16</code> bits as a mutable …","Reinterpret a mutable slice of <code>f16</code> numbers as a mutable …","Reinterpret a slice of <code>u16</code> bits as a slice of <code>f16</code> numbers.","Reinterpret a slice of <code>f16</code> numbers as a slice of <code>u16</code> bits.","Useful <code>f16</code> constants.","Approximate number of <code>f16</code> significant digits in base 10.","<code>f16</code> machine epsilon value.","<code>f16</code> positive Infinity (+∞).","Number of <code>f16</code> significant digits in base 2.","Largest finite <code>f16</code> value.","Maximum possible <code>f16</code> power of 10 exponent.","Maximum possible <code>f16</code> power of 2 exponent.","Smallest finite <code>f16</code> value.","Minimum possible normal <code>f16</code> power of 10 exponent.","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>f16</code> value.","<code>f16</code> Not a Number (NaN).","<code>f16</code> negative infinity (-∞).","The radix or base of the internal representation of <code>f16</code>.","Minimum positive subnormal <code>f16</code> value.","Maximum subnormal <code>f16</code> value.","<code>f16</code> 1","<code>f16</code> 0","<code>f16</code> -0","<code>f16</code> Euler’s number (ℯ).","<code>f16</code> Archimedes’ constant (π).","<code>f16</code> 1/π","<code>f16</code> 1/√2","<code>f16</code> 2/π","<code>f16</code> 2/√π","<code>f16</code> π/2","<code>f16</code> π/3","<code>f16</code> π/4","<code>f16</code> π/6","<code>f16</code> π/8","<code>f16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> √2","A collection of the most used items and traits in this …","A 16-bit floating point type implementing the IEEE …","A 16-bit floating point type implementing the <code>bfloat16</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a <code>bf16</code> value from the raw bits.","Constructs a <code>bf16</code> value from a 32-bit floating point …","Constructs a <code>bf16</code> value from a 64-bit floating point …","Converts a <code>bf16</code> into the underlying bit representation.","Return the memory representation of the underlying bit …","Return the memory representation of the underlying bit …","Return the memory representation of the underlying bit …","Create a floating point value from its representation as …","Create a floating point value from its representation as …","Create a floating point value from its representation as …","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","Returns <code>true</code> if this value is NaN and <code>false</code> otherwise.","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","Returns <code>true</code> if this number is neither infinite nor NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number.","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","Approximate number of <code>bf16</code> significant digits in base 10.","<code>bf16</code> machine epsilon value.","<code>bf16</code> positive Infinity (+∞).","Number of <code>bf16</code> significant digits in base 2.","Largest finite <code>bf16</code> value.","Maximum possible <code>bf16</code> power of 10 exponent.","Maximum possible <code>bf16</code> power of 2 exponent.","Smallest finite <code>bf16</code> value.","Minimum possible normal <code>bf16</code> power of 10 exponent.","One greater than the minimum possible normal <code>bf16</code> power …","Smallest positive normal <code>bf16</code> value.","<code>bf16</code> Not a Number (NaN).","<code>bf16</code> negative infinity (-∞).","The radix or base of the internal representation of <code>bf16</code>.","Minimum positive subnormal <code>bf16</code> value.","Maximum subnormal <code>bf16</code> value.","<code>bf16</code> 1","<code>bf16</code> 0","<code>bf16</code> -0","<code>bf16</code> Euler’s number (ℯ).","<code>bf16</code> Archimedes’ constant (π).","<code>bf16</code> 1/π","<code>bf16</code> 1/√2","<code>bf16</code> 2/π","<code>bf16</code> 2/√π","<code>bf16</code> π/2","<code>bf16</code> π/3","<code>bf16</code> π/4","<code>bf16</code> π/6","<code>bf16</code> π/8","<code>bf16</code> 𝗅𝗇 10","<code>bf16</code> 𝗅𝗇 2","<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ","<code>bf16</code> 𝗅𝗈𝗀₁₀2","<code>bf16</code> 𝗅𝗈𝗀₂ℯ","<code>bf16</code> 𝗅𝗈𝗀₂10","<code>bf16</code> √2","Constructs a 16-bit floating point value from the raw …","Constructs a 16-bit floating point value from a 32-bit …","Constructs a 16-bit floating point value from a 64-bit …","Converts a <code>f16</code> into the underlying bit representation.","Return the memory representation of the underlying bit …","Return the memory representation of the underlying bit …","Return the memory representation of the underlying bit …","Create a floating point value from its representation as …","Create a floating point value from its representation as …","Create a floating point value from its representation as …","Converts a <code>f16</code> into the underlying bit representation.","Converts a <code>f16</code> value into a <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f64</code> value.","Returns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number.","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","Approximate number of <code>f16</code> significant digits in base 10.","<code>f16</code> machine epsilon value.","<code>f16</code> positive Infinity (+∞).","Number of <code>f16</code> significant digits in base 2.","Largest finite <code>f16</code> value.","Maximum possible <code>f16</code> power of 10 exponent.","Maximum possible <code>f16</code> power of 2 exponent.","Smallest finite <code>f16</code> value.","Minimum possible normal <code>f16</code> power of 10 exponent.","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>f16</code> value.","<code>f16</code> Not a Number (NaN).","<code>f16</code> negative infinity (-∞).","The radix or base of the internal representation of <code>f16</code>.","Minimum positive subnormal <code>f16</code> value.","Maximum subnormal <code>f16</code> value.","<code>f16</code> 1","<code>f16</code> 0","<code>f16</code> -0","<code>f16</code> Euler’s number (ℯ).","<code>f16</code> Archimedes’ constant (π).","<code>f16</code> 1/π","<code>f16</code> 1/√2","<code>f16</code> 2/π","<code>f16</code> 2/√π","<code>f16</code> π/2","<code>f16</code> π/3","<code>f16</code> π/4","<code>f16</code> π/6","<code>f16</code> π/8","<code>f16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₁₀2","<code>f16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> 𝗅𝗈𝗀₂10","<code>f16</code> √2"],"i":[0,0,1,1,1,1,1,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,3,3,3,3,4,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["bf16",3]],["bool",15]],[[["f16",3]],["bool",15]],[[["bf16",3]],[["option",4],["ordering",4]]],[[["bf16",3]],["bool",15]],[[["bf16",3]],["bool",15]],[[["bf16",3]],["bool",15]],[[["bf16",3]],["bool",15]],[[["f16",3]],[["option",4],["ordering",4]]],[[["f16",3]],["bool",15]],[[["f16",3]],["bool",15]],[[["f16",3]],["bool",15]],[[["f16",3]],["bool",15]],[[["str",15]],[["result",4],["bf16",3],["parsefloaterror",3]]],[[["str",15]],[["parsefloaterror",3],["f16",3],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["i8",15]],["bf16",3]],[[["u8",15]],["bf16",3]],[[["i8",15]],["f16",3]],[[["u8",15]],["f16",3]],[[],["bf16",3]],[[],["f16",3]],[[],["bf16",3]],[[],["f16",3]],[[["u16",15]],["bf16",3]],[[["f32",15]],["bf16",3]],[[["f64",15]],["bf16",3]],[[],["u16",15]],[[]],[[]],[[]],[[],["bf16",3]],[[],["bf16",3]],[[],["bf16",3]],[[],["f32",15]],[[],["f64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[],["bf16",3]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u16",15]],["f16",3]],[[["f32",15]],["f16",3]],[[["f64",15]],["f16",3]],[[],["u16",15]],[[]],[[]],[[]],[[],["f16",3]],[[],["f16",3]],[[],["f16",3]],[[],["u16",15]],[[],["f32",15]],[[],["f64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[],["f16",3]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[8,"HalfFloatSliceExt"],[8,"HalfBitsSliceExt"],[3,"bf16"],[3,"f16"]]},\
"hash32":{"doc":"32-bit hashing machinery","t":[3,3,3,11,8,16,10,8,10,10,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FnvHasher","Murmur3Hasher","BuildHasherDefault","new","BuildHasher","Hasher","build_hasher","Hasher","finish","write","Hash","hash","hash_slice","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","build_hasher","finish","write","finish","write","fmt","eq","clone","default","default","default"],"q":["hash32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["32-bit Fowler-Noll-Vo hasher","32-bit MurmurHash3 hasher","See <code>core::hash::BuildHasherDefault</code> for details","<code>const</code> constructor","See <code>core::hash::BuildHasher</code> for details","See <code>core::hash::BuildHasher::Hasher</code>","See <code>core::hash::BuildHasher.build_hasher</code>","See <code>core::hash::Hasher</code> for details","See <code>core::hash::Hasher.finish</code>","See <code>core::hash::Hasher.write</code>","See <code>core::hash::Hash</code> for details","Feeds this value into the given <code>Hasher</code>.","Feeds a slice of this type into the given <code>Hasher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,2,2,0,3,3,0,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,5,5,6,6,1,1,1,5,6,1],"f":[null,null,null,[[]],null,null,[[]],null,[[],["u32",15]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["u32",15]],[[]],[[],["u32",15]],[[]],[[["formatter",3]],["result",6]],[[["buildhasherdefault",3]],["bool",15]],[[]],[[]],[[]],[[]]],"p":[[3,"BuildHasherDefault"],[8,"BuildHasher"],[8,"Hasher"],[8,"Hash"],[3,"FnvHasher"],[3,"Murmur3Hasher"]]},\
"heapless":{"doc":"<code>static</code> friendly data structures that don’t require …","t":[0,4,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,3,6,3,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["binary_heap","Min","Max","BinaryHeap","new","capacity","clear","len","is_empty","iter","iter_mut","peek","peek_mut","pop","pop_unchecked","push","push_unchecked","PeekMut","pop","spsc","Queue","new","capacity","len","is_empty","is_full","iter","iter_mut","enqueue","dequeue","peek","enqueue_unchecked","dequeue_unchecked","split","Iter","IterMut","Consumer","Producer","dequeue","dequeue_unchecked","ready","len","capacity","peek","enqueue","enqueue_unchecked","ready","len","capacity","HistoryBuffer","FnvIndexMap","IndexMap","FnvIndexSet","IndexSet","LinearMap","String","Vec","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","drop","drop","drop","drop","drop","drop","index","index","index_mut","index_mut","hash","hash","hash","from_str","write_str","write_char","write_str","from_iter","from_iter","from_iter","from_iter","next_back","next_back","next","next","into_iter","extend","extend","extend","extend","extend","extend","extend","extend","from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_ref","as_ref","as_ref","as_mut","as_mut","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","hash","hash","hash","new","clear","new_with","clear_with","len","capacity","write","extend_from_slice","recent","as_slice","new","capacity","keys","values","values_mut","iter","iter_mut","len","is_empty","clear","get","contains_key","get_mut","insert","remove","swap_remove","new","capacity","iter","difference","symmetric_difference","intersection","union","len","is_empty","clear","contains","is_disjoint","is_subset","is_superset","insert","remove","new","capacity","clear","contains_key","get","get_mut","len","insert","is_empty","iter","iter_mut","keys","remove","values","values_mut","new","into_bytes","as_str","as_mut_str","as_mut_vec","push_str","capacity","push","truncate","pop","clear","new","from_slice","as_slice","capacity","clear","extend","extend_from_slice","pop","push","push_unchecked","truncate","resize","resize_default","set_len","swap_remove","swap_remove_unchecked","is_full","starts_with","ends_with"],"q":["heapless","heapless::binary_heap","","","","","","","","","","","","","","","","","","heapless","heapless::spsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::spsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless","","","heapless::binary_heap","heapless","","heapless::binary_heap","heapless","","","","","","heapless::binary_heap","heapless::spsc","heapless","","","","","","","","","","","","","","","","heapless::spsc","heapless","","","heapless::binary_heap","","heapless::spsc","heapless","","","","","","heapless::spsc","heapless","","","","","","","","heapless::spsc","","","","heapless","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::binary_heap","heapless::spsc","","heapless","","","","","heapless::binary_heap","heapless","","heapless::spsc","heapless","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A priority queue implemented with a binary heap.","Min-heap","Max-heap","A priority queue implemented with a binary heap.","Creates an empty BinaryHeap as a $K-heap.","Returns the capacity of the binary heap.","Drops all items from the binary heap.","Returns the length of the binary heap.","Checks if the binary heap is empty.","Returns an iterator visiting all values in the underlying …","Returns a mutable iterator visiting all values in the …","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Pushes an item onto the binary heap.","Pushes an item onto the binary heap without first …","Structure wrapping a mutable reference to the greatest …","Removes the peeked value from the heap and returns it.","Fixed capacity Single Producer Single Consumer (SPSC) …","A statically allocated single producer single consumer …","Creates an empty queue with a fixed capacity of <code>N - 1</code>","Returns the maximum number of elements the queue can hold","Returns the number of elements in the queue","Returns <code>true</code> if the queue is empty","Returns <code>true</code> if the queue is full","Iterates from the front of the queue to the back","Returns an iterator that allows modifying each value","Adds an <code>item</code> to the end of the queue","Returns the item in the front of the queue, or <code>None</code> if …","Returns a reference to the item in the front of the queue …","Adds an <code>item</code> to the end of the queue, without checking if …","Returns the item in the front of the queue, without …","Splits a queue into producer and consumer endpoints","An iterator over the items of a queue","A mutable iterator over the items of a queue","A queue “consumer”; it can dequeue items from the …","A queue “producer”; it can enqueue items into the …","Returns the item in the front of the queue, or <code>None</code> if …","Returns the item in the front of the queue, without …","Returns if there are any items to dequeue. When this …","Returns the number of elements in the queue","Returns the maximum number of elements the queue can hold","Returns the item in the front of the queue without …","Adds an <code>item</code> to the end of the queue, returns back the …","Adds an <code>item</code> to the end of the queue, without checking if …","Returns if there is any space to enqueue a new item. When …","Returns the number of elements in the queue","Returns the maximum number of elements the queue can hold","A “history buffer”, similar to a write-only ring …","A <code>heapless::IndexMap</code> using the default FNV hasher","Fixed capacity <code>IndexMap</code>","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","A fixed capacity <code>String</code>","A fixed capacity <code>Vec</codeonstructs a new history buffer.","Clears the buffer, replacing every element with the …","Constructs a new history buffer, where every element is …","Clears the buffer, replacing every element with the given …","Returns the current fill level of the buffer.","Returns the capacity of the buffer, which is the length …","Writes an element to the buffer, overwriting the oldest …","Clones and writes all elements in a slice to the buffer.","Returns a reference to the most recently written value.","Returns the array slice backing the buffer, without …","Creates an empty <code>IndexMap</code>.","Returns the number of elements the map can hold","Return an iterator over the keys of the map, in their …","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Return an iterator over the key-value pairs of the map, …","Return an iterator over the key-value pairs of the map, …","Return the number of key-value pairs in the map.","Returns true if the map contains no elements.","Remove all key-value pairs in the map, while preserving …","Returns a reference to the value corresponding to the key.","Returns true if the map contains a value for the …","Returns a mutable reference to the value corresponding to …","Inserts a key-value pair into the map.","Same as <code>swap_remove</code>","Remove the key-value pair equivalent to <code>key</code> and return …","Creates an empty <code>IndexSet</code>","Returns the number of elements the set can hold","Return an iterator over the values of the set, in their …","Visits the values representing the difference, i.e. the …","Visits the values representing the symmetric difference, …","Visits the values representing the intersection, i.e. the …","Visits the values representing the union, i.e. all the …","Returns the number of elements in the set.","Returns <code>true</code> if the set contains no elements.","Clears the set, removing all values.","Returns <code>true</code> if the set contains a value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>…","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code>…","Examples","Adds a value to the set.","Removes a value from the set. Returns <code>true</code> if the value …","Creates an empty <code>LinearMap</code>","Returns the number of elements that the map can hold","Clears the map, removing all key-value pairs","Returns true if the map contains a value for the …","Returns a reference to the value corresponding to the key","Returns a mutable reference to the value corresponding to …","Returns the number of elements in this map","Inserts a key-value pair into the map.","Returns true if the map contains no elements","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order","Removes a key from the map, returning the value at the …","An iterator visiting all values in arbitrary order","An iterator visiting all values mutably in arbitrary order","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code>","Converts a <code>String</code> into a byte vector.","Extracts a string slice containing the entire string.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","Appends a given string slice onto the end of this <code>String</code>.","Returns the maximum number of elements the String can hold","Appends the given <code>char</code> to the end of this <code>String</code>.","Shortens this <code>String</code> to the specified length.","Removes the last character from the string buffer and …","Truncates this <code>String</code>, removing all contents.","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new vector with a fixed capacity of <code>N</code> and …","Extracts a slice containing the entire vector.","Returns the maximum number of elements the vector can …","Clears the vector, removing all values.","Extends the vec from an iterator.","Clones and appends all elements in a slice to the <code>Vec</code>.","Removes the last element from a vector and returns it, or …","Appends an <code>item</code> to the back of the collection","Appends an <code>item</code> to the back of the collection","Shortens the vector, keeping the first <code>len</code> elements and …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Returns true if the vec is full","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,4,4,4,4,4,4,5,5,5,5,5,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,10,11,2,10,11,2,6,7,8,9,10,11,1,3,10,7,8,9,10,10,10,10,10,10,11,11,11,11,11,11,3,6,9,11,2,1,3,7,9,7,9,10,11,3,10,10,10,11,7,8,9,11,14,15,14,15,11,6,6,7,7,8,8,11,11,10,10,10,10,10,10,10,10,10,6,10,10,11,11,11,11,7,8,9,10,11,1,3,14,7,8,9,10,11,1,10,11,3,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],[["peekmut",3],["option",4]]],[[],["option",4]],[[]],[[],["result",4]],[[]],null,[[["peekmut",3]]],null,null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,null,null,null,[[],["option",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["result",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["indexmap",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[["linearmap",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["queue",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],[["error",3],["result",4]]],[[["char",15]],[["error",3],["result",4]]],[[["str",15]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],[["result",4],["option",4]]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[],["iter",3]],[[["indexset",3]],["difference",3]],[[["indexset",3]]],[[["indexset",3]],["intersection",3]],[[["indexset",3]]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[],[["bool",15],["result",4]]],[[],["bool",15]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],[["result",4],["option",4]]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],[["vec",3],["u8",15]]],[[],["str",15]],[[],["str",15]],[[],["vec",3]],[[["str",15]],["result",4]],[[],["usize",15]],[[["char",15]],["result",4]],[[["usize",15]]],[[],[["char",15],["option",4]]],[[]],[[]],[[],["result",4]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["option",4]],[[],["result",4]],[[]],[[["usize",15]]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]]],"p":[[3,"BinaryHeap"],[3,"PeekMut"],[3,"Queue"],[3,"Consumer"],[3,"Producer"],[3,"HistoryBuffer"],[3,"IndexMap"],[3,"IndexSet"],[3,"LinearMap"],[3,"String"],[3,"Vec"],[4,"Min"],[4,"Max"],[3,"Iter"],[3,"IterMut"]]},\
"heapless_bytes":{"doc":"heapless-bytes","t":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,8,16,8,16,10,6,8,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,10,10,10,10,10,3,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","ArrayLength","ArrayType","IsGreaterOrEqual","Output","is_greater_or_equal","True","Unsigned","U8","U16","U32","U64","USIZE","I8","I16","I32","I64","ISIZE","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","Bytes","Bytes8","Bytes16","Bytes32","Bytes64","new","from","into_inner","into_vec","as_slice","as_mut_slice","try_convert_into","try_from_slice","try_from","insert_slice_at","insert","remove","resize_default","resize_to_capacity","to_bytes","try_to_bytes","from_serialized","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","deref","deref_mut","fmt","eq","partial_cmp","hash","into_iter","from","as_ref","as_mut","clone","default","serialize","deserialize","new","new","new"],"q":["heapless_bytes","heapless_bytes::constsheapless_bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless_bytes::consts","","","","","","","","","","","","","","","","","","","","","","heapless_bytes","","","","","","","heapless_bytes::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless_bytes","","","","","","","","","","","","","","heapless_bytes::consts","",""],"d":["Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","A <strong>type operator</strong> that returns <code>True</code> if <code>Self >= Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","","The <strong>marker trait</strong> for compile time unsigned integers.","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new, empty <code>Bytes<N></code>.","Wrap existing bytes in a <code>Bytes<N></code>.","Unwraps the Vec<u8, N>, same as <code>into_vec</code>.","Unwraps the Vec<u8, N>, same as <code>into_inner</code>.","Returns an immutable slice view.","Returns a mutable slice view.","Low-noise conversion between lengths.","","Some APIs offer an interface of the form …","","","","","","Clone into at least same size byte buffer.","Fallible conversion into differently sized byte buffer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,4,4,4,4,4,4,4,7,6,5,6,7,6,5,6,7,5,6,5,7,6,7,5,7,6,5,5,7,5,6,7,5,6,7,7,7,5,6,5,6,7,7,7,7,6,6,6,5,5,5,5,5,7,7,6,6,7,7,7,7,7,7,5,6,5,6,7,7,5,6,7,7,6,5,7,7,7,7,7,7,7,7,7,6,5,7,6,7,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],null,null,null,null,null,[[]],[[["into",8],["vec",3]]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[]],[[]],[[],[["bytes",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["u8",15]],[["result",4],["u8",15]]],[[["usize",15]],[["result",4],["u8",15]]],[[["usize",15]],["result",4]],[[]],[[],["bytes",3]],[[],[["bytes",3],["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[["vec",3],["u8",15]]],[[]],[[]],[[],["bytes",3]],[[],["bytes",3]],[[],["result",4]],[[],["result",4]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"ArrayLength"],[8,"IsGreaterOrEqual"],[8,"Unsigned"],[3,"Bytes"],[3,"B0"],[3,"B1"],[3,"Z0"]]},\
"hex_literal":{"doc":"This crate provides <code>hex!</code> macro for converting hexadecimal …","t":[14],"n":["hex"],"q":["hex_literal"],"d":["Macro for converting string literal containing …"],"i":[0],"f":[null],"p":[]},\
"hmac":{"doc":"Generic implementation of Hash-based Message …","t":[8,16,10,10,10,11,11,8,16,10,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Mac","OutputSize","update","reset","finalize","finalize_reset","verify","NewMac","KeySize","new","new_from_slice","Hmac","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","clone","new","new_from_slice","update","finalize","reset"],"q":["hmac","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The [<code>Mac</code>] trait defines methods for a Message …","Output size of the [[<code>Mac</code>]]","Update MAC state with the given data.","Reset [<code>Mac</code>] instance.","Obtain the result of a [<code>Mac</code>] computation as a [<code>Output</code>] …","Obtain the result of a [<code>Mac</code>] computation as a [<code>Output</code>] …","Check if tag/code value is correct for the processed …","Instantiate a [<code>Mac</code>] algorithm.","Key size in bytes with which cipher guaranteed to be …","Initialize new MAC instance from key with fixed size.","Initialize new MAC instance from key with variable size.","The <code>Hmac</code> struct represents an HMAC using a given hash …","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,[[]],[[]],[[],["output",3]],[[],["output",3]],[[],[["result",4],["macerror",3]]],null,null,[[["genericarray",3]]],[[],[["invalidkeylength",3],["result",4]]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[],["hmac",3]],[[["genericarray",3]]],[[],[["result",4],["invalidkeylength",3]]],[[]],[[],["output",3]],[[]]],"p":[[8,"Mac"],[8,"NewMac"],[3,"Hmac"]]},\
"interchange":{"doc":"Implement a somewhat convenient and somewhat efficient …","t":[4,13,13,13,13,13,13,8,18,16,16,10,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["State","Idle","BuildingRequest","Requested","BuildingResponse","Responded","Canceled","Interchange","CLIENT_CAPACITY","REQUEST","RESPONSE","claim","unclaimed_clients","reset_claims","Requester","Responder","state","request","cancel","response","take_response","request_mut","send_request","state","request","take_request","is_canceled","acknowledge_cancel","respond","response_mut","send_response","interchange","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","eq","eq","from","clone"],"q":["interchange","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["State of the RPC interchange","The requester may send a new request.","The requester is building a request, using the …","The request is pending either processing by responder or …","The responder is building a response, using the …","The responder sent a response.","The requester canceled the request. Responder needs to …","Do NOT implement this yourself! Use the macro <code>interchange!</code>…","","","","This is the constructor for a <code>(Requester, Responder)</code> pair.","Method for debugging: how many allocated clients have not …","Method purely for testing - do not use in production","Requesting end of the RPC interchange.","Processing end of the RPC interchange.","Current state of the interchange.","Send a request to the responder.","Attempt to cancel a request.","Look for a response. If the responder has sent a …","Look for a response. If the responder has sent a …","If the interchange is idle, may build request into the …","Send a request that was already placed in the interchange …","Current state of the interchange.","If there is a request waiting, take a reference to it out","If there is a request waiting, take a reference to it out","","","Respond to a request.","If there is a request waiting that no longer needs to be …","Send a response that was already placed in the …","Use this macro to generate a pair of RPC pipes for any …","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,2,2,2,2,2,2,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,0,1,1,1,1,1,1,1,3,3,3,3,3,3,3,4,4,4,4,4,4,4,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["usize",15]],[[]],null,null,[[],["state",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["state",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["result",4]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["state",4]],["bool",15]],[[["u8",15]],["bool",15]],[[["u8",15]]],[[],["state",4]]],"p":[[4,"State"],[8,"Interchange"],[3,"Requester"],[3,"Responder"]]},\
"littlefs2":{"doc":"littlefs is a filesystem for microcontrollers written in …","t":[0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,17,17,17,17,17,17,0,8,18,18,18,18,18,16,16,16,16,18,16,10,10,10,0,6,3,11,3,4,13,13,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,3,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,3,11,3,11,11,11,11,11,11,11,11,11,11,0,0,8,10,11,8,10,10,11,4,13,13,13,8,10,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,5,0,3,11,11,11,11,11,11,11,11,3,11,11,11,4,13,13,13,6,5,3,12,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["macros","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","FILENAME_MAX_PLUS_ONE","PATH_MAX","PATH_MAX_PLUS_ONE","FILEBYTES_MAX","ATTRBYTES_MAX","LOOKAHEADWORDS_SIZE","driver","Storage","READ_SIZE","WRITE_SIZE","BLOCK_SIZE","BLOCK_COUNT","BLOCK_CYCLES","CACHE_SIZE","LOOKAHEADWORDS_SIZE","FILENAME_MAX_PLUS_ONE","PATH_MAX_PLUS_ONE","FILEBYTES_MAX","ATTRBYTES_MAX","read","write","erase","fs","Bytes","Allocation","new","Filesystem","FileType","File","Dir","is_dir","is_file","Metadata","file_type","is_dir","is_file","len","is_empty","allocate","format","is_mountable","borrow_storage_mut","mount_and_then","total_blocks","total_space","available_blocks","available_space","remove","remove_dir","remove_dir_all","remove_dir_all_where","rename","metadata","create_file_and_then","open_file_and_then","with_options","open_file_with_options_and_then","attribute","remove_attribute","set_attribute","Attribute","new","id","data","set_data","FileAllocation","new","File","allocate","with_options","open","open_and_then","create","create_and_then","borrow_filesystem","close","sync","len","set_len","read_to_end","read","seek","write","OpenOptions","open","open_and_then","new","read","write","append","create","create_new","truncate","DirEntry","metadata","file_type","file_name","path","ReadDirAllocation","new","ReadDir","borrow_filesystem","close","read_dir_and_then","read_dir","mount","into_inner","create_dir","create_dir_all","read","write","io","prelude","Read","read","read_exact","Write","write","flush","write_all","SeekFrom","Start","End","Current","Seek","seek","Result","Error","Io","Corruption","NoSuchEntry","EntryAlreadyExisted","PathNotDir","PathIsDir","DirNotEmpty","BadFileDescriptor","FileTooBig","Invalid","NoSpace","NoMemory","NoAttribute","FilenameTooLong","Unknown","result_from","path","Path","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_cstr","from_cstr_unchecked","join","exists","as_str_ref_with_trailing_nul","parent","PathBuf","new","clear","push","Error","NotAscii","NotCStr","TooLarge","Result","version","Version","format","backend","try_debug","try_error","try_info","try_trace","try_warn","log","debug","error","info","trace","warn","log_now","debug_now","error_now","info_now","trace_now","warn_now","try_log_now","try_debug_now","try_error_now","try_info_now","try_trace_now","try_warn_now","ram_storage","const_ram_storage","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","read","write","flush","seek","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","hash","next","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","as_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","new","new","new"],"q":["littlefs2","","littlefs2::constslittlefs2","littlefs2::driver","","","","","","","","","","","","","","","littlefs2","littlefs2::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2","littlefs2::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2","littlefs2::path","","","","","","","","","","","","","","","","","","littlefs2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2::consts","","","","","","","","","","","","","","","","","","","","","","littlefs2::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2::io","","","","","","","","","","","","","","littlefs2::path","","","","","","","","","","","","","","","","","littlefs2","","","","","","","littlefs2::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2::fs","","","","littlefs2::path","littlefs2::fs","","","","","littlefs2::io","","littlefs2::path","","","littlefs2","littlefs2::path","","littlefs2::fs","","","","","","","","","littlefs2::io","","","","littlefs2::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2::fs","","","littlefs2::io","littlefs2::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","littlefs2::fs","","","","","littlefs2::io","","littlefs2::path","","littlefs2","littlefs2::fs","","","","littlefs2::path","littlefs2::fs","","","littlefs2::path","littlefs2::consts","",""],"d":["cf. Macros documentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","","","","","","","The <code>Storage</code>, <code>Read</code>, <code>Write</code> and <code>Seek</code> driver.","Users of this library provide a “storage driver” by …","Minimum size of block read in bytes. Not in superblock","Minimum size of block write in bytes. Not in superblock","Size of an erasable block in bytes, as unsigned typenum. …","Number of erasable blocks. Hence storage capacity is …","Suggested values are 100-1000, higher is more performant …","littlefs uses a read cache, a write cache, and one cache …","littlefs itself has a <code>LOOKAHEAD_SIZE</code>, which must be a …","Maximum length of a filename plus one. Stored in …","Maximum length of a path plus one. Necessary to convert …","Maximum size of file. Stored in superblock. Defaults to …","Maximum size of custom attributes. Should default to …","Read data from the storage device. Guaranteed to be …","Write data to the storage device. Guaranteed to be called …","Erase data from the storage device. Guaranteed to be …","Experimental Filesystem version using closures.","","","","","Regular file vs directory","","","","","File type (regular vs directory) and size of a file.","","","","","","","","","","This API avoids the need for using <code>Allocation</code>.","Total number of blocks in the filesystem","Total number of bytes in the filesystem","Available number of unused blocks in the filesystem","Available number of unused bytes in the filesystem","Remove a file or directory.","Remove a file or directory.","TODO: This method fails if some <code>println!</code> calls are …","","Rename or move a file or directory.","Given a path, query the filesystem to get information …","","","","","Read attribute.","Remove attribute.","Set attribute.","Custom user attribute that can be set on files and …","","","","","The state of a <code>File</code>. Pre-allocate with <code>File::allocate</code>.","","","","Returns a new OpenOptions object.","","","","","","Sync the file and drop it from the internal linked list. …","Synchronize file contents to storage.","Size of the file in bytes.","Truncates or extends the underlying file, updating the …","","","","","Options and flags which can be used to configure how a …","Open the file with the options previously specified, …","(Hopefully) safe abstraction around <code>open</code>.","","","","","","","","","","","","Returns the full path to the file that this entry …","","","","","","","Returns a pseudo-iterator over the entries within a …","","Deconstruct <code>Filesystem</code>, intention is to allow access to …","Creates a new, empty directory at the provided path.","Recursively create a directory and all of its parent …","Read the entire contents of a file into a bytes vector.","Write a slice as the entire contents of a file.","Traits and types for core I/O functionality.","Export of the Read, Write and Seek traits for ease of use.","The <code>Read</code> trait allows for reading bytes from a file.","Read at most buf.len() bytes. Upon success, return how …","","The <code>Write</code> trait allows for writing bytes to a file.","Write at most data.len() bytes. The file will not …","Write out all pending writes to storage.","","Enumeration of possible methods to seek within an I/O …","","","","The <code>Seek</code> trait provides a cursor which can be moved …","Seek to an offset in bytes. If successful, returns the …","","Definition of errors that might be returned by filesystem …","Input / output error occurred.","File or filesystem was corrupt.","No entry found with that name.","File or directory already exists.","Path name is not a directory.","Path specification is to a directory.","Directory was not empty.","Bad file descriptor.","File is too big.","Incorrect value specified to function.","No space left available for operation.","No memory available for completing request.","No attribute or data available","Filename too long","Unknown error occurred, integer code specified.","","Paths","A path","Creates a path from a byte buffer","Unchecked version of <code>from_bytes_with_nul</code>","Creates a path from a C string","Unchecked version of <code>from_cstr</code>","Creates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.","","","","An owned, mutable path","","","Extends <code>self</code> with <code>path</code>","Errors that arise from converting byte buffers into paths","Byte buffer contains non-ASCII characters","Byte buffer is not a C string","Byte buffer is too long (longer than …","Result type that has its Error variant set to <code>path::Error</code>","get information about the C backend","Information about the C backend","On-disk format (currently: 2.0)","Backend release (currently: 2.1)","Fallible version of <code>debug!</code>.","Fallible version of <code>error!</code>.","Fallible version of <code>info!</code>.","Fallible version of <code>trace!</code>.","Fallible version of <code>warn!</code>.","Local version of <code>log!</code>.","Local version of <code>debug!</code>.","Local version of <code>error!</code>.","Local version of <code>info!</code>.","Local version of <code>trace!</code>.","Local version of <code>warn!</code>.","Immediate version of <code>log!</code>.","Immediate version of <code>debug!</code>.","Immediate version of <code>error!</code>.","Immediate version of <code>info!</code>.","Immediate version of <code>trace!</code>.","Immediate version of <code>warn!</code>.","Fallible immediate version of <code>log!</code>.","Fallible immediate version of <code>debug!</code>.","Fallible immediate version of <code>error!</code>.","Fallible immediate version of <code>info!</code>.","Fallible immediate version of <code>trace!</code>.","Fallible immediate version of <code>warn!</code>.","A configurable implementation of the Storage trait in …ccepts byte string, with or without trailing nul.","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0,0,3,3,3,3,0,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,0,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,0,10,10,10,10,0,11,0,12,12,5,5,5,5,5,5,5,5,0,0,0,13,13,0,14,14,14,0,15,15,15,0,16,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,18,18,18,18,18,18,18,18,0,19,19,19,0,20,20,20,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,2,2,2,2,2,2,2,5,5,5,5,5,5,5,3,3,3,3,3,3,3,4,4,4,4,4,4,4,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,15,15,15,15,15,15,15,17,17,17,17,17,17,17,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,24,23,22,23,24,23,22,23,24,22,23,22,24,23,24,22,24,23,22,22,24,22,23,24,22,23,24,24,24,22,23,22,23,24,24,24,24,23,23,23,22,22,22,22,22,24,24,23,23,24,24,24,24,24,24,22,23,22,23,24,24,22,23,24,24,23,22,24,24,24,24,24,24,24,24,24,23,22,24,23,24,22,8,8,8,8,19,3,4,6,9,10,15,17,18,19,20,21,18,19,3,4,4,6,6,9,9,10,10,15,15,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,3,12,4,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,18,3,4,6,9,10,15,17,19,20,21,9,3,4,10,19,3,4,10,19,22,23,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["usize",15],["result",6]]],[[["usize",15]],[["usize",15],["result",6]]],[[["usize",15]],[["usize",15],["result",6]]],null,null,null,[[],["allocation",3]],null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,[[],["filetype",4]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["bool",15]],[[],["allocation",3]],[[],["result",6]],[[],["bool",15]],[[]],[[],["result",6]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[["path",3]],["result",6]],[[["path",3]],["result",6]],[[["path",3]],["result",6]],[[["path",3]],[["usize",15],["result",6]]],[[["path",3]],["result",6]],[[["path",3]],[["result",6],["metadata",3]]],[[["path",3]],["result",6]],[[["path",3]],["result",6]],[[],["openoptions",3]],[[["path",3]],["result",6]],[[["path",3],["u8",15]],[["option",4],["result",6]]],[[["path",3],["u8",15]],["result",6]],[[["path",3],["attribute",3]],["result",6]],null,[[["u8",15]]],[[],["u8",15]],[[]],[[]],null,[[]],null,[[],["fileallocation",3]],[[],["openoptions",3]],[[["path",3],["filesystem",3],["fileallocation",3]],["result",6]],[[["path",3],["filesystem",3]],["result",6]],[[["path",3],["filesystem",3],["fileallocation",3]],["result",6]],[[["path",3],["filesystem",3]],["result",6]],[[],["filesystem",3]],[[],["result",6]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[["usize",15]],["result",6]],[[["vec",3]],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[["seekfrom",4]],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],null,[[["path",3],["filesystem",3],["fileallocation",3]],[["file",3],["result",6]]],[[["path",3],["filesystem",3]],["result",6]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,[[],["metadata",3]],[[],["filetype",4]],[[],["path",3]],[[],["path",3]],null,[[]],null,[[],["filesystem",3]],[[],["result",6]],[[["path",3]],["result",6]],[[["path",3],["readdirallocation",3]],[["result",6],["readdir",3]]],[[["allocation",3]],["result",6]],[[]],[[["path",3]],["result",6]],[[["path",3]],["result",6]],[[["path",3]],[["result",6],["vec",3]]],[[["path",3]],["result",6]],null,null,null,[[],[["usize",15],["result",6]]],[[],["result",6]],null,[[],[["usize",15],["result",6]]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,[[["seekfrom",4]],[["usize",15],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["lfs_error",6]],[["result",6],["u32",15]]],null,null,[[],["result",6]],[[]],[[["cstr",3]],["result",6]],[[["cstr",3]]],[[["path",3]],["pathbuf",3]],[[["filesystem",3]],["bool",15]],[[],["str",15]],[[],[["option",4],["pathbuf",3]]],null,[[]],[[]],[[["path",3]]],null,null,null,null,null,[[],["version",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[["seekfrom",4]],[["usize",15],["result",6]]],[[],["path",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["filetype",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadata",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["openoptions",3]],["bool",15]],[[["openoptions",3]],["bool",15]],[[["direntry",3]],["bool",15]],[[["direntry",3]],["bool",15]],[[["seekfrom",4]],["bool",15]],[[["seekfrom",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["option",4]],[[["lfs_info",3]]],[[["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["path",3]]],[[]],[[["str",15]]],[[],["str",15]],[[],["filetype",4]],[[],["metadata",3]],[[],["attribute",3]],[[],["openoptions",3]],[[],["direntry",3]],[[],["seekfrom",4]],[[],["error",4]],[[],["pathbuf",3]],[[],["error",4]],[[],["version",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"Storage"],[3,"Allocation"],[4,"FileType"],[3,"Metadata"],[3,"Filesystem"],[3,"Attribute"],[3,"FileAllocation"],[3,"File"],[3,"OpenOptions"],[3,"DirEntry"],[3,"ReadDirAllocation"],[3,"ReadDir"],[8,"Read"],[8,"Write"],[4,"SeekFrom"],[8,"Seek"],[4,"Error"],[3,"Path"],[3,"PathBuf"],[4,"Error"],[3,"Version"],[3,"B0"],[3,"B1"],[3,"Z0"]]},\
"littlefs2_sys":{"doc":"","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,12,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,17,17,17,17,17,17,17,17,17,17,6,17,17,17,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,12,6,3,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,6,3,12,12,12,12,12,12,6,3,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,3,12,12,12,12,12,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["lfs_format","lfs_mount","lfs_unmount","lfs_remove","lfs_rename","lfs_stat","lfs_getattr","lfs_setattr","lfs_removeattr","lfs_file_open","lfs_file_opencfg","lfs_file_close","lfs_file_sync","lfs_file_read","lfs_file_write","lfs_file_seek","lfs_file_truncate","lfs_file_tell","lfs_file_rewind","lfs_file_size","lfs_mkdir","lfs_dir_open","lfs_dir_close","lfs_dir_read","lfs_dir_seek","lfs_dir_tell","lfs_dir_rewind","lfs_fs_size","lfs_fs_traverse","_STDINT_H","_FEATURES_H","_DEFAULT_SOURCE","__GLIBC_USE_ISOC2X","__USE_ISOC11","__USE_ISOC99","__USE_ISOC95","__USE_POSIX_IMPLICITLY","_POSIX_SOURCE","_POSIX_C_SOURCE","__USE_POSIX","__USE_POSIX2","__USE_POSIX199309","__USE_POSIX199506","__USE_XOPEN2K","__USE_XOPEN2K8","_ATFILE_SOURCE","__USE_MISC","__USE_ATFILE","__USE_FORTIFY_LEVEL","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","_STDC_PREDEF_H","__STDC_IEC_559__","__STDC_IEC_559_COMPLEX__","__STDC_ISO_10646__","__GNU_LIBRARY__","__GLIBC__","__GLIBC_MINOR__","_SYS_CDEFS_H","__glibc_c99_flexarr_available","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__SYSCALL_WORDSIZE","__LONG_DOUBLE_USES_FLOAT128","__HAVE_GENERIC_SELECTION","__GLIBC_USE_LIB_EXT2","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","_BITS_TYPES_H","__TIMESIZE","_BITS_TYPESIZES_H","__OFF_T_MATCHES_OFF64_T","__INO_T_MATCHES_INO64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__FD_SETSIZE","_BITS_TIME64_H","_BITS_WCHAR_H","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","INT8_MIN","INT16_MIN","INT32_MIN","INT8_MAX","INT16_MAX","INT32_MAX","UINT8_MAX","UINT16_MAX","UINT32_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","UINT_LEAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","SIZE_MAX","WINT_MIN","WINT_MAX","true_","false_","__bool_true_false_are_defined","LFS_VERSION","LFS_VERSION_MAJOR","LFS_VERSION_MINOR","LFS_DISK_VERSION","LFS_DISK_VERSION_MAJOR","LFS_DISK_VERSION_MINOR","LFS_NAME_MAX","LFS_FILE_MAX","LFS_ATTR_MAX","__u_char","__u_short","__u_int","__u_long","__int8_t","__uint8_t","__int16_t","__uint16_t","__int32_t","__uint32_t","__int64_t","__uint64_t","__int_least8_t","__uint_least8_t","__int_least16_t","__uint_least16_t","__int_least32_t","__uint_least32_t","__int_least64_t","__uint_least64_t","__quad_t","__u_quad_t","__intmax_t","__uintmax_t","__dev_t","__uid_t","__gid_t","__ino_t","__ino64_t","__mode_t","__nlink_t","__off_t","__off64_t","__pid_t","__fsid_t","__val","__clock_t","__rlim_t","__rlim64_t","__id_t","__time_t","__useconds_t","__suseconds_t","__daddr_t","__key_t","__clockid_t","__timer_t","__blksize_t","__blkcnt_t","__blkcnt64_t","__fsblkcnt_t","__fsblkcnt64_t","__fsfilcnt_t","__fsfilcnt64_t","__fsword_t","__ssize_t","__syscall_slong_t","__syscall_ulong_t","__loff_t","__caddr_t","__intptr_t","__socklen_t","__sig_atomic_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intmax_t","uintmax_t","lfs_size_t","lfs_off_t","lfs_ssize_t","lfs_soff_t","lfs_block_t","lfs_error_LFS_ERR_OK","lfs_error_LFS_ERR_IO","lfs_error_LFS_ERR_CORRUPT","lfs_error_LFS_ERR_NOENT","lfs_error_LFS_ERR_EXIST","lfs_error_LFS_ERR_NOTDIR","lfs_error_LFS_ERR_ISDIR","lfs_error_LFS_ERR_NOTEMPTY","lfs_error_LFS_ERR_BADF","lfs_error_LFS_ERR_FBIG","lfs_error_LFS_ERR_INVAL","lfs_error_LFS_ERR_NOSPC","lfs_error_LFS_ERR_NOMEM","lfs_error_LFS_ERR_NOATTR","lfs_error_LFS_ERR_NAMETOOLONG","lfs_error","lfs_type_LFS_TYPE_REG","lfs_type_LFS_TYPE_DIR","lfs_type_LFS_TYPE_SPLICE","lfs_type_LFS_TYPE_NAME","lfs_type_LFS_TYPE_STRUCT","lfs_type_LFS_TYPE_USERATTR","lfs_type_LFS_TYPE_FROM","lfs_type_LFS_TYPE_TAIL","lfs_type_LFS_TYPE_GLOBALS","lfs_type_LFS_TYPE_CRC","lfs_type_LFS_TYPE_CREATE","lfs_type_LFS_TYPE_DELETE","lfs_type_LFS_TYPE_SUPERBLOCK","lfs_type_LFS_TYPE_DIRSTRUCT","lfs_type_LFS_TYPE_CTZSTRUCT","lfs_type_LFS_TYPE_INLINESTRUCT","lfs_type_LFS_TYPE_SOFTTAIL","lfs_type_LFS_TYPE_HARDTAIL","lfs_type_LFS_TYPE_MOVESTATE","lfs_type_LFS_FROM_NOOP","lfs_type_LFS_FROM_MOVE","lfs_type_LFS_FROM_USERATTRS","lfs_type","lfs_open_flags_LFS_O_RDONLY","lfs_open_flags_LFS_O_WRONLY","lfs_open_flags_LFS_O_RDWR","lfs_open_flags_LFS_O_CREAT","lfs_open_flags_LFS_O_EXCL","lfs_open_flags_LFS_O_TRUNC","lfs_open_flags_LFS_O_APPEND","lfs_open_flags_LFS_F_DIRTY","lfs_open_flags_LFS_F_WRITING","lfs_open_flags_LFS_F_READING","lfs_open_flags_LFS_F_ERRED","lfs_open_flags_LFS_F_INLINE","lfs_open_flags_LFS_F_OPENED","lfs_open_flags","lfs_whence_flags_LFS_SEEK_SET","lfs_whence_flags_LFS_SEEK_CUR","lfs_whence_flags_LFS_SEEK_END","lfs_whence_flags","lfs_config","context","read","prog","erase","sync","read_size","prog_size","block_size","block_count","block_cycles","cache_size","lookahead_size","read_buffer","prog_buffer","lookahead_buffer","name_max","file_max","attr_max","lfs_info","type_","size","name","lfs_attr","type_","buffer","size","lfs_file_config","buffer","attrs","attr_count","lfs_cache","block","off","size","buffer","lfs_cache_t","lfs_mdir","pair","rev","off","etag","count","erased","split","tail","lfs_mdir_t","lfs_dir","next","id","type_","m","pos","head","lfs_dir_t","lfs_file","next","id","type_","m","ctz","flags","pos","block","off","cache","cfg","lfs_file_lfs_ctz","head","size","lfs_file_t","lfs_superblock","version","block_size","block_count","name_max","file_max","attr_max","lfs_superblock_t","lfs_gstate","tag","pair","lfs_gstate_t","lfs","rcache","pcache","root","mlist","seed","gstate","gdisk","gdelta","free","cfg","name_max","file_max","attr_max","lfs_lfs_mlist","next","id","type_","m","lfs_lfs_free","off","size","i","ack","buffer","lfs_t","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone"],"q":["littlefs2_sysd":["Filesystem functions ///","","","General operations ///","","","","","","File operations ///","","","","","","","","","","","Directory operations ///","","","","","","","Filesystem-level filesystem operations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Definitions ///","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","internal littlefs data structures ///","","","","","internal littlefs data structuresi":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,0,4,4,4,0,5,5,5,0,6,6,6,6,0,0,7,7,7,7,7,7,7,7,0,0,8,8,8,8,8,8,0,0,9,9,9,9,9,9,9,9,9,9,9,0,10,10,0,0,11,11,11,11,11,11,0,0,12,12,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,0,15,15,15,15,15,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,1,2,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["__fsid_t",3]],[[],["lfs_config",3]],[[],["lfs_info",3]],[[],["lfs_attr",3]],[[],["lfs_file_config",3]],[[],["lfs_cache",3]],[[],["lfs_mdir",3]],[[],["lfs_dir",3]],[[],["lfs_file",3]],[[],["lfs_file_lfs_ctz",3]],[[],["lfs_superblock",3]],[[],["lfs_gstate",3]],[[],["lfs",3]],[[],["lfs_lfs_mlist",3]],[[],["lfs_lfs_free",3]]],"p":[[3,"__fsid_t"],[3,"lfs_config"],[3,"lfs_info"],[3,"lfs_attr"],[3,"lfs_file_config"],[3,"lfs_cache"],[3,"lfs_mdir"],[3,"lfs_dir"],[3,"lfs_file"],[3,"lfs_file_lfs_ctz"],[3,"lfs_superblock"],[3,"lfs_gstate"],[3,"lfs"],[3,"lfs_lfs_mlist"],[3,"lfs_lfs_free"]]},\
"log":{"doc":"A lightweight logging facade.","t":[4,13,13,13,13,13,11,11,11,4,13,13,13,13,13,13,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,3,11,11,11,11,8,10,10,10,5,5,5,5,3,3,5,17,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Level","Error","Warn","Info","Debug","Trace","max","to_level_filter","as_str","LevelFilter","Off","Error","Warn","Info","Debug","Trace","max","to_level","as_str","Record","builder","args","metadata","level","target","module_path","module_path_static","file","file_static","line","RecordBuilder","new","args","metadata","level","target","module_path","module_path_static","file","file_static","line","build","Metadata","builder","level","target","MetadataBuilder","new","level","target","build","Log","enabled","log","flush","set_max_level","max_level","set_logger","set_logger_racy","SetLoggerError","ParseLevelError","logger","STATIC_MAX_LEVEL","log","error","warn","info","debug","trace","log_enabled","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","cmp","cmp","cmp","cmp","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","partial_cmp","partial_cmp","hash","hash","hash","hash","from_str","from_str","clone","clone","clone","clone"],"q":["logd":["An enum representing the available verbosity levels of …","The “error” level.","The “warn” level.","The “info” level.","The “debug” level.","The “trace” level.","Returns the most verbose logging level.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Returns the string representation of the <code>Level</code>.","An enum representing the available verbosity level …","A level lower than all log levels.","Corresponds to the <code>Error</code> log level.","Corresponds to the <code>Warn</code> log level.","Corresponds to the <code>Info</code> log level.","Corresponds to the <code>Debug</code> log level.","Corresponds to the <code>Trace</code> log level.","Returns the most verbose logging level filter.","Converts <code>self</code> to the equivalent <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","The “payload” of a log message.","Returns a new builder.","The message body.","Metadata about the log directive.","The verbosity level of the message.","The name of the target of the directive.","The module path of the message.","The module path of the message, if it is a <code>\'static</code> string.","The source file containing the message.","The module path of the message, if it is a <code>\'static</code> string.","The line containing the message.","Builder for <code>Record</code>.","Construct new <code>RecordBuilder</code>.","Set <code>args</code>.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","Set <code>Metadata::level</code>.","Set <code>Metadata::target</code>","Set <code>module_path</code>","Set <code>module_path</code> to a <code>\'static</code> string","Set <code>file</code>","Set <code>file</code> to a <code>\'static</code> string.","Set <code>line</code>","Invoke the builder and return a <code>Record</code>","Metadata about a log message.","Returns a new builder.","The verbosity level of the message.","The name of the target of the directive.","Builder for <code>Metadata</code>.","Construct a new <code>MetadataBuilder</code>.","Setter for <code>level</code>.","Setter for <code>target</code>.","Returns a <code>Metadata</code> object.","A trait encapsulating the operations required of a logger.","Determines if a log message with the specified metadata …","Logs the <code>Record</code>.","Flushes any buffered records.","Sets the global maximum log level.","Returns the current maximum log level.","Sets the global logger to a <code>&\'static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The type returned by <code>from_str</code> when the string doesn’t …","Returns a reference to the logger.","The statically resolved maximum log level.","The standard logging macro.","Logs a message at the error level.","Logs a message at the warn level.","Logs a message at the info level.","Logs a message at the debug level.","Logs a message at the trace level.","Determines if a message logged at the specified level in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,0,6,6,6,6,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,8,8,8,8,8,8,8,9,9,9,9,9,9,9,1,2,3,4,5,6,8,9,1,2,8,9,1,1,2,2,5,5,6,6,9,9,1,2,5,6,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,5,6,1,2,5,6,1,2,1,2,3,5],"f":[null,null,null,null,null,null,[[],["level",4]],[[],["levelfilter",4]],[[],["str",15]],null,null,null,null,null,null,null,[[],["levelfilter",4]],[[],[["level",4],["option",4]]],[[],["str",15]],null,[[],["recordbuilder",3]],[[],["arguments",3]],[[],["metadata",3]],[[],["level",4]],[[],["str",15]],[[],[["option",4],["str",15]]],[[],[["str",15],["option",4]]],[[],[["option",4],["str",15]]],[[],[["str",15],["option",4]]],[[],[["u32",15],["option",4]]],null,[[],["recordbuilder",3]],[[["arguments",3]],["recordbuilder",3]],[[["metadata",3]],["recordbuilder",3]],[[["level",4]],["recordbuilder",3]],[[["str",15]],["recordbuilder",3]],[[["option",4],["str",15]],["recordbuilder",3]],[[["str",15],["option",4]],["recordbuilder",3]],[[["option",4],["str",15]],["recordbuilder",3]],[[["str",15],["option",4]],["recordbuilder",3]],[[["u32",15],["option",4]],["recordbuilder",3]],[[],["record",3]],null,[[],["metadatabuilder",3]],[[],["level",4]],[[],["str",15]],null,[[],["metadatabuilder",3]],[[["level",4]],["metadatabuilder",3]],[[["str",15]],["metadatabuilder",3]],[[],["metadata",3]],null,[[["metadata",3]],["bool",15]],[[["record",3]]],[[]],[[["levelfilter",4]]],[[],["levelfilter",4]],[[["log",8]],[["setloggererror",3],["result",4]]],[[["log",8]],[["setloggererror",3],["result",4]]],null,null,[[],["log",8]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],[[["level",4]],["ordering",4]],[[["levelfilter",4]],["ordering",4]],[[["metadata",3]],["ordering",4]],[[["metadatabuilder",3]],["ordering",4]],[[["level",4]],[["ordering",4],["option",4]]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],[["ordering",4],["option",4]]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],[["ordering",4],["option",4]]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],[["ordering",4],["option",4]]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["metadata",3]],[["ordering",4],["option",4]]],[[["metadatabuilder",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["level",4]]],[[["str",15]],[["levelfilter",4],["result",4]]],[[],["level",4]],[[],["levelfilter",4]],[[],["record",3]],[[],["metadata",3]]],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[8,"Log"],[3,"SetLoggerError"],[3,"ParseLevelError"]]},\
"memchr":{"doc":"This crate defines two functions, <code>memchr</code> and <code>memrchr</code>, …","t":[3,11,5,5,3,11,5,3,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Memchr","new","memchr","memrchr","Memchr2","new","memchr2","Memchr3","new","memchr3","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","next_back","next","next","next"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for memchr","Creates a new iterator that yields all positions of …","A safe interface to <code>memchr</code>.","A safe interface to <code>memrchr</code>.","An iterator for Memchr2","Creates a new iterator that yields all positions of …","Like <code>memchr</code>, but searches for two bytes instead of one.","An iterator for Memchr3","Create a new Memchr2 that’s initalized to zero with a …","Like <code>memchr</code>, but searches for three bytes instead of one.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,2,0,0,3,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,1,1,2,3],"f":[null,[[["u8",15]],["memchr",3]],[[["u8",15]],[["usize",15],["option",4]]],[[["u8",15]],[["usize",15],["option",4]]],null,[[["u8",15]],["memchr2",3]],[[["u8",15]],[["usize",15],["option",4]]],null,[[["u8",15]],["memchr3",3]],[[["u8",15]],[["usize",15],["option",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]},\
"nb":{"doc":"Minimal and reusable non-blocking I/O layer","t":[6,4,13,13,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Result","Error","Other","WouldBlock","map","block","borrow","borrow_mut","try_from","from","from","into","try_into","type_id","fmt","eq","ne","cmp","partial_cmp","hash","from","clone"],"q":["nb","","","","","","","","","","","","","","","","","","","","",""],"d":["A non-blocking result","A non-blocking error","A different kind of error","This operation requires blocking behavior to complete","Maps an <code>Error<E></code> to <code>Error<T></code> by applying a function to a …","Turns the non-blocking expression <code>$e</code> into a blocking …","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[],["error",4]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["ordering",4]],[[["error",4]],[["ordering",4],["option",4]]],[[]],[[],["error",4]],[[],["error",4]]],"p":[[4,"Error"]]},\
"opaque_debug":{"doc":"Macro for opaque <code>Debug</code> trait implementation.","t":[14],"n":["implement"],"q":["opaque_debug"],"d":["Macro for defining opaque <code>Debug</code> implementation."],"i":[0],"f":[null],"p":[]},\
"p256":{"doc":"Pure Rust implementation of the NIST P-256 elliptic curve,…","t":[0,6,6,0,3,6,6,6,6,3,3,3,6,3,6,3,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ecdh","EphemeralSecret","SharedSecret","ecdsa","Error","Signature","DerSignature","SigningKey","VerifyingKey","AffinePoint","ProjectivePoint","BlindedScalar","NonZeroScalar","Scalar","ScalarBits","NistP256","FieldBytes","EncodedPoint","PublicKey","SecretKey","SecretBytes","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","conditional_negate","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","invert","conditional_negate","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","default","fmt","fmt","fmt","fmt","fmt","sub","sub","sub","sub","sub","sub","eq","eq","eq","eq","cmp","cmp","partial_cmp","partial_cmp","add","add","add","add","add","add","mul","mul","mul","mul","mul","neg","neg","neg","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","drop","borrow","sum","sum","from","from","from","from","from","from","from","from","clone","clone","clone","clone","default","default","default","default","invert","from_encoded_point","to_encoded_point","conditional_select","conditional_select","conditional_select","from_repr","to_repr","to_le_bits","is_odd","char_le_bits","multiplicative_generator","root_of_unity","decompress","random","identity","generator","is_identity","double","zeroize","zeroize","zeroize","to_affine","ct_eq","ct_eq","ct_eq","random","zero","one","is_zero","square","double","invert","sqrt","try_sign_prehashed","verify_prehashed","from_digest","generator","identity","is_identity","identity","generator","to_affine","double","new","zero","one","from_bytes_reduced","to_bytes","is_zero","add","double","subtract","mul","square","pow_vartime","invert","is_odd","is_even","invert_vartime","new"],"q":["p256","p256::ecdh","","p256","p256::ecdsa","","","","","p256","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p256::ecdsa","","","","","","","p256","","","","","","","p256::ecdsa","","","p256","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","p256::ecdsa"],"d":["Elliptic Curve Diffie-Hellman (Ephemeral) Support.","NIST P-256 Ephemeral Diffie-Hellman Secret.","Shared secret value computed via ECDH key agreement.","Elliptic Curve Digital Signature Algorithm (ECDSA)","Signature errors.","ECDSA/P-256 signature (fixed-size)","ECDSA/P-256 signature (ASN.1 DER encoded)","ECDSA/P-256 signing key","ECDSA/P-256 verification key (i.e. public key)","A point on the secp256r1 curve in affine coordinates.","A point on the secp256r1 curve in projective coordinates.","Scalar blinded with a randomly generated masking value.","Non-zero scalar value.","An element in the finite field modulo n.","NIST P-256 field element serialized as bits.","NIST P-256 elliptic curve.","NIST P-256 field element serialized as bytes.","NIST P-256 SEC1 encoded point.","NIST P-256 public key.","NIST P-256 secret key.","Bytes containing a NIST P-256 secret scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the SEC1 compressed encoding of this point.","","","","","","","","","","","","","","","","","Attempts to parse the given [<code>EncodedPoint</code>] as an …","","","","","Attempts to parse the given byte array as an SEC1-encoded …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the output of a digest algorithm into a [<code>Scalar</code>] …","Returns the base point of P-256.","Returns the identity of the group: the point at infinity.","Is this point the identity point?","Returns the additive identity of P-256, also known as the …","Returns the base point of P-256.","Returns the affine representation of this point, or <code>None</code> …","Doubles this point.","Create a new [<code>BlindedScalar</code>] from a scalar and a […","Returns the zero scalar.","Returns the multiplicative identity.","Parses the given byte array as a scalar.","Returns the SEC1 encoding of this scalar.","Determine if this <code>Scalar</code> is zero.","Returns self + rhs mod n","Returns 2*self.","Returns self - rhs mod n","Returns self * rhs mod n","Returns self * self mod p","Returns <code>self^by</code>, where <code>by</code> is a little-endian integer …","Returns the multiplicative inverse of self, if self is …","Is integer representing equivalence class odd","Is integer representing equivalence class even","Faster inversion using Stein’s algorithm","Create a new error with no associated source"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,5,5,5,1,2,4,6,2,2,2,2,4,4,1,2,4,6,4,6,4,6,2,2,2,2,4,4,1,2,2,4,4,1,2,4,2,2,2,2,4,4,2,2,2,2,4,4,2,2,4,4,3,3,2,2,7,2,4,8,9,9,4,10,1,2,4,6,1,2,4,6,3,1,1,1,2,4,4,4,4,4,4,4,4,1,2,2,2,2,2,1,3,4,2,1,2,4,4,4,4,4,4,4,4,4,4,1,4,1,1,1,2,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["choice",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["ctoption",3]],[[["choice",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["error",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["projectivepoint",3]],["projectivepoint",3]],[[["projectivepoint",3]],["projectivepoint",3]],[[["affinepoint",3]],["projectivepoint",3]],[[["affinepoint",3]],["projectivepoint",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["affinepoint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["nistp256",3]],["bool",15]],[[],["ordering",4]],[[["nistp256",3]],["ordering",4]],[[],[["ordering",4],["option",4]]],[[["nistp256",3]],[["ordering",4],["option",4]]],[[["projectivepoint",3]],["projectivepoint",3]],[[["projectivepoint",3]],["projectivepoint",3]],[[["affinepoint",3]],["projectivepoint",3]],[[["affinepoint",3]],["projectivepoint",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["nonzeroscalar",6]]],[[["scalar",3]],["projectivepoint",3]],[[["scalar",3]],["projectivepoint",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[]],[[],["projectivepoint",3]],[[],["scalar",3]],[[["projectivepoint",3]]],[[["projectivepoint",3]]],[[["affinepoint",3]]],[[["affinepoint",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["projectivepoint",3]]],[[["projectivepoint",3]]],[[["affinepoint",3]]],[[["affinepoint",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[]],[[],["scalar",3]],[[["iterator",8]]],[[["iterator",8]]],[[["affinepoint",3]],["encodedpoint",6]],[[["affinepoint",3]]],[[["u64",15]]],[[["scalar",3]],["scalarbits",6]],[[["scalar",3]]],[[["scalar",3]]],[[["secretkey",6]],["scalar",3]],[[["affinepoint",3]],["sharedsecret",6]],[[],["affinepoint",3]],[[],["projectivepoint",3]],[[],["scalar",3]],[[],["nistp256",3]],[[]],[[]],[[],["scalar",3]],[[],["nistp256",3]],[[],[["scalar",3],["ctoption",3]]],[[["encodedpoint",6]],["option",4]],[[["bool",15]],["encodedpoint",6]],[[["choice",3],["affinepoint",3]],["affinepoint",3]],[[["choice",3]]],[[["choice",3]]],[[["fieldbytes",6]],["option",4]],[[],["fieldbytes",6]],[[],["scalarbits",6]],[[],["bool",15]],[[],["scalarbits",6]],[[]],[[]],[[["choice",3],["fieldbytes",6]],["ctoption",3]],[[]],[[]],[[]],[[],["choice",3]],[[]],[[]],[[]],[[]],[[],["affinepoint",3]],[[["affinepoint",3]],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["ctoption",3]],[[],["ctoption",3]],[[["scalar",3]],[["signature",6],["result",4],["error",3]]],[[["signature",6],["scalar",3]],[["result",4],["error",3]]],[[]],[[],["affinepoint",3]],[[],["affinepoint",3]],[[],["choice",3]],[[],["projectivepoint",3]],[[],["projectivepoint",3]],[[],["affinepoint",3]],[[],["projectivepoint",3]],[[["scalar",3]]],[[],["scalar",3]],[[],["scalar",3]],[[["fieldbytes",6]]],[[],["fieldbytes",6]],[[],["choice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ctoption",3]],[[],["choice",3]],[[],["choice",3]],[[],["ctoption",3]],[[],["error",3]]],"p":[[3,"AffinePoint"],[3,"ProjectivePoint"],[3,"BlindedScalar"],[3,"Scalar"],[3,"Error"],[3,"NistP256"],[6,"EncodedPoint"],[6,"ScalarBits"],[6,"FieldBytes"],[6,"SharedSecret"]]},\
"p256_cortex_m4":{"doc":"Idiomatic Rust bindings for <code>P256-Cortex-M4</code> in the spirit …","t":[3,6,5,3,3,3,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Result","sha256","SecretKey","PublicKey","Keypair","public","secret","Signature","SharedSecret","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","from","from","clone","clone","clone","clone","clone","random","random","from_bytes","to_bytes","public_key","sign_prehashed","sign","agree","from_untagged_bytes","from_sec1_bytes","to_untagged_bytes","to_compressed_sec1_bytes","to_uncompressed_sec1_bytes","x","y","verify_prehashed","verify","r","s","from_untagged_bytes","from_sec1_bytes","to_untagged_bytes","to_sec1_bytes","as_bytes"],"q":["p256_cortex_m4","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Errors.","Result type.","Convenience function, calculates SHA256 hash digest of a …","NIST P-256 secret key.","NIST P-256 public key.","NIST P-256 keypair.","Public key of the keypair","Secret key of the keypair","NIST P-256 signature.","Outcome of ECDH key agreement.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a random <code>Keypair</code>.","Generate a random <code>SecretKey</code>.","Verifies that there are 32 bytes that correspond to a …","Return secret scalar as big-endian integer.","Calculate associated public key.","Attempt at unraveling the traits in <code>p256</code>.","Deterministic signature on message, which is hashed with …","ECDH key agreement.","Decode assuming <code>bytes</code> is x-coordinate then y-coordinate, …","Decode <code>PublicKey</code> (compressed or uncompressed) from the …","Raw encoding, x-coordinate then y-coordinate.","Compressed encoding: <code>02 || Px</code> if Py is even and <code>03 || Px</code> …","Uncompressed encoding: <code>04 || Px || Py</code>.","Big-endian representation of x-coordinate.","Big-endian representation of x-coordinate.","Verify signature on message assumed to be hashed, if …","Verify signature on message, which is hashed with SHA-256 …","Big-endian representation of r.","Big-endian representation of s.","Decode signature as big-endian r, then big-endian s, …","Decode signature from SEC1 ASN.1 DER","Encode signature from big-endian r, then big-endian s, …","Encode signature as SEC1 ASN.1 DER","The secret (big-endian x-coordinate)"],"i":[0,0,0,0,0,0,1,1,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,1,1,1,1,1,1,1,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,3,4,6,6,6,2,3,1,4,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5],"f":[null,null,[[]],null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[["error",3]]],[[],["error",3]],[[],["secretkey",3]],[[],["publickey",3]],[[],["keypair",3]],[[],["signature",3]],[[]],[[]],[[],["result",6]],[[]],[[],["publickey",3]],[[],["signature",3]],[[],["signature",3]],[[["publickey",3]],["sharedsecret",3]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[],["usize",15]],[[]]],"p":[[3,"Keypair"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"SharedSecret"],[3,"Error"]]},\
"p256_cortex_m4_sys":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"poly1305":{"doc":"The Poly1305 universal hash function and message …","t":[17,17,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["KEY_SIZE","BLOCK_SIZE","Key","Block","Tag","Poly1305","compute_unpadded","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","clone","new","update","reset","finalize"],"q":["poly1305","","","","","","","","","","","","","","","","","","",""],"d":["Size of a Poly1305 key","Size of the blocks Poly1305 acts upon","Poly1305 keys (32-bytes)","Poly1305 blocks (16-bytes)","Poly1305 tags (16-bytes)","The Poly1305 universal hash function.","Compute unpadded Poly1305 for the given input data.","","","","","","","","","","Initialize Poly1305 with the given key","Input data into the Poly1305 universal hash function","Reset internal state","Get the hashed output"],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,[[],["tag",6]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["error",3],["result",4]]],[[],["poly1305",3]],[[["key",6]],["poly1305",3]],[[["block",6]]],[[]],[[],["tag",6]]],"p":[[3,"Poly1305"]]},\
"postcard":{"doc":"Postcard","t":[0,3,8,16,11,10,11,10,3,3,3,5,5,5,5,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,5,3,12,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["flavors","HVec","SerFlavor","Output","try_extend","try_push","try_push_varint_usize","release","Slice","Cobs","Deserializer","from_bytes","from_bytes_cobs","take_from_bytes","take_from_bytes_cobs","Error","WontImplement","NotYetImplemented","SerializeBufferFull","SerializeSeqLengthUnknown","DeserializeUnexpectedEnd","DeserializeBadVarint","DeserializeBadBool","DeserializeBadChar","DeserializeBadUtf8","DeserializeBadOption","DeserializeBadEnum","DeserializeBadEncoding","SerdeSerCustom","SerdeDeCustom","Result","serialize_with_flavor","Serializer","output","to_slice","to_slice_cobs","to_vec","to_vec_cobs","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","try_extend","try_push","release","try_extend","try_push","release","try_push","release","fmt","fmt","eq","index","index","index_mut","index_mut","clone","default","custom","custom","from_bytes","try_extend","try_push_varint_usize","new","try_new"],"q":["postcard","postcard::flavors","","","","","","","","","postcard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","postcard::flavors","","","","","","","","","","","","","","","","","","","","","postcard","","","","","","","postcard::flavors","","","","","","","","postcard","","","postcard::flavors","","","","postcard","postcard::flavors","postcard","","","postcard::flavors","","",""],"d":["Flavors - Plugins for <code>postcard</code>","The <code>HVec</code> flavor is a wrapper type around a <code>heapless::Vec</code>. …","The SerFlavor trait acts as a combinator/middleware …","The <code>Output</code> type is what this flavor “resolves” to …","The try_extend() trait method can be implemented when …","The try_push() trait method can be used to push a single …","The try_push_varint_usize() trait method can be used to …","The release() trait method finalizes the modification or …","The <code>Slice</code> flavor is a storage flavor, storing the …","The <code>Cobs</code> flavor implements Consistent Overhead Byte …","A structure for deserializing a postcard message. For …","Deserialize a message of type <code>T</code> from a byte slice. The …","Deserialize a message of type <code>T</code> from a cobs-encoded byte …","Deserialize a message of type <code>T</code> from a byte slice. The …","Deserialize a message of type <code>T</code> from a cobs-encoded byte …","This is the error type used by Postcard","This is a feature that PostCard will never implement","This is a feature that Postcard intends to support, but …","The serialize buffer is full","The length of a sequence must be known","Hit the end of buffer, expected more data","Found a varint that didn’t terminate. Is the usize too …","Found a bool that wasn’t 0 or 1","Found an invalid unicode char","Tried to parse invalid utf-8","Found an Option discriminant that wasn’t 0 or 1","Found an enum discriminant that was > u32::max_value()","The original data was not well encoded","Serde Serialization Error","Serde Deserialization Error","This is the Result type used by Postcard.","<code>serialize_with_flavor()</code> has three generic parameters, …","A <code>serde</code> compatible serializer, generic over “Flavors” …","This is the Flavor(s) that will be used to modify or …","Serialize a <code>T</code> to the given slice, with the resulting …","Serialize a <code>T</code> to the given slice, with the resulting …","Serialize a <code>T</code> to a <code>heapless::Vec<u8></code>, with the <code>Vec</code> …","Serialize a <code>T</code> to a <code>heapless::Vec<u8></code>, with the <code>Vec</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtain a Deserializer from a slice of bytes","The try_extend() trait method can be implemented when …","The try_push_varint_usize() trait method can be used to …","Create a new <code>Slice</code> flavor from a given backing buffer","Create a new Cobs modifier Flavor. If there is …"],"i":[0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,3,0,0,0,0,4,4,4,4,4,4,4,2,2,2,2,2,2,2,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,3,3,3,3,3,3,3,6,6,6,5,5,5,7,7,2,2,2,6,5,6,5,2,5,2,2,4,1,1,6,7],"f":[null,null,null,null,[[],["result",4]],[[["u8",15]],["result",4]],[[["varintusize",3]],["result",4]],[[],["result",4]],null,null,null,[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],null,null,[[],["result",6]],[[],["result",6]],[[],[["vec",3],["result",6]]],[[],[["vec",3],["result",6]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],[["vec",3],["result",4]]],[[["u8",15]],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["bool",15]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[],["error",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["varintusize",3]],["result",4]],[[]],[[],["result",6]]],"p":[[8,"SerFlavor"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"],[3,"HVec"],[3,"Slice"],[3,"Cobs"]]},\
"postcard_cobs":{"doc":"","t":[3,4,13,13,13,4,13,13,13,5,5,5,5,3,3,4,13,13,13,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CobsDecoder","DecoderState","Idle","Grab","GrabChain","DecodeResult","NoData","DataComplete","DataContinue","decode","decode_in_place","decode_with_sentinel","decode_in_place_with_sentinel","CobsEncoder","EncoderState","PushResult","AddSingle","ModifyFromStartAndSkip","ModifyFromStartAndPushAndSkip","encode","encode_with_sentinel","max_encoding_length","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","default","feed","new","feed","push","push","finalize","new","push","finalize"],"q":["postcard_cobs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The [<code>CobsDecoder</code>] type is used to decode a stream of …","The [<code>DecoderState</code>] is used to track the current state of a…","State machine has not received any non-zero bytes","1-254 bytes, can be header or 00","255 bytes, will be a header next","[<code>DecodeResult</code>] represents the possible non-error outcomes …","The given input byte did not prompt an output byte, …","We have received a complete and well-encoded COBS …","The following byte should be appended to the current end …","Decodes the <code>source</code> buffer into the <code>dest</code> buffer.","Decodes a message in-place.","Decodes the <code>source</code> buffer into the <code>dest</code> buffer using an …","Decodes a message in-place using an arbitrary sentinel …","The [<code>CobsEncoder</code>] type is used to encode a stream of …","The [<code>EncoderState</code>] is used to track the current state of a…","[<code>PushResult</code>] is used to represent the changes to an …","The returned byte should be placed at the current end of …","The byte at the given index should be replaced with the …","The byte at the given index should be replaced with the …","Encodes the <code>source</code> buffer into the <code>dest</code> buffer.","Encodes the <code>source</code> buffer into the <code>dest</code> buffer using an …","Calculates the maximum possible size of an encoded …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a default initial state representation for a COBS …","Push a single encoded byte into the state machine. If the …","Create a new streaming Cobs Decoder. Provide the output …","Push a single byte into the streaming CobsDecoder. Return …","Push a slice of bytes into the streaming CobsDecoder. …","Push a single unencoded byte into the encoder state …","Finalize the encoding process for a single message. The …","Create a new streaming Cobs Encoder","Push a slice of data to be encoded","Complete encoding of the output message. Does NOT …"],"i":[0,0,1,1,1,0,2,2,2,0,0,0,0,0,0,0,3,3,3,0,0,0,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2,2,2,2,5,5,5,5,5,5,5,6,6,6,6,6,6,6,3,3,3,3,3,3,3,4,1,5,6,6,1,4,4,4,6,6,5,5,5],"f":[null,null,null,null,null,null,null,null,null,[[],[["usize",15],["result",4]]],[[],[["usize",15],["result",4]]],[[["u8",15]],[["usize",15],["result",4]]],[[["u8",15]],[["usize",15],["result",4]]],null,null,null,null,null,null,[[],["usize",15]],[[["u8",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u8",15]],[["result",4],["decoderesult",4]]],[[],["cobsdecoder",3]],[[["u8",15]],[["usize",15],["result",4],["option",4]]],[[],[["option",4],["result",4],["usize",15]]],[[["u8",15]],["pushresult",4]],[[]],[[],["cobsencoder",3]],[[],["result",4]],[[],[["usize",15],["result",4]]]],"p":[[4,"DecoderState"],[4,"DecodeResult"],[4,"PushResult"],[3,"CobsDecoder"],[3,"CobsEncoder"],[3,"EncoderState"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[0,3,3,3,11,11,11,3,11,11,11,11,11,11,4,13,13,13,13,11,11,3,4,13,13,13,13,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,3,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["token_stream","IntoIter","TokenStream","LexError","new","is_empty","span","Span","call_site","mixed_site","resolved_at","located_at","unwrap","join","TokenTree","Group","Ident","Punct","Literal","span","set_span","Group","Delimiter","Parenthesis","Brace","Bracket","None","new","delimiter","stream","span","span_open","span_close","set_span","Punct","Spacing","Alone","Joint","new","as_char","spacing","span","set_span","Ident","new","span","set_span","Literal","u8_suffixed","u16_suffixed","u32_suffixed","u64_suffixed","u128_suffixed","usize_suffixed","i8_suffixed","i16_suffixed","i32_suffixed","i64_suffixed","i128_suffixed","isize_suffixed","u8_unsuffixed","u16_unsuffixed","u32_unsuffixed","u64_unsuffixed","u128_unsuffixed","usize_unsuffixed","i8_unsuffixed","i16_unsuffixed","i32_unsuffixed","i64_unsuffixed","i128_unsuffixed","isize_unsuffixed","f64_unsuffixed","f64_suffixed","f32_unsuffixed","f32_suffixed","string","character","byte_string","span","set_span","subspan","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","from","from","extend","extend","into_iter","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","eq","eq","eq","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","from_str","from_iter","from_iter"],"q":["proc_macro2","proc_macro2::token_stream","proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","",""],"d":["Public implementation details for the <code>TokenStream</code> type, …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","An abstract stream of tokens, or more concretely a …","Error returned from <code>TokenStream::from_str</code>.","Returns an empty <code>TokenStream</code> containing no token trees.","Checks if this <code>TokenStream</code> is empty.","","A region of source code, along with macro expansion …","The span of the invocation of the current procedural …","The span located at the invocation of the procedural …","Creates a new span with the same line/column information …","Creates a new span with the same name resolution behavior …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Create a new span encompassing <code>self</code> and <code>other</code>.","A single token or a delimited sequence of token trees …","A token stream surrounded by bracket delimiters.","An identifier.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…","Returns the span of this tree, delegating to the <code>span</code> …","Configures the span for <em>only this token</em>.","A delimited token stream.","Describes how a sequence of token trees is delimited.","<code>( ... )</code>","<code>{ ... }</code>","<code>[ ... ]</code>","<code>Ø ... Ø</code>","Creates a new <code>Group</code> with the given delimiter and token …","Returns the delimiter of this <code>Group</code>","Returns the <code>TokenStream</code> of tokens that are delimited in …","Returns the span for the delimiters of this token stream, …","Returns the span pointing to the opening delimiter of …","Returns the span pointing to the closing delimiter of …","Configures the span for this <code>Group</code>’s delimiters, but …","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Creates a new <code>Punct</code> from the given character and spacing.","Returns the value of this punctuation character as <code>char</code>.","Returns the spacing of this punctuation character, …","Returns the span for this punctuation character.","Configure the span for this punctuation character.","A word of Rust code, which may be a keyword or legal …","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Returns the span of this <code>Ident</code>.","Configures the span of this <code>Ident</code>, possibly changing its …","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","String literal.","Character literal.","Byte string literal.","Returns the span encompassing this literal.","Configures the span associated for this literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,2,0,3,3,3,3,3,3,0,4,4,4,4,4,4,0,0,5,5,5,5,6,6,6,6,6,6,6,0,0,7,7,8,8,8,8,8,0,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,3,1,1,4,4,4,4,1,1,1,11,1,3,4,6,5,8,7,9,10,11,1,9,5,7,9,9,9,1,2,3,4,5,6,7,8,9,10,11,1,2,4,6,8,9,10,9,1,1,1],"f":[null,null,null,null,[[],["tokenstream",3]],[[],["bool",15]],[[],["span",3]],null,[[],["span",3]],[[],["span",3]],[[["span",3]],["span",3]],[[["span",3]],["span",3]],[[],["span",3]],[[["span",3]],[["span",3],["option",4]]],null,null,null,null,null,[[],["span",3]],[[["span",3]]],null,null,null,null,null,null,[[["delimiter",4],["tokenstream",3]],["group",3]],[[],["delimiter",4]],[[],["tokenstream",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[["span",3]]],null,null,null,null,[[["spacing",4],["char",15]],["punct",3]],[[],["char",15]],[[],["spacing",4]],[[],["span",3]],[[["span",3]]],null,[[["span",3],["str",15]],["ident",3]],[[],["span",3]],[[["span",3]]],null,[[["u8",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["usize",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["usize",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["str",15]],["literal",3]],[[["char",15]],["literal",3]],[[],["literal",3]],[[],["span",3]],[[["span",3]]],[[["usize",15],["rangebounds",8]],[["span",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]],["span",3]],[[["tokenstream",3]],["tokenstream",3]],[[["tokentree",4]]],[[["group",3]],["tokentree",4]],[[["ident",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[["literal",3]],["tokentree",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["intoiter",3]],[[],[["option",4],["tokentree",4]]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[],["intoiter",3]],[[]],[[["ident",3]],["ordering",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[["ident",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],[["lexerror",3],["tokenstream",3],["result",4]]],[[["intoiterator",8]]],[[["intoiterator",8]]]],"p":[[3,"TokenStream"],[3,"LexError"],[3,"Span"],[4,"TokenTree"],[4,"Delimiter"],[3,"Group"],[4,"Spacing"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,10,10,10,10,8,10,11,8,10,11,11,14,14,14,11,11,11],"n":["TokenStreamExt","append","append_all","append_separated","append_terminated","IdentFragment","fmt","span","ToTokens","to_tokens","to_token_stream","into_token_stream","format_ident","quote","quote_spanned","span","to_token_stream","into_token_stream"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Specialized formatting trait used by <code>format_ident!</code>.","Format this value as an identifier fragment.","Span associated with this <code>IdentFragment</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","Write <code>self</code> to the given <code>TokenStream</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Formatting macro for constructing <code>Ident</code>s.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object."],"i":[0,1,1,1,1,0,2,2,0,3,3,3,0,0,0,2,3,3],"f":[null,[[]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],null,[[["tokenstream",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,null,[[],[["option",4],["span",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"radium":{"doc":"<code>radium</code> provides a series of helpers for a uniform API …","t":[0,6,6,6,6,6,6,6,6,6,6,6,6,0,8,8,8,16,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,14],"n":["types","RadiumBool","RadiumI8","RadiumU8","RadiumI16","RadiumU16","RadiumI32","RadiumU32","RadiumI64","RadiumU64","RadiumIsize","RadiumUsize","RadiumPtr","marker","BitOps","NumericOps","Radium","Item","new","fence","get_mut","into_inner","load","store","swap","compare_and_swap","compare_exchange","compare_exchange_weak","fetch_and","fetch_nand","fetch_or","fetch_xor","fetch_add","fetch_sub","if_atomic"],"q":["radium","radium::types","","","","","","","","","","","","radium","radium::marker","","radium","","","","","","","","","","","","","","","","","",""],"d":["Best-effort atomic types","Best-effort atomic <code>bool</code> type.","Best-effort atomic <code>i8</code> type.","Best-effort atomic <code>u8</code> type.","Best-effort atomic <code>i16</code> type.","Best-effort atomic <code>u16</code> type.","Best-effort atomic <code>i32</code> type.","Best-effort atomic <code>u32</code> type.","Best-effort atomic <code>i64</code> type.","Best-effort atomic <code>u64</code> type.","Best-effort atomic <code>isize</code> type.","Best-effort atomic <code>usize</code> type.","Best-effort atomic pointer type.","Marker traits used by [<code>Radium</code>].","Types supporting maybe-atomic bitwise operations.","Types supporting maybe-atomic arithmetic operations.","A maybe-atomic shared mutable fundamental type <code>T</code>.","","Creates a new value of this type.","If the underlying value is atomic, calls <code>fence</code> with the …","Returns a mutable reference to the underlying value.","Consumes the wrapper and returns the contained value.","Load a value from this object.","Store a value in this object.","Swap with the value stored in this object.","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","Performs a bitwise “and” on the currently-stored …","Performs a bitwise “nand” on the currently-stored …","Performs a bitwise “or” on the currently-stored value …","Performs a bitwise “xor” on the currently-stored …","Adds <code>value</code> to the currently-stored value, wrapping on …","Subtracts <code>value</code> from the currently-stored value, wrapping …","Conditional compilation based on the presence of atomic …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["ordering",4]]],[[]],[[]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]],["result",4]],[[["ordering",4]],["result",4]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]]],[[["ordering",4]]],null],"p":[[8,"Radium"]]},\
"rand_core":{"doc":"Random number generation traits","t":[0,8,16,16,10,3,12,11,11,11,11,3,12,11,11,11,11,0,5,5,5,5,5,5,0,5,5,3,8,10,10,10,10,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11],"n":["block","BlockRngCore","Item","Results","generate","BlockRng","core","new","index","reset","generate_and_set","BlockRng64","core","new","index","reset","generate_and_set","impls","next_u64_via_u32","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","le","read_u32_into","read_u64_into","Error","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","CryptoRng","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","seed_from_u64","from_rng","from_seed","seed_from_u64","from_rng","fmt","fmt","fmt","fmt","from","clone","clone","CUSTOM_START","INTERNAL_START","raw_os_error","code"],"q":["rand_core","rand_core::block","","","","","","","","","","","","","","","","rand_core","rand_core::impls","","","","","","rand_core","rand_core::le","","rand_core","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","rand_core","","","","","","","rand_core::block","","","","","","","","","","","","","","","","rand_core","","","rand_core::block","","rand_core","","",""],"d":["The <code>BlockRngCore</code> trait and implementation helpers","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","Generate a new block of results.","A wrapper type implementing [<code>RngCore</code>] for some type …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","Create a new <code>BlockRng</code> from an existing RNG implementing …","Get the index into the result buffer.","Reset the number of available results. This will force a …","Generate a new set of results immediately, setting the …","A wrapper type implementing [<code>RngCore</code>] for some type …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","Create a new <code>BlockRng</code> from an existing RNG implementing …","Get the index into the result buffer.","Reset the number of available results. This will force a …","Generate a new set of results immediately, setting the …","Helper functions for implementing <code>RngCore</code> functions.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Little-Endian utilities","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Error type of random number generators","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A marker trait used to indicate that an [<code>RngCore</code>] or …","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Codes at or above this point can be used by users to …","Codes below this point represent OS Errors (i.e. positive …","Extract the raw OS error code (if this error came from …","Retrieve the error code, if any."],"i":[0,0,1,1,1,0,2,2,2,2,2,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,5,5,5,5,2,2,2,2,2,2,2,3,3,3,3,3,3,3,6,6,6,6,6,6,6,2,2,2,2,3,3,3,3,2,2,2,3,3,3,2,3,6,6,6,2,3,6,6,6,6],"f":[null,null,null,null,[[]],null,null,[[],["blockrng",3]],[[],["usize",15]],[[]],[[["usize",15]]],null,null,[[],["blockrng64",3]],[[],["usize",15]],[[]],[[["usize",15]]],null,[[],["u64",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],null,[[]],[[]],null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],null,null,null,[[]],[[["u64",15]]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[]],[[["u64",15]]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],[[["u64",15]]],[[["rngcore",8]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[],["blockrng",3]],[[],["blockrng64",3]],null,null,[[],[["i32",15],["option",4]]],[[],[["option",4],["nonzerou32",3]]]],"p":[[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"],[3,"Error"]]},\
"salty":{"doc":"Mashup of TweetNaCl with ed25519-dalek aimed towards …","t":[0,3,3,3,11,11,11,11,11,5,5,0,17,17,17,17,17,17,17,17,17,17,17,0,3,12,3,12,3,12,3,12,12,3,12,12,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,6,3,3,12,3,3,12,8,16,18,18,18,18,18,18,18,18,18,10,11,10,11,11,11,10,10,3,12,3,12,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["agreement","PublicKey","SecretKey","SharedSecret","to_bytes","to_bytes","agree","from_seed","to_bytes","make_255_bit","x25519","constants","SHA256_LENGTH","SHA512_LENGTH","SCALAR_LENGTH","FIELD_ELEMENT_LENGTH","SECRETKEY_SEED_LENGTH","SECRETKEY_SCALAR_LENGTH","SECRETKEY_NONCE_LENGTH","COMPRESSED_Y_LENGTH","PUBLICKEY_SERIALIZED_LENGTH","SECRETKEY_SERIALIZED_LENGTH","SIGNATURE_SERIALIZED_LENGTH","signature","CosePublicKey","x","SecretKey","nonce","PublicKey","compressed","Keypair","secret","public","Signature","r","s","sign","sign_with_context","sign_prehashed","verify","verify_with_context","verify_prehashed","as_bytes","to_bytes","to_bytes","Error","NoError","NonCanonicalFieldElement","PublicKeyBytesInvalid","SignatureInvalid","ContextTooLong","WrongTwist","Result","EdwardsPoint","CompressedY","0","Sha512","FieldElement","0","FieldImplementation","Limbs","ZERO","ONE","D","D2","APLUS2_OVER_FOUR","EDWARDS_BASEPOINT_X","EDWARDS_BASEPOINT_Y","I","MONTGOMERY_BASEPOINT_U","to_bytes","from_unreduced_bytes","from_bytes_unchecked","from_bytes","parity","squared","inverse","pow2523","MontgomeryPoint","0","Scalar","0","CosePublicKey","x","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","conditional_negate","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","conditional_negate","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","eq","ne","fmt","clone","deserialize","serialize","to_bytes","from_bytes_unchecked","inverse","pow2523","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","ne","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","add_assign","sub_assign","mul_assign","mul_assign","hash","try_from","try_from","try_from","from","from","from","from","from","from","from","from","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","ct_eq","ct_eq","ct_eq","ct_eq","conditional_select","conditional_swap","conditional_select","conditional_swap","decompressed","basepoint","neutral_element","compressed","to_montgomery","x","y","u","as_bytes","to_bytes","new","update","updated","finalize","ZERO","ONE","D","D2","APLUS2_OVER_FOUR","EDWARDS_BASEPOINT_X","EDWARDS_BASEPOINT_Y","I","MONTGOMERY_BASEPOINT_U","from_unreduced_bytes","from_bytes","parity","squared","to_bytes","to_edwards","basepoint","ell","from_bytes","as_bytes","to_bytes","from_u256_le","from_u512_le","reduce","is_canonical","one"],"q":["salty","salty::agreement","","","","","","","","","","salty","salty::constants","","","","","","","","","","","salty","salty::signature","","","","","","","","","","","","","","","","","","","","","salty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","salty::agreement","","","","","","","","","","","","","","","","","","","","","salty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","salty::signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","salty","","","","","","","","","","","","","","","","","","salty::agreement","salty","","","","","salty::signature","","salty","salty::agreement","","salty","","","","","","salty::signature","","","","salty","","","","","salty::agreement","salty::signature","","salty::agreement","salty","","","salty::signature","","","","","salty","salty::agreement","","salty","","","","","salty::signature","salty","","","","","salty::signature","","salty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["99.9% cribbed from x25519-dalek","","A X25519 secret key.","The result of a Diffie-Hellman key exchange.","Convert this public key to a byte array.","","Perform a Diffie-Hellman key agreement between <code>self</code> and …","","Extract this key’s bytes for serialization.","Construct a <code>Scalar</code> from the low 255 bits of a 256-bit …","Implementations:","","the length of a SHA256 digest","the length of a SHA512 digest","the length of a scalar (module structure on Curve25519)","the length of a field element (base field of Curve25519)","the length of the seed part of a secret key (internal)","the length of the scalar part of a secret key (internal)","the length of the nonce part of a secret key (internal)","the length of a compressed point","the length of a public key when serialized","the length of a secret key when serialized","the length of a signature when serialized","","","","a secret key, consisting internally of the seed and its …","","a public key, consisting internally of both its defining …","","pair of secret and corresponding public keys","","","a signature: pair consisting of a curve point “R” in …","","","","","","","","","","","","Extensible error type for all <code>salty</code> operations.","Never occurs, simplifies C bindings","Bytes do not correspond to a canonical base field element","Public key bytes invalid","Signature verification failed","Context for prehashed signatures too long","Point is on other twist of curve","Result type for all <code>salty</code> operations.","These represent the (X,Y,Z,T) coordinates","“Compressed” form of a <code>EdwardsPoint</code>, whereby the sign …","","self-contained Sha512 hash, following TweetNaCl","Element of the base field of the elliptic curve","","Requirements on an implementation of the base field.","Internal representation as limbs","","","","","","","","","","to canonical representation as little-endian bytes","construct from possibly non-canonical representation as …","construct from canonical representation as little-endian …","construct from canonical representation as little-endian …","parity of field element, viewed as integer modulo 2**255 …","default implementation, actual implementation may override…","","","Holds the \\\\(u\\\\)-coordinate of a point on the Montgomery …","","Since the curve is an abelian group, it has a module …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO: figure out why this doesn’t pass the test at the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a byte array, construct a x25519 <code>PublicKey</code>. It may …","","","Given an x25519 [<code>SecretKey</code>] key, compute its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is rather tricky: to get the x-coordinate, and not …","","","","Convert this <code>EdwardsPoint</code> on the Edwards model to the …","The x-coordinate of the point","The y-coordinate of the point","The u-coordinate of the X25519 point","","","","","","","","","","","","","","","","construct from possibly non-canonical representation as …","construct from canonical representation as little-endian …","parity of field element, viewed as integer modulo 2**255 …","default implementation, actual implementation may override…","Convert this <code>MontgomeryPoint</code> to an array of bytes.","Attempt to convert to an <code>EdwardsPoint</code>, using the supplied …","","The order of the group, 2**252 + something something","","","","","","Reduce this <code>Scalar</code> modulo \\\\(\\\\ell\\\\).","Check whether this <code>Scalar</code> is the canonical representative …",""],"i":[0,0,0,0,1,2,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,5,0,6,0,7,7,0,8,8,7,7,7,6,6,6,6,6,8,0,9,9,9,9,9,9,0,0,0,10,0,0,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,0,14,0,4,1,1,1,1,1,1,1,3,3,3,3,3,3,3,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,10,10,10,10,10,10,10,16,16,16,16,16,16,16,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,14,14,14,14,14,14,14,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,4,4,4,4,4,4,11,11,11,11,9,1,15,10,11,13,14,6,8,9,1,1,10,15,11,13,14,14,6,6,8,8,11,11,11,13,9,1,6,6,1,10,14,14,5,6,7,8,6,9,1,3,15,10,11,13,14,6,15,10,11,13,14,6,8,10,15,11,13,15,15,11,11,10,15,15,15,15,15,15,15,10,10,16,16,16,16,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,14,14,14,14,14,14,14,14,14],"f":[null,null,null,null,[[]],[[]],[[["publickey",3]],["sharedsecret",3]],[[]],[[]],[[],["fieldelement",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["signature",3]],[[],["signature",3]],[[["option",4]],["signature",3]],[[["signature",3]],["result",6]],[[["signature",3]],["result",6]],[[["option",4],["signature",3]],["result",6]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["result",6]],[[],["u8",15]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["choice",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["choice",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["ed25519publickey",3]],["bool",15]],[[["ed25519publickey",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[],["ed25519publickey",3]],[[],[["ed25519publickey",3],["result",4]]],[[],["result",4]],[[]],[[],["fieldelement",3]],[[],["fieldelement",3]],[[],["fieldelement",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["bool",15]],[[["publickey",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["montgomerypoint",3]],["bool",15]],[[["scalar",3]],["bool",15]],[[["scalar",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["fieldelement",3]]],[[["fieldelement",3]]],[[["fieldelement",3]]],[[["scalar",3]]],[[]],[[],["result",6]],[[["cosepublickey",3]],[["publickey",3],["result",6]]],[[],[["publickey",3],["result",6]]],[[["secretkey",3]],["publickey",3]],[[],["compressedy",3]],[[],["scalar",3]],[[["u64",15]]],[[],["secretkey",3]],[[["secretkey",3]],["publickey",3]],[[],["keypair",3]],[[],["signature",3]],[[],["cosepublickey",3]],[[],["error",4]],[[],["publickey",3]],[[],["secretkey",3]],[[],["edwardspoint",3]],[[],["compressedy",3]],[[],["fieldelement",3]],[[],["montgomerypoint",3]],[[],["scalar",3]],[[],["publickey",3]],[[],["edwardspoint",3]],[[],["compressedy",3]],[[],["fieldelement",3]],[[],["montgomerypoint",3]],[[],["scalar",3]],[[],["publickey",3]],[[],["signature",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[["montgomerypoint",3]],["choice",3]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[],[["result",6],["edwardspoint",3]]],[[],["edwardspoint",3]],[[],["edwardspoint",3]],[[],["compressedy",3]],[[],["montgomerypoint",3]],[[],["fieldelement",3]],[[],["fieldelement",3]],[[],["fieldelement",3]],[[]],[[]],[[],["sha512",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[],["result",6]],[[],["u8",15]],[[]],[[]],[[["u8",15]],[["result",6],["edwardspoint",3]]],[[]],[[]],[[]],[[]],[[]],[[],["scalar",3]],[[],["scalar",3]],[[],["scalar",3]],[[],["bool",15]],[[]]],"p":[[3,"PublicKey"],[3,"SharedSecret"],[3,"SecretKey"],[3,"CosePublicKey"],[3,"SecretKey"],[3,"PublicKey"],[3,"Keypair"],[3,"Signature"],[4,"Error"],[3,"CompressedY"],[3,"FieldElement"],[8,"FieldImplementation"],[3,"MontgomeryPoint"],[3,"Scalar"],[3,"EdwardsPoint"],[3,"Sha512"]]},\
"serde":{"doc":"Serde","tn":["de","value","Error","UnitDeserializer","BoolDeserializer","I8Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","IsizeDeserializer","U8Deserializer","U16Deserializer","U64Deserializer","UsizeDeserializer","F32Deserializer","F64Deserializer","CharDeserializer","I128Deserializer","U128Deserializer","U32Deserializer","StrDeserializer","BorrowedStrDeserializer","new","BytesDeserializer","new","BorrowedBytesDeserializer","new","SeqDeserializer","new","end","SeqAccessDeserializer","new","MapDeserializer","new","end","MapAccessDeserializer","new","IgnoredAny","Error","custom","invalid_type","invalid_value","invalid_length","unknown_variant","unknown_field","missing_field","duplicate_field","Unexpected","Bool","Unsigned","Signed","Float","Char","Str","Bytes","Unit","Option","NewtypeStruct","Seq","Map","Enum","UnitVariant","NewtypeVariant","TupleVariant","StructVariant","Other","Expected","fmt","Deserialize","deserialize","DeserializeOwned","DeserializeSeed","Value","deserialize","Deserializer","Error","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","is_human_readable","Visitor","Value","expecting","visit_bool","visit_i8","visit_i16","visit_i32","visit_i64","visit_i128","visit_u8","visit_u16","visit_u32","visit_u64","visit_u128","visit_f32","visit_f64","visit_char","visit_str","visit_borrowed_str","visit_bytes","visit_borrowed_bytes","visit_none","visit_some","visit_unit","visit_newtype_struct","visit_seq","visit_map","visit_enum","SeqAccess","Error","next_element_seed","next_element","size_hint","MapAccess","Error","next_key_seed","next_value_seed","next_entry_seed","next_key","next_value","next_entry","size_hint","EnumAccess","Error","Variant","variant_seed","variant","VariantAccess","Error","unit_variant","newtype_variant_seed","newtype_variant","tuple_variant","struct_variant","IntoDeserializer","Deserializer","into_deserializer","ser","Impossible","Error","custom","Serialize","serialize","Serializer","Ok","Error","SerializeSeq","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","SerializeMap","SerializeStruct","SerializeStructVariant","serialize_bool","serialize_i8","serialize_i16","serialize_i32","serialize_i64","serialize_i128","serialize_u8","serialize_u16","serialize_u32","serialize_u64","serialize_u128","serialize_f32","serialize_f64","serialize_char","serialize_str","serialize_bytes","serialize_none","serialize_some","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_newtype_struct","serialize_newtype_variant","serialize_seq","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_map","serialize_struct","serialize_struct_variant","collect_seq","collect_map","collect_str","is_human_readable","SerializeSeq","Ok","Error","serialize_element","end","SerializeTuple","Ok","Error","serialize_element","end","SerializeTupleStruct","Ok","Error","serialize_field","end","SerializeTupleVariant","Ok","Error","serialize_field","end","SerializeMap","Ok","Error","serialize_key","serialize_value","serialize_entry","end","SerializeStruct","Ok","Error","serialize_field","skip_field","end","SerializeStructVariant","Ok","Error","serialize_field","skip_field","end","Deserialize","deserialize","Deserializer","Error","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","is_human_readable","Serialize","serialize","Serializer","Ok","Error","SerializeSeq","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","SerializeMap","SerializeStruct","SerializeStructVariant","serialize_bool","serialize_i8","serialize_i16","serialize_i32","serialize_i64","serialize_i128","serialize_u8","serialize_u16","serialize_u32","serialize_u64","serialize_u128","serialize_f32","serialize_f64","serialize_char","serialize_str","serialize_bytes","serialize_none","serialize_some","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_newtype_struct","serialize_newtype_variant","serialize_seq","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_map","serialize_struct","serialize_struct_variant","collect_seq","collect_map","collect_str","is_human_readable","forward_to_deserialize_any","serde_if_integer128","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","deserialize","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_option","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_seq","deserialize_tuple","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","expecting","visit_bool","visit_i64","visit_i128","visit_u64","visit_u128","visit_f64","visit_str","visit_none","visit_some","visit_newtype_struct","visit_unit","visit_seq","visit_map","visit_bytes","visit_enum","next_element_seed","size_hint","next_element_seed","size_hint","next_key_seed","next_value_seed","next_entry_seed","size_hint","variant_seed","variant_seed","variant_seed","variant_seed","serialize_element","end","serialize_element","end","serialize_field","end","serialize_field","end","serialize_key","serialize_value","end","serialize_field","end","serialize_field","end","custom","custom","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default"],"q":["serde","serde::de","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde","serde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de::valueserde::de","","","","","","","","","","","","","","","serde::ser","","","","","","","serde::de","serde::de::valueserde::de","","","","","","","","","","","","","","","","serde::de::value","","","","","","","","","","","","serde::ser","","","","","","","","","","","","","","","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de","","serde::de::value","serde::de","","serde::de::value","","serde::de","","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de","",""],"d":["Generic data structure deserialization framework.","Building blocks for deserializing basic values using the …","A minimal representation of all possible errors that can …","A deserializer holding a <code>()</code>.","A deserializer holding a <code>bool</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>usize</code>.","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding a <code>char</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>&str</code> with a lifetime tied to …","Create a new borrowed deserializer from the given string.","A deserializer holding a <code>&[u8]</code>. Always calls […","Create a new deserializer from the given bytes.","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","Create a new borrowed deserializer from the given …","A deserializer that iterates over a sequence.","Construct a new <code>SeqDeserializer<I, E></code>.","Check for remaining elements after passing a …","A deserializer holding a <code>SeqAccess</code>.","Construct a new <code>SeqAccessDeserializer<A></code>.","A deserializer that iterates over a map.","Construct a new <code>MapDeserializer<I, E></code>.","Check for remaining elements after passing a …","A deserializer holding a <code>MapAccess</code>.","Construct a new <code>MapAccessDeserializer<A></code>.","An efficient way of discarding data from a deserializer.","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","Raised when there is general error when deserializing a …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> enum type received a variant …","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> struct type expected to receive …","Raised when a <code>Deserialize</code> struct type received more than …","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a boolean value that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","The input contained a <code>char</code> that was not expected.","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a unit <code>()</code> that was not expected.","The input contained an <code>Option<T></code> that was not expected.","The input contained a newtype struct that was not …","The input contained a sequence that was not expected.","The input contained a map that was not expected.","The input contained an enum that was not expected.","The input contained a unit variant that was not expected.","The input contained a newtype variant that was not …","The input contained a tuple variant that was not expected.","The input contained a struct variant that was not …","A message stating what uncategorized thing the input …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","Format an explanation of what data was being expected. …","A <strong>data structure</strong> that can be deserialized from any data …","Deserialize this value from the given Serde deserializer.","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","The type produced by using this seed.","Equivalent to the more common <code>Deserialize::deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Determine whether <code>Deserialize</code> implementations should …","This trait represents a visitor that walks through a …","The value produced by this visitor.","Format a message stating what data this Visitor expects …","The input contains a boolean.","The input contains an <code>i8</code>.","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","The input contains a <code>i128</code>.","The input contains a <code>u8</code>.","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","The input contains a <code>u128</code>.","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","The input contains a <code>char</code>.","The input contains a string. The lifetime of the string …","The input contains a string that lives at least as long …","The input contains a byte array. The lifetime of the byte …","The input contains a byte array that lives at least as …","The input contains an optional that is absent.","The input contains an optional that is present.","The input contains a unit <code>()</code>.","The input contains a newtype struct.","The input contains a sequence of elements.","The input contains a key-value map.","The input contains an enum.","Provides a <code>Visitor</code> access to each element of a sequence …","The error type that can be returned if some error occurs …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","Returns the number of elements remaining in the sequence, …","Provides a <code>Visitor</code> access to each entry of a map in the …","The error type that can be returned if some error occurs …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns <code>Ok(Some((key, value)))</code> for the next …","Returns the number of entries remaining in the map, if …","Provides a <code>Visitor</code> access to the data of an enum in the …","The error type that can be returned if some error occurs …","The <code>Visitor</code> that will be used to deserialize the content …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","<code>VariantAccess</code> is a visitor that is created by the …","The error type that can be returned if some error occurs …","Called when deserializing a variant with no values.","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","Called when deserializing a tuple-like variant.","Called when deserializing a struct-like variant.","Converts an existing value into a <code>Deserializer</code> from which …","The type of the deserializer being converted into.","Convert this value into a deserializer.","Generic data structure serialization framework.","Helper type for implementing a <code>Serializer</code> that does not …","Trait used by <code>Serialize</code> implementations to generically …","Used when a <code>Serialize</code> implementation encounters any error …","A <strong>data structure</strong> that can be serialized into any data …","Serialize this value into the given Serde serializer.","A <strong>data format</strong> that can serialize any data structure …","The output type produced by this <code>Serializer</code> during …","The error type when some error occurs during …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Serialize a <code>bool</code> value.","Serialize an <code>i8</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i128</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u128</code> value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a character.","Serialize a <code>&str</code>.","Serialize a chunk of raw byte data.","Serialize a <code>None</code> value.","Serialize a <code>Some(T)</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Begin to serialize a variably sized sequence. This call …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Begin to serialize a map. This call must be followed by …","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Collect an iterator as a sequence.","Collect an iterator as a map.","Serialize a string produced by an implementation of …","Determine whether <code>Serialize</code> implementations should …","Returned from <code>Serializer::serialize_seq</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a sequence element.","Finish serializing a sequence.","Returned from <code>Serializer::serialize_tuple</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple element.","Finish serializing a tuple.","Returned from <code>Serializer::serialize_tuple_struct</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple struct field.","Finish serializing a tuple struct.","Returned from <code>Serializer::serialize_tuple_variant</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple variant field.","Finish serializing a tuple variant.","Returned from <code>Serializer::serialize_map</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a map key.","Serialize a map value.","Serialize a map entry consisting of a key and a value.","Finish serializing a map.","Returned from <code>Serializer::serialize_struct</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a struct field.","Indicate that a struct field has been skipped.","Finish serializing a struct.","Returned from <code>Serializer::serialize_struct_variant</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a struct variant field.","Indicate that a struct variant field has been skipped.","Finish serializing a struct variant.","A <strong>data structure</strong> that can be deserialized from any data …","Deserialize this value from the given Serde deserializer.","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Determine whether <code>Deserialize</code> implementations should …","A <strong>data structure</strong> that can be serialized into any data …","Serialize this value into the given Serde serializer.","A <strong>data format</strong> that can serialize any data structure …","The output type produced by this <code>Serializer</code> during …","The error type when some error occurs during …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Serialize a <code>bool</code> value.","Serialize an <code>i8</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i128</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u128</code> value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a character.","Serialize a <code>&str</code>.","Serialize a chunk of raw byte data.","Serialize a <code>None</code> value.","Serialize a <code>Some(T)</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Begin to serialize a variably sized sequence. This call …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Begin to serialize a map. This call must be followed by …","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Collect an iterator as a sequence.","Collect an iterator as a map.","Serialize a string produced by an implementation of …","Determine whether <code>Serialize</code> implementations should …","Helper macro when implementing the <code>Deserializer</code> part of a …","Conditional compilation depending on whether Serde is …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,3,0,4,4,0,5,0,6,6,0,7,0,0,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,0,11,0,0,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,0,16,16,16,16,16,16,16,16,0,17,17,17,17,0,18,18,18,18,18,18,0,19,19,0,0,0,20,0,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,0,24,24,24,24,0,25,25,25,25,0,26,26,26,26,0,27,27,27,27,27,27,0,28,28,28,28,28,0,29,29,29,29,29,0,11,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,43,43,43,43,43,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,48,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,49,49,49,49,49,49,49,49,9,9,9,9,9,9,9,50,50,50,50,50,50,50,49,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,4,4,6,6,6,6,6,6,47,48,1,7,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,30,30,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,1,2,3,4,5,6,7,49,9,30,9,10,30,30,9,9,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,1,2,3,4,5,6,7,49,9,49],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["borrowedstrdeserializer",3]],null,[[]],null,[[]],null,[[]],[[],["result",4]],null,[[]],null,[[]],[[],["result",4]],null,[[]],null,null,[[]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["usize",15],["expected",8]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],null,[[],["result",4]],null,null,null,[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],[["usize",15],["option",4]]],null,null,[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],["result",4]],[[],[["option",4],["result",4]]],[[],[["usize",15],["option",4]]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],null,null,[[]],null,null,null,[[]],null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],null,null,null,[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],null,[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],[["ignoredany",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["bool",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f64",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["result",4]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["option",4],["result",4]]],[[],[["usize",15],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["unexpected",4]],["bool",15]],[[["unexpected",4]],["bool",15]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[]],[[],["mapaccessdeserializer",3]],[[],["ignoredany",3]],[[],["unexpected",4]],[[],["ignoredany",3]]],"p":[[3,"BorrowedStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"IgnoredAny"],[3,"Impossible"]]},\
"serde_cbor":{"doc":"CBOR and serialization.","t":[0,3,8,3,5,5,3,11,11,11,11,11,11,11,11,11,3,11,11,0,3,6,4,13,13,13,13,11,11,11,11,11,11,11,11,11,0,3,8,3,11,11,11,11,11,0,3,12,12,11,5,11,11,11,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["de","MutSliceRead","Read","SliceReadFixed","from_mut_slice","from_slice_with_scratch","Deserializer","from_mut_slice","new","disable_named_format","disable_packed_format","disable_standard_enums","disable_legacy_enums","end","into_iter","byte_offset","StreamDeserializer","new","byte_offset","error","Error","Result","Category","Io","Syntax","Data","Eof","offset","classify","is_io","is_syntax","is_data","is_eof","is_scratch_too_small","new","new","ser","SliceWrite","Write","Serializer","new","packed_format","legacy_enums","self_describe","into_inner","tags","Tagged","tag","value","new","current_cbor_tag","new","bytes_written","into_inner","Deserializer","StreamDeserializer","Error","Result","Serializer","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","next","peek","clear_buffer","read_to_buffer","read","take_buffer","read_into","discard","offset","next","peek","clear_buffer","read_to_buffer","take_buffer","read_into","discard","offset","write_all","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","next","from","clone","custom","serialize","deserialize","custom","invalid_type"],"q":["serde_cbor","serde_cbor::de","","","","","","","","","","","","","","","","","","serde_cbor","serde_cbor::error","","","","","","","","","","","","","","serde_cbor::de","","serde_cbor","serde_cbor::ser","","","","","","","","serde_cbor","serde_cbor::tags","","","","","serde_cbor::ser","","","serde_cbor","","","","","serde_cbor::de","","","","","","","","","","","","","","serde_cbor","","","","","","","","","","","","","","","","","","","","","","serde_cbor::error","","","","","","","serde_cbor::ser","","","","","","","serde_cbor","","","","","","","serde_cbor::tags","","","","","","","serde_cbor::de","","","","","","","","","","","","","","","","","serde_cbor::ser","serde_cbor","","serde_cbor::error","serde_cbor","serde_cbor::de","","serde_cbor","serde_cbor::ser","serde_cbor","serde_cbor::error","serde_cbor","","serde_cbor::error","serde_cbor","serde_cbor::tags","","serde_cbor",""],"d":["Deserialization.","A CBOR input source that reads from a slice of bytes, and …","Trait used by the deserializer for iterating over input.","A CBOR input source that reads from a slice of bytes …","Decode a value from CBOR data in a mutable slice.","Decode a value from CBOR data using a scratch buffer.","A Serde <code>Deserialize</code>r of CBOR data.","Constructs a <code>Deserializer</code> which reads from a mutable …","Constructs a <code>Deserializer</code> from one of the possible …","Don’t accept named variants and fields.","Don’t accept numbered variants and fields.","Don’t accept the new enum format used by <code>serde_cbor</code> …","Don’t accept the old enum format used by <code>serde_cbor</code> …","This method should be called after a value has been …","Turn a CBOR deserializer into an iterator over values of …","Return the current offset in the reader","Iterator that deserializes a stream into multiple CBOR …","Create a new CBOR stream deserializer from one of the …","Return the current offset in the reader","When serializing or deserializing CBOR goes wrong.","This type represents all possible errors that can occur …","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.","Categorizes the cause of a <code>serde_cbor::Error</code>.","The error was caused by a failure to read or write bytes …","The error was caused by input that was not syntactically …","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","The byte offset at which the error occurred.","Categorizes the cause of this error.","Returns true if this error was caused by a failure to …","Returns true if this error was caused by input that was …","Returns true if this error was caused by data that was …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by the scratch …","Creates a CBOR input source to read from a slice of …","Creates a CBOR input source to read from a slice of bytes.","Serialize a Rust data structure to CBOR data.","Implements <code>Write</code> for mutable byte slices (<code>&mut [u8]</code>).","A sink for serialized CBOR.","A structure for serializing Rust values to CBOR.","Creates a new CBOR serializer.","Choose concise/packed format for serializer.","Enable old enum format used by <code>serde_cbor</code> versions <= …","Writes a CBOR self-describe tag to the stream.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Support for cbor tags","A value that is optionally tagged with a cbor tag","cbor tag","value","Create a new tagged value","function to get the current cbor tag","Wraps a mutable slice so it can be used as a <code>Write</code>.","Returns the number of bytes written to the underlying …","Returns the underlying slice.","A Serde <code>Deserialize</code>r of CBOR data.","Iterator that deserializes a stream into multiple CBOR …","This type represents all possible errors that can occur …","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.","A structure for serializing Rust values to CBOR.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,2,2,0,0,0,0,3,3,3,3,4,4,4,4,4,4,4,5,6,0,0,0,0,7,7,7,7,7,0,0,8,8,8,0,9,9,9,0,0,0,0,0,6,6,6,6,6,6,6,5,5,5,5,5,5,5,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,3,3,3,3,3,3,3,9,9,9,9,9,9,9,7,7,7,7,7,7,7,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,9,1,2,3,4,5,6,7,9,4,3,2,4,3,4,8,8,4,4],"f":[null,null,null,null,[[],["result",6]],[[],["result",6]],null,[[],[["mutsliceread",3],["deserializer",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["streamdeserializer",3]],[[],["usize",15]],null,[[],["streamdeserializer",3]],[[],["usize",15]],null,null,null,null,null,null,null,null,[[],["u64",15]],[[],["category",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["slicereadfixed",3]],[[],["mutsliceread",3]],null,null,null,null,[[]],[[]],[[]],[[],["result",6]],[[]],null,null,null,null,[[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],["slicewrite",3]],[[],["usize",15]],[[]],null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],[["option",4],["result",6]]],[[],[["option",4],["result",6]]],[[]],[[["usize",15]],["result",6]],[[["usize",15]],[["result",6],["eitherlifetime",4]]],[[],["eitherlifetime",4]],[[],["result",6]],[[]],[[],["u64",15]],[[],[["option",4],["result",6]]],[[],[["option",4],["result",6]]],[[]],[[["usize",15]],["result",6]],[[],["eitherlifetime",4]],[[],["result",6]],[[]],[[],["u64",15]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["category",4]],["bool",15]],[[],[["result",6],["option",4]]],[[["error",3]],["error",3]],[[],["category",4]],[[["display",8]],["error",3]],[[["serializer",8]],["result",4]],[[["deserializer",8]],["result",4]],[[["display",8]],["error",3]],[[["unexpected",4],["expected",8]],["error",3]]],"p":[[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[3,"SliceReadFixed"],[3,"MutSliceRead"],[3,"Serializer"],[3,"Tagged"],[3,"SliceWrite"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Serialize","Deserialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_indexed":{"doc":"Derivation of <code>Serialize</code> and <code>Deserialize</code> that replaces …","t":[24,24],"n":["SerializeIndexed","DeserializeIndexed"],"q":["serde_indexed",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_repr":{"doc":"github crates-io docs-rs","t":[24,24],"n":["Serialize_repr","Deserialize_repr"],"q":["serde_repr",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"sha1":{"doc":"An implementation of the SHA-1 cryptographic hash …","t":[8,16,10,10,10,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Digest","OutputSize","new","update","chain","finalize","finalize_reset","reset","output_size","digest","Sha1","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","fmt","clone","default","reset","update","finalize_into_dirty"],"q":["sha1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>Digest</code> trait specifies an interface common for digest …","Output size for <code>Digest</code>","Create new hasher instance","Digest data, updating the internal state.","Digest input data in a chained manner.","Retrieve result and consume hasher instance.","Retrieve result and reset hasher instance.","Reset hasher instance to its initial state.","Get output size of the hasher","Convenience function to compute hash of the <code>data</code>. It will …","Structure representing the state of a SHA-1 computation","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,null,[[]],[[]],[[]],[[],[["u8",15],["genericarray",3]]],[[],[["u8",15],["genericarray",3]]],[[]],[[],["usize",15]],[[],[["u8",15],["genericarray",3]]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["sha1",3]],[[]],[[]],[[]],[[["output",6]]]],"p":[[8,"Digest"],[3,"Sha1"]]},\
"sha2":{"doc":"An implementation of the SHA-2 cryptographic hash …","t":[8,16,10,10,10,10,10,10,10,10,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Digest","OutputSize","new","update","chain","finalize","finalize_reset","reset","output_size","digest","Sha224","Sha256","Sha384","Sha512","Sha512Trunc224","Sha512Trunc256","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","borrow","borrow_mut","try_from","from","into","try_into","type_id","new","update","chain","finalize","finalize_reset","reset","output_size","digest","finalize_into","finalize_into_reset","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","reset","reset","reset","reset","reset","reset","update","update","update","update","update","update","finalize_into_dirty","finalize_into_dirty","finalize_into_dirty","finalize_into_dirty","finalize_into_dirty","finalize_into_dirty"],"q":["sha2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>Digest</code> trait specifies an interface common for digest …","Output size for <code>Digest</code>","Create new hasher instance","Digest data, updating the internal state.","Digest input data in a chained manner.","Retrieve result and consume hasher instance.","Retrieve result and reset hasher instance.","Reset hasher instance to its initial state.","Get output size of the hasher","Convenience function to compute hash of the <code>data</code>. It will …","The SHA-256 hash algorithm with the SHA-224 initial hash …","The SHA-256 hash algorithm with the SHA-256 initial hash …","The SHA-512 hash algorithm with the SHA-384 initial hash …","The SHA-512 hash algorithm with the SHA-512 initial hash …","The SHA-512 hash algorithm with the SHA-512/224 initial …","The SHA-512 hash algorithm with the SHA-512/256 initial …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,2,5,4,7,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[null,null,[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],[[["genericarray",3]]],[[["genericarray",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["sha256",3]],[[],["sha224",3]],[[],["sha512",3]],[[],["sha384",3]],[[],["sha512trunc256",3]],[[],["sha512trunc224",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["output",6]]],[[["output",6]]],[[["output",6]]],[[["output",6]]],[[["output",6]]],[[["output",6]]]],"p":[[8,"Digest"],[3,"Sha256"],[3,"Sha224"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"]]},\
"signature":{"doc":"RustCrypto: <code>signature</code> crate.","t":[3,8,10,11,8,16,8,11,10,8,11,10,8,11,10,8,11,10,8,10,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Signature","from_bytes","as_bytes","PrehashSignature","Digest","Signer","sign","try_sign","DigestSigner","sign_digest","try_sign_digest","RandomizedSigner","sign_with_rng","try_sign_with_rng","RandomizedDigestSigner","sign_digest_with_rng","try_sign_digest_with_rng","Verifier","verify","DigestVerifier","verify_digest","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","default","new","as_bytes","sign","sign_digest","sign_with_rng","sign_digest_with_rng"],"q":["signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Signature errors.","Trait impl’d by concrete types that represent digital …","Parse a signature from its byte representation","Borrow a byte slice representing the serialized form of …","Marker trait for <code>Signature</code> types computable as …","Preferred <code>Digest</code> algorithm to use when computing this …","Sign the provided message bytestring using <code>Self</code> (e.g. a …","Sign the given message and return a digital signature","Attempt to sign the given message, returning a digital …","Sign the given prehashed message [<code>Digest</code>] using <code>Self</code>.","Sign the given prehashed message [<code>Digest</code>], returning a …","Attempt to sign the given prehashed message [<code>Digest</code>], …","Sign the given message using the provided external …","Sign the given message and return a digital signature","Attempt to sign the given message, returning a digital …","Combination of [<code>DigestSigner</code>] and [<code>RandomizedSigner</code>] with …","Sign the given prehashed message <code>Digest</code>, returning a …","Attempt to sign the given prehashed message <code>Digest</code>, …","Verify the provided message bytestring using <code>Self</code> (e.g. a …","Use <code>Self</code> to verify that the provided signature for a …","Verify the provided signature for the given prehashed …","Verify the signature against the given [<code>Digest</code>] output.","","","","","","","","","","","Create a new error with no associated source","Borrow a byte slice representing the serialized form of …","Sign the given message and return a digital signature","Sign the given prehashed message [<code>Digest</code>], returning a …","Sign the given message and return a digital signature","Sign the given prehashed message <code>Digest</code>, returning a …"],"i":[0,0,1,1,0,2,0,3,3,0,4,4,0,5,5,0,6,6,0,7,0,8,9,9,9,9,9,9,9,9,9,9,9,1,3,4,5,6],"f":[null,null,[[],[["result",4],["error",3]]],[[]],null,null,null,[[]],[[],[["result",4],["error",3]]],null,[[]],[[],[["result",4],["error",3]]],null,[[]],[[],[["result",4],["error",3]]],null,[[]],[[],[["result",4],["error",3]]],null,[[],[["result",4],["error",3]]],null,[[],[["result",4],["error",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"Signature"],[8,"PrehashSignature"],[8,"Signer"],[8,"DigestSigner"],[8,"RandomizedSigner"],[8,"RandomizedDigestSigner"],[8,"Verifier"],[8,"DigestVerifier"],[3,"Error"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":[8,8],"n":["StableDeref","CloneStableDeref"],"q":["stable_deref_trait",""],"d":["An unsafe marker trait for types that deref to a stable …","An unsafe marker trait for types where clones deref to …"],"i":[0,0],"f":[null,null],"p":[]},\
"subtle":{"doc":"Note that docs will only build on nightly Rust until RFC …","t":[3,11,8,10,8,10,11,11,8,10,3,11,11,11,11,11,11,11,11,11,8,10,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Choice","unwrap_u8","ConstantTimeEq","ct_eq","ConditionallySelectable","conditional_select","conditional_assign","conditional_swap","ConditionallyNegatable","conditional_negate","CtOption","new","unwrap","unwrap_or","unwrap_or_else","is_some","is_none","map","and_then","or_else","ConstantTimeGreater","ct_gt","ConstantTimeLess","ct_lt","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","ct_eq","ct_eq","conditional_select","conditional_select","fmt","fmt","not","bitand","bitor","bitxor","bitand_assign","bitor_assign","bitxor_assign","from","clone","clone"],"q":["subtle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>Choice</code> struct represents a choice for use in …","Unwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>.","An <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.","Determine if two items are equal.","A type which can be conditionally selected in constant …","Select <code>a</code> or <code>b</code> according to <code>choice</code>.","Conditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.","Conditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …","A type which can be conditionally negated in constant …","Negate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …","The <code>CtOption<T></code> type represents an optional value similar …","This method is used to construct a new <code>CtOption<T></code> and …","This returns the underlying value but panics if it is not …","This returns the underlying value if it is <code>Some</code> or the …","This returns the underlying value if it is <code>Some</code> or the …","Returns a true <code>Choice</code> if this value is <code>Some</code>.","Returns a true <code>Choice</code> if this value is <code>None</code>.","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","Returns a <code>None</code> value if the option is <code>None</code>, otherwise …","Returns <code>self</code> if it contains a value, and otherwise …","A type which can be compared in some manner and be …","Determine whether <code>self > other</code>.","A type which can be compared in some manner and be …","Determine whether <code>self < other</code>.","","","","","","","","","","","","","","","","Two <code>CtOption<T></code>s are equal if they are both <code>Some</code> and …","","","","","","","","","","","","","",""],"i":[0,1,0,2,0,3,3,3,0,4,0,5,5,5,5,5,5,5,5,5,0,6,0,7,1,1,1,1,1,1,1,5,5,5,5,5,5,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,5],"f":[null,[[],["u8",15]],null,[[],["choice",3]],null,[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],null,[[["choice",3]]],null,[[["choice",3]],["ctoption",3]],[[]],[[]],[[]],[[],["choice",3]],[[],["choice",3]],[[],["ctoption",3]],[[],["ctoption",3]],[[],["ctoption",3]],null,[[],["choice",3]],null,[[],["choice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["choice",3]],["choice",3]],[[["ctoption",3]],["choice",3]],[[["choice",3]]],[[["choice",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["choice",3]],[[["choice",3]],["choice",3]],[[["choice",3]],["choice",3]],[[["choice",3]],["choice",3]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["u8",15]],["choice",3]],[[],["choice",3]],[[],["ctoption",3]]],"p":[[3,"Choice"],[8,"ConstantTimeEq"],[8,"ConditionallySelectable"],[8,"ConditionallyNegatable"],[3,"CtOption"],[8,"ConstantTimeGreater"],[8,"ConstantTimeLess"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["token","Token","Underscore","spans","Abstract","span","As","span","Async","span","Auto","span","Await","span","Become","span","Box","span","Break","span","Const","span","Continue","span","Crate","span","Default","span","Do","span","Dyn","span","Else","span","Enum","span","Extern","span","Final","span","Fn","span","For","span","If","span","Impl","span","In","span","Let","span","Loop","span","Macro","span","Match","span","Mod","span","Move","span","Mut","span","Override","span","Priv","span","Pub","span","Ref","span","Return","span","SelfType","span","SelfValue","span","Static","span","Struct","span","Super","span","Trait","span","Try","span","Type","span","Typeof","span","Union","span","Unsafe","span","Unsized","span","Use","span","Virtual","span","Where","span","While","span","Yield","span","Add","spans","AddEq","spans","And","spans","AndAnd","spans","AndEq","spans","At","spans","Bang","spans","Caret","spans","CaretEq","spans","Colon","spans","Colon2","spans","Comma","spans","Div","spans","DivEq","spans","Dollar","spans","Dot","spans","Dot2","spans","Dot3","spans","DotDotEq","spans","Eq","spans","EqEq","spans","Ge","spans","Gt","spans","Le","spans","Lt","spans","MulEq","spans","Ne","spans","Or","spans","OrEq","spans","OrOr","spans","Pound","spans","Question","spans","RArrow","spans","LArrow","spans","Rem","spans","RemEq","spans","FatArrow","spans","Semi","spans","Shl","spans","ShlEq","spans","Shr","spans","ShrEq","spans","Star","spans","Sub","spans","SubEq","spans","Tilde","spans","Brace","span","surround","Bracket","span","surround","Paren","span","surround","Group","span","surround","buffer","TokenBuffer","new","new2","begin","Cursor","empty","eof","group","ident","punct","literal","lifetime","token_stream","token_tree","span","ext","IdentExt","parse_any","peek_any","unraw","punctuated","Punctuated","new","is_empty","len","first","first_mut","last","last_mut","iter","iter_mut","pairs","pairs_mut","into_pairs","push_value","push_punct","pop","trailing_punct","empty_or_trailing","push","insert","clear","parse_terminated","parse_terminated_with","parse_separated_nonempty","parse_separated_nonempty_with","Pairs","PairsMut","IntoPairs","IntoIter","Iter","IterMut","Pair","Punctuated","End","into_value","value","value_mut","punct","new","into_tuple","spanned","Spanned","span","visit","Visit","visit_abi","visit_angle_bracketed_generic_arguments","visit_attr_style","visit_attribute","visit_bare_fn_arg","visit_bin_op","visit_binding","visit_bound_lifetimes","visit_const_param","visit_constraint","visit_data","visit_data_enum","visit_data_struct","visit_data_union","visit_derive_input","visit_expr","visit_expr_binary","visit_expr_call","visit_expr_cast","visit_expr_field","visit_expr_index","visit_expr_lit","visit_expr_paren","visit_expr_path","visit_expr_unary","visit_field","visit_fields","visit_fields_named","visit_fields_unnamed","visit_generic_argument","visit_generic_param","visit_generics","visit_ident","visit_index","visit_lifetime","visit_lifetime_def","visit_lit","visit_lit_bool","visit_lit_byte","visit_lit_byte_str","visit_lit_char","visit_lit_float","visit_lit_int","visit_lit_str","visit_macro","visit_macro_delimiter","visit_member","visit_meta","visit_meta_list","visit_meta_name_value","visit_nested_meta","visit_parenthesized_generic_arguments","visit_path","visit_path_arguments","visit_path_segment","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_type","visit_qself","visit_return_type","visit_span","visit_trait_bound","visit_trait_bound_modifier","visit_type","visit_type_array","visit_type_bare_fn","visit_type_group","visit_type_impl_trait","visit_type_infer","visit_type_macro","visit_type_never","visit_type_param","visit_type_param_bound","visit_type_paren","visit_type_path","visit_type_ptr","visit_type_reference","visit_type_slice","visit_type_trait_object","visit_type_tuple","visit_un_op","visit_variadic","visit_variant","visit_vis_crate","visit_vis_public","visit_vis_restricted","visit_visibility","visit_where_clause","visit_where_predicate","visit_abi","visit_angle_bracketed_generic_arguments","visit_attr_style","visit_attribute","visit_bare_fn_arg","visit_bin_op","visit_binding","visit_bound_lifetimes","visit_const_param","visit_constraint","visit_data","visit_data_enum","visit_data_struct","visit_data_union","visit_derive_input","visit_expr","visit_expr_binary","visit_expr_call","visit_expr_cast","visit_expr_field","visit_expr_index","visit_expr_lit","visit_expr_paren","visit_expr_path","visit_expr_unary","visit_field","visit_fields","visit_fields_named","visit_fields_unnamed","visit_generic_argument","visit_generic_param","visit_generics","visit_ident","visit_index","visit_lifetime","visit_lifetime_def","visit_lit","visit_lit_bool","visit_lit_byte","visit_lit_byte_str","visit_lit_char","visit_lit_float","visit_lit_int","visit_lit_str","visit_macro","visit_macro_delimiter","visit_member","visit_meta","visit_meta_list","visit_meta_name_value","visit_nested_meta","visit_parenthesized_generic_arguments","visit_path","visit_path_arguments","visit_path_segment","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_type","visit_qself","visit_return_type","visit_span","visit_trait_bound","visit_trait_bound_modifier","visit_type","visit_type_array","visit_type_bare_fn","visit_type_group","visit_type_impl_trait","visit_type_infer","visit_type_macro","visit_type_never","visit_type_param","visit_type_param_bound","visit_type_paren","visit_type_path","visit_type_ptr","visit_type_reference","visit_type_slice","visit_type_trait_object","visit_type_tuple","visit_un_op","visit_variadic","visit_variant","visit_vis_crate","visit_vis_public","visit_vis_restricted","visit_visibility","visit_where_clause","visit_where_predicate","parse","discouraged","Speculative","advance_to","Error","Result","Lookahead1","Peek","Parse","parse","ParseStream","ParseBuffer","StepCursor","error","parse","call","peek","peek2","peek3","parse_terminated","is_empty","lookahead1","fork","error","step","span","cursor","Parser","Output","parse2","parse","parse_str","Nothing","new","new_spanned","span","to_compile_error","into_compile_error","combine","Ident","AttrStyle","Outer","Inner","Attribute","pound_token","style","bracket_token","path","tokens","AttributeArgs","Meta","Path","List","NameValue","MetaList","path","paren_token","nested","MetaNameValue","path","eq_token","lit","NestedMeta","Meta","Lit","Field","attrs","vis","ident","colon_token","ty","Fields","Named","Unnamed","Unit","FieldsNamed","brace_token","named","FieldsUnnamed","paren_token","unnamed","Variant","attrs","ident","fields","discriminant","VisCrate","crate_token","VisPublic","pub_token","VisRestricted","pub_token","paren_token","in_token","path","Visibility","Public","Crate","Restricted","Inherited","Expr","Array","Assign","AssignOp","Async","Await","Binary","Block","Box","Break","Call","Cast","Closure","Continue","Field","ForLoop","Group","If","Index","Let","Lit","Loop","Macro","Match","MethodCall","Paren","Path","Range","Reference","Repeat","Return","Struct","Try","TryBlock","Tuple","Type","Unary","Unsafe","Verbatim","While","Yield","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","attrs","left","op","right","ExprBlock","ExprBox","ExprBreak","ExprCall","attrs","func","paren_token","args","ExprCast","attrs","expr","as_token","ty","ExprClosure","ExprContinue","ExprField","attrs","base","dot_token","member","ExprForLoop","ExprGroup","ExprIf","ExprIndex","attrs","expr","bracket_token","index","ExprLet","ExprLit","attrs","lit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","attrs","paren_token","expr","ExprPath","attrs","qself","path","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","attrs","op","expr","ExprUnsafe","ExprWhile","ExprYield","Index","index","span","Member","Named","Unnamed","BoundLifetimes","for_token","lt_token","lifetimes","gt_token","ConstParam","attrs","const_token","ident","colon_token","ty","eq_token","default","GenericParam","Type","Lifetime","Const","Generics","lt_token","params","gt_token","where_clause","LifetimeDef","attrs","lifetime","colon_token","bounds","PredicateEq","lhs_ty","eq_token","rhs_ty","PredicateLifetime","lifetime","colon_token","bounds","PredicateType","lifetimes","bounded_ty","colon_token","bounds","TraitBound","paren_token","modifier","lifetimes","path","TraitBoundModifier","None","Maybe","TypeParam","attrs","ident","colon_token","bounds","eq_token","default","TypeParamBound","Trait","Lifetime","WhereClause","where_token","predicates","WherePredicate","Type","Lifetime","Eq","ImplGenerics","Turbofish","TypeGenerics","Lifetime","apostrophe","ident","Lit","Str","ByteStr","Byte","Char","Int","Float","Bool","Verbatim","LitBool","value","span","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","StrStyle","Cooked","Raw","Macro","path","bang_token","delimiter","tokens","MacroDelimiter","Paren","Brace","Bracket","Data","Struct","Enum","Union","DataEnum","enum_token","brace_token","variants","DataStruct","struct_token","fields","semi_token","DataUnion","union_token","fields","DeriveInput","attrs","vis","ident","generics","data","BinOp","Add","Sub","Mul","Div","Rem","And","Or","BitXor","BitAnd","BitOr","Shl","Shr","Eq","Lt","Le","Ne","Ge","Gt","AddEq","SubEq","MulEq","DivEq","RemEq","BitXorEq","BitAndEq","BitOrEq","ShlEq","ShrEq","UnOp","Deref","Not","Neg","Abi","extern_token","name","BareFnArg","attrs","name","ty","ReturnType","Default","Type","Type","Array","BareFn","Group","ImplTrait","Infer","Macro","Never","Paren","Path","Ptr","Reference","Slice","TraitObject","Tuple","Verbatim","TypeArray","bracket_token","elem","semi_token","len","TypeBareFn","lifetimes","unsafety","abi","fn_token","paren_token","inputs","variadic","output","TypeGroup","group_token","elem","TypeImplTrait","impl_token","bounds","TypeInfer","underscore_token","TypeMacro","mac","TypeNever","bang_token","TypeParen","paren_token","elem","TypePath","qself","path","TypePtr","star_token","const_token","mutability","elem","TypeReference","and_token","lifetime","mutability","elem","TypeSlice","bracket_token","elem","TypeTraitObject","dyn_token","bounds","TypeTuple","paren_token","elems","Variadic","attrs","dots","AngleBracketedGenericArguments","colon2_token","lt_token","args","gt_token","Binding","ident","eq_token","ty","Constraint","ident","colon_token","bounds","GenericArgument","Lifetime","Type","Binding","Constraint","Const","ParenthesizedGenericArguments","paren_token","inputs","output","Path","leading_colon","segments","PathArguments","None","AngleBracketed","Parenthesized","PathSegment","ident","arguments","QSelf","lt_token","ty","position","as_token","gt_token","Error","Result","parse","parse2","parse_str","parenthesized","braced","bracketed","Token","parse_quote","parse_macro_input","custom_keyword","custom_punctuation","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","eq","eq","hash","cmp","fmt","clone","partial_cmp","fmt","span","fmt","to_tokens","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","parse_any","unraw","advance_to","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next_back","next_back","next_back","next_back","next_back","next_back","len","len","len","len","len","len","extend","extend","extend","into_iter","into_iter","into_iter","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","partial_cmp","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","from_iter","from_iter","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","fmt","span","fmt","span","new","span","set_span","parse_meta","parse_args","parse_args_with","parse_outer","parse_inner","path","parse_named","parse_unnamed","iter","iter_mut","len","is_empty","type_params","type_params_mut","lifetimes","lifetimes_mut","const_params","const_params_mut","make_where_clause","split_for_impl","as_turbofish","new","new","span","set_span","new","suffix","span","set_span","new","value","parse","parse_with","span","set_span","suffix","new","value","span","set_span","suffix","new","value","span","set_span","suffix","new","value","span","set_span","suffix","new","base10_digits","base10_parse","suffix","span","set_span","new","base10_digits","base10_parse","suffix","span","set_span","new","value","span","set_span","parse_body","parse_body_with","without_plus","without_plus","without_plus","parse_mod_style","is_ident","get_ident","is_empty","visit_abi","visit_angle_bracketed_generic_arguments","visit_attr_style","visit_attribute","visit_bare_fn_arg","visit_bin_op","visit_binding","visit_bound_lifetimes","visit_const_param","visit_constraint","visit_data","visit_data_enum","visit_data_struct","visit_data_union","visit_derive_input","visit_expr","visit_expr_binary","visit_expr_call","visit_expr_cast","visit_expr_field","visit_expr_index","visit_expr_lit","visit_expr_paren","visit_expr_path","visit_expr_unary","visit_field","visit_fields","visit_fields_named","visit_fields_unnamed","visit_generic_argument","visit_generic_param","visit_generics","visit_ident","visit_index","visit_lifetime","visit_lifetime_def","visit_lit","visit_lit_bool","visit_lit_byte","visit_lit_byte_str","visit_lit_char","visit_lit_float","visit_lit_int","visit_lit_str","visit_macro","visit_macro_delimiter","visit_member","visit_meta","visit_meta_list","visit_meta_name_value","visit_nested_meta","visit_parenthesized_generic_arguments","visit_path","visit_path_arguments","visit_path_segment","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_type","visit_qself","visit_return_type","visit_span","visit_trait_bound","visit_trait_bound_modifier","visit_type","visit_type_array","visit_type_bare_fn","visit_type_group","visit_type_impl_trait","visit_type_infer","visit_type_macro","visit_type_never","visit_type_param","visit_type_param_bound","visit_type_paren","visit_type_path","visit_type_ptr","visit_type_reference","visit_type_slice","visit_type_trait_object","visit_type_tuple","visit_un_op","visit_variadic","visit_variant","visit_vis_crate","visit_vis_public","visit_vis_restricted","visit_visibility","visit_where_clause","visit_where_predicate","peek","error"],"q":["syn","syn::tokensyn","syn::buffer","","","","","","","","","","","","","","","syn","syn::ext","","","","syn","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","syn::spanned","","syn","syn::visitsyn","syn::parse","syn::parse::discouraged","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","synsyn::tokensynsyn::buffer","","","","","","","","","","","","","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","syn::parse","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","syn::punctuated","","","","","","","","","","","","","","syn::parse","syn","syn::punctuated","syn::parse","syn::punctuated","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","syn::buffer","syn::punctuated","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","syn::punctuated","syn","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","syn::buffer","syn::punctuated","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","syn::parse","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","syn::punctuated","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn","","","syn::parse","","syn::punctuated","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","syn::punctuated","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::visit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse",""],"d":["Tokens representing Rust punctuation, keywords, and …","Marker trait for types that represent single tokens.","<code>_</code>","","<code>abstract</code>","","<code>as</code>","","<code>async</code>","","<code>auto</code>","","<code>await</code>","","<code>become</code>","","<code>box</code>","","<code>break</code>","","<code>const</code>","","<code>continue</code>","","<code>crate</code>","","<code>default</code>","","<code>do</code>","","<code>dyn</code>","","<code>else</code>","","<code>enum</code>","","<code>extern</code>","","<code>final</code>","","<code>fn</code>","","<code>for</code>","","<code>if</code>","","<code>impl</code>","","<code>in</code>","","<code>let</code>","","<code>loop</code>","","<code>macro</code>","","<code>match</code>","","<code>mod</code>","","<code>move</code>","","<code>mut</code>","","<code>override</code>","","<code>priv</code>","","<code>pub</code>","","<code>ref</code>","","<code>return</code>","","<code>Self</code>","","<code>self</code>","","<code>static</code>","","<code>struct</code>","","<code>super</code>","","<code>trait</code>","","<code>try</code>","","<code>type</code>","","<code>typeof</code>","","<code>union</code>","","<code>unsafe</code>","","<code>unsized</code>","","<code>use</code>","","<code>virtual</code>","","<code>where</code>","","<code>while</code>","","<code>yield</code>","","<code>+</code>","","<code>+=</code>","","<code>&</code>","","<code>&&</code>","","<code>&=</code>","","<code>@</code>","","<code>!</code>","","<code>^</code>","","<code>^=</code>","","<code>:</code>","","<code>::</code>","","<code>,</code>","","<code>/</code>","","<code>/=</code>","","<code>$</code>","","<code>.</code>","","<code>..</code>","","<code>...</code>","","<code>..=</code>","","<code>=</code>","","<code>==</code>","","<code>>=</code>","","<code>></code>","","<code><=</code>","","<code><</code>","","<code>*=</code>","","<code>!=</code>","","<code>|</code>","","<code>|=</code>","","<code>||</code>","","<code>#</code>","","<code>?</code>","","<code>-></code>","","<code><-</code>","","<code>%</code>","","<code>%=</code>","","<code>=></code>","","<code>;</code>","","<code><<</code>","","<code><<=</code>","","<code>>></code>","","<code>>>=</code>","","<code>*</code>","","<code>-</code>","","<code>-=</code>","","<code>~</code>","","<code>{...}</code>","","","<code>[...]</code>","","","<code>(...)</code>","","","None-delimited group","","","A stably addressed token buffer supporting efficient …","A buffer that can be efficiently traversed multiple …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a cursor referencing the first token in the …","A cheaply copyable cursor into a <code>TokenBuffer</code>.","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the …","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","If the cursor is pointing at an <code>Punct</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","Copies all remaining tokens visible from this cursor into …","If the cursor is pointing at a <code>TokenTree</code>, returns it …","Returns the <code>Span</code> of the current token, or …","Extension traits to provide parsing methods on foreign …","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of …","A punctuated sequence of syntax tree nodes separated by …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","Creates an empty punctuated sequence.","Determines whether this punctuated sequence is empty, …","Returns the number of syntax tree nodes in this …","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Appends a syntax tree node onto the end of this …","Appends a trailing punctuation onto the end of this …","Removes the last punctuated pair from this sequence, or …","Determines whether this punctuated sequence ends with a …","Returns true if either this <code>Punctuated</code> is empty, or it …","Appends a syntax tree node onto the end of this …","Inserts an element at position <code>index</code>.","Clears the sequence of all values and punctuation, making …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type …","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over owned values of type <code>T</code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","","","Extracts the syntax tree node from this punctuated pair, …","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Creates a punctuated pair out of a syntax tree node and …","Produces this punctuated pair as a tuple of syntax tree …","A trait that can provide the <code>Span</code> of the complete …","A trait that can provide the <code>Span</code> of the complete …","Returns a <code>Span</code> covering the complete contents of this …","Syntax tree traversal to walk a shared borrow of a syntax …","Syntax tree traversal to walk a shared borrow of a syntax …arsing interface for parsing a token stream into a …","Extensions to the parsing API with niche applicability.","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Error returned when a Syn parser cannot parse the input …","The result of a Syn parser.","Support for checking the next token in a stream to decide …","Types that can be parsed by looking at just one token.","Parsing interface implemented by all types that can be …","","Input to a Syn parser function.","Cursor position within a buffered token stream.","Cursor state associated with speculative parsing.","Triggers an error at the current position of the parse …","Parses a syntax tree node of type <code>T</code>, advancing the …","Calls the given parser function to parse a syntax tree …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Parses zero or more occurrences of <code>T</code> separated by …","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Forks a parse stream so that parsing tokens out of either …","Triggers an error at the current position of the parse …","Speculatively parses tokens from this parse stream, …","Returns the <code>Span</code> of the next token in the parse stream, or…","Provides low-level access to the token representation …","Parser that can parse Rust tokens into a particular …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse tokens of source code into the chosen syntax tree …","Parse a string of Rust code into the chosen syntax tree …","An empty syntax tree node that consumes no tokens when …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","The source location of the error.","Render the error as an invocation of <code>compile_error!</code>.","Render the error as an invocation of <code>compile_error!</code>.","Add another error message to self such that when …","A word of Rust code, which may be a keyword or legal …","Distinguishes between attributes that decorate an item …","","","An attribute like <code>#[repr(transparent)]</code>.","","","","","","Conventional argument type associated with an invocation …","Content of a compile-time structured attribute.","","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A structured list within an attribute, like …","","","","A name-value pair within an attribute, like …","","","","Element of a compile-time attribute list.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A Rust literal, like the <code>\\\"new_name\\\"</code> in …","A field of a struct or enum variant.","Attributes tagged on the field.","Visibility of the field.","Name of the field, if any.","","Type of the field.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","Unit struct or unit variant such as <code>None</code>.","Named fields of a struct or struct variant such as …","","","Unnamed fields of a tuple struct or tuple variant such as …","","","An enum variant.","Attributes tagged on the variant.","Name of the variant.","Content stored in the variant.","Explicit discriminant: <code>Variant = 1</code>","A crate-level visibility: <code>crate</code>.","","A public visibility level: <code>pub</code>.","","A visibility level restricted to some path: <code>pub(self)</code> or …","","","","","The visibility level of an item: inherited or <code>pub</code> or …","A public visibility level: <code>pub</code>.","A crate-level visibility: <code>crate</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","An inherited visibility, which usually means private.","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","Tokens in expression position not interpreted by Syn.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","","","","","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","","","","","A cast expression: <code>foo as f64</code>.","","","","","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","","","","","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","","","","","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","","","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","","","","A path like <code>std::mem::replace</code> possibly containing generic …","","","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","","","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","The index of an unnamed tuple struct field.","","","A struct or tuple struct field accessed in a struct …","A named field like <code>self.x</code>.","An unnamed field like <code>self.0</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","","","","","A const generic parameter: <code>const LENGTH: usize</code>.","","","","","","","","A generic type parameter, lifetime, or const generic: …","A generic type parameter: <code>T: Into<String></code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","Lifetimes and type parameters attached to a declaration …","","","","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","","","","An equality predicate in a <code>where</code> clause (unsupported).","","","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","","","","A type predicate in a <code>where</code> clause: …","Any lifetimes from a <code>for</code> binding","The type being bounded","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","A trait used as a bound on a type parameter.","","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","A modifier on a trait bound, currently only used for the <code>?</code>…","","","A generic type parameter: <code>T: Into<String></code>.","","","","","","","A trait or lifetime used as a bound on a type parameter.","","","A <code>where</code> clause in a definition: …","","","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A type predicate in a <code>where</code> clause: …","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","An equality predicate in a <code>where</code> clause (unsupported).","Returned by <code>Generics::split_for_impl</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","Returned by <code>Generics::split_for_impl</code>.","A Rust lifetime: <code>\'a</code>.","","","A Rust literal such as a string or integer or boolean.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A byte literal: <code>b\'f\'</code>.","A character literal: <code>\'a\'</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A raw token literal not interpreted by Syn.","A boolean literal: <code>true</code> or <code>false</code>.","","","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a …","An ordinary string like <code>\\\"data\\\"</code>.","A raw string like <code>r##\\\"data\\\"##</code>.","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","","","","","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","","","","The storage of a struct, enum or union data structure.","A struct input to a <code>proc_macro_derive</code> macro.","An enum input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","An enum input to a <code>proc_macro_derive</code> macro.","","","","A struct input to a <code>proc_macro_derive</code> macro.","","","","An untagged union input to a <code>proc_macro_derive</code> macro.","","","Data structure sent to a <code>proc_macro_derive</code> macro.","Attributes tagged on the whole struct or enum.","Visibility of the struct or enum.","Name of the struct or enum.","Generics required to complete the definition.","Data within the struct or enum.","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","The <code>+</code> operator (addition)","The <code>-</code> operator (subtraction)","The <code>*</code> operator (multiplication)","The <code>/</code> operator (division)","The <code>%</code> operator (modulus)","The <code>&&</code> operator (logical and)","The <code>||</code> operator (logical or)","The <code>^</code> operator (bitwise xor)","The <code>&</code> operator (bitwise and)","The <code>|</code> operator (bitwise or)","The <code><<</code> operator (shift left)","The <code>>></code> operator (shift right)","The <code>==</code> operator (equality)","The <code><</code> operator (less than)","The <code><=</code> operator (less than or equal to)","The <code>!=</code> operator (not equal to)","The <code>>=</code> operator (greater than or equal to)","The <code>></code> operator (greater than)","The <code>+=</code> operator","The <code>-=</code> operator","The <code>*=</code> operator","The <code>/=</code> operator","The <code>%=</code> operator","The <code>^=</code> operator","The <code>&=</code> operator","The <code>|=</code> operator","The <code><<=</code> operator","The <code>>>=</code> operator","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","The <code>*</code> operator for dereferencing","The <code>!</code> operator for logical inversion","The <code>-</code> operator for negation","The binary interface of a function: <code>extern \\\"C\\\"</code>.","","","An argument in a function type: the <code>usize</code> in …","","","","Return type of a function signature.","Return type is not specified.","A particular type is returned.","The possible types that a Rust value could have.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the …","A macro in the type position.","The never type: <code>!</code>.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","Tokens in type position not interpreted by Syn.","A fixed size array type: <code>[T; n]</code>.","","","","","A bare function type: <code>fn(usize) -> bool</code>.","","","","","","","","","A type contained within invisible delimiters.","","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","","","Indication that a type should be inferred by the …","","A macro in the type position.","","The never type: <code>!</code>.","","A parenthesized type equivalent to the inner type.","","","A path like <code>std::slice::Iter</code>, optionally qualified with a …","","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","","","","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","","","","","A dynamically sized slice type: <code>[T]</code>.","","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","","","A tuple type: <code>(A, B, C, String)</code>.","","","The variadic argument of a foreign function.","","","Angle bracketed arguments of a path segment: the <code><K, V></code> …","","","","","A binding (equality constraint) on an associated type: …","","","","An associated type bound: <code>Iterator<Item: Display></code>.","","","","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","A lifetime argument.","A type argument.","A binding (equality constraint) on an associated type: …","An associated type bound: <code>Iterator<Item: Display></code>.","A const expression. Must be inside of a block.","Arguments of a function path segment: the <code>(A, B) -> C</code> in …","","<code>(A, B)</code>","<code>C</code>","A path at which a named item is exported (e.g. …","","","Angle bracketed or parenthesized arguments of a path …","","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","A segment of a path together with any path arguments on …","","","The explicit Self type in a qualified path: the <code>T</code> in …","","","","","","Error returned when a Syn parser cannot parse the input …","The result of a Syn parser.","Parse tokens of source code into the chosen syntax tree …","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parse a set of parentheses and expose their content to …","Parse a set of curly braces and expose their content to …","Parse a set of square brackets and expose their content …","A type-macro that expands to the name of the Rust type …","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse the input TokenStream of a macro, triggering a …","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …reates a new <code>Ident</code> with the given <code>string</code> as well as the …","Returns the span of this <code>Ident</code>.","Configures the span of this <code>Ident</code>, possibly changing its …","Parses the content of the attribute, consisting of the …","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parses zero or more outer attributes from the stream.","Parses zero or more inner attributes from the stream.","Returns the identifier that begins this structured meta …","Parses a named (braced struct) field.","Parses an unnamed (tuple struct) field.","Get an iterator over the borrowed [<code>Field</code>] items in this …","Get an iterator over the mutably borrowed [<code>Field</code>] items …","Returns the number of fields.","Returns <code>true</code> if there are zero fields.","Returns an Iterator<Item = &TypeParam> over the type …","Returns an Iterator<Item = &mut TypeParam> over the type …","Returns an Iterator<Item = &LifetimeDef> over the …","Returns an Iterator<Item = &mut LifetimeDef> over the …","Returns an Iterator<Item = &ConstParam> over the constant …","Returns an Iterator<Item = &mut ConstParam> over the …","Initializes an empty <code>where</code>-clause if there is not one …","Split a type’s generics into the pieces required for …","Turn a type’s generics like <code><X, Y></code> into a turbofish …","","Panics","","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","Parse a syntax tree node from the content of this string …","Invoke parser on the content of this string literal.","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","In some positions, types may not contain the <code>+</code> character, …","","","Parse a <code>Path</code> containing no path arguments on any of its …","Determines whether this is a path of length 1 equal to …","If this path consists of a single ident, returns the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Looks at the next token in the parse stream to determine …","Triggers an error at the current position of the parse …"],"i":[0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,100,0,101,101,0,102,102,0,103,103,0,0,104,104,104,0,105,105,105,105,105,105,105,105,105,105,0,0,106,106,106,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,0,0,0,0,108,108,108,108,108,108,108,108,0,0,109,0,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,112,0,0,0,113,114,114,114,114,114,114,114,114,114,114,114,114,114,0,115,115,115,115,0,116,116,116,116,116,116,0,0,117,117,0,118,118,118,118,118,0,0,119,119,119,0,120,120,120,0,121,121,121,0,122,122,0,123,123,123,123,123,0,124,124,124,0,125,125,0,126,126,0,127,127,127,127,0,128,0,129,0,130,130,130,130,0,131,131,131,131,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,0,0,0,0,0,133,133,133,133,0,0,0,0,134,134,134,134,0,135,135,135,135,0,0,0,136,136,136,136,0,0,0,0,137,137,137,137,0,0,138,138,0,0,0,0,0,139,139,139,0,140,140,140,0,0,0,0,0,0,0,0,0,0,141,141,141,0,0,0,0,142,142,0,143,143,0,144,144,144,144,0,145,145,145,145,145,145,145,0,146,146,146,0,147,147,147,147,0,148,148,148,148,0,149,149,149,0,150,150,150,0,151,151,151,151,0,152,152,152,152,0,153,153,0,154,154,154,154,154,154,0,155,155,0,156,156,0,157,157,157,0,0,0,0,158,158,0,159,159,159,159,159,159,159,159,0,160,160,0,0,0,0,0,0,0,161,161,0,162,162,162,162,0,163,163,163,0,164,164,164,0,165,165,165,0,166,166,166,0,167,167,0,168,168,168,168,168,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,170,170,170,0,171,171,0,172,172,172,0,173,173,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,0,175,175,175,175,0,176,176,176,176,176,176,176,176,0,177,177,0,178,178,0,179,0,180,0,181,0,182,182,0,183,183,0,184,184,184,184,0,185,185,185,185,0,186,186,0,187,187,0,188,188,0,189,189,0,190,190,190,190,0,191,191,191,0,192,192,192,0,193,193,193,193,193,0,194,194,194,0,195,195,0,196,196,196,0,197,197,0,198,198,198,198,198,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,199,199,199,199,199,199,199,199,199,199,199,118,118,118,118,118,118,118,118,118,118,117,117,117,117,117,117,117,117,117,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,127,127,127,127,127,127,127,127,127,127,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,123,123,123,123,123,123,123,123,123,123,131,131,131,131,131,131,131,131,131,131,129,129,129,129,129,129,129,129,129,129,128,128,128,128,128,128,128,128,128,128,130,130,130,130,130,130,130,130,130,130,132,132,132,132,132,132,132,132,132,132,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,204,133,133,133,133,133,133,133,133,133,133,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,207,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,136,136,136,136,136,136,136,136,136,136,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,137,137,137,137,137,137,137,137,137,137,213,213,213,213,213,213,213,213,138,138,138,138,138,138,138,138,138,138,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,224,224,224,224,224,224,224,224,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,141,141,141,141,141,141,141,141,141,141,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,147,147,147,147,147,147,147,147,147,147,146,146,146,146,146,146,146,146,146,146,154,154,154,154,154,154,154,154,154,154,148,148,148,148,148,148,148,148,148,148,145,145,145,145,145,145,145,145,145,145,230,230,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,232,232,144,144,144,144,144,144,144,144,144,144,155,155,155,155,155,155,155,155,155,155,152,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,151,151,151,151,151,151,151,151,151,151,150,150,150,150,150,150,150,150,150,150,149,149,149,149,149,149,149,149,149,149,158,158,158,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,233,233,233,233,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,237,238,238,238,238,238,238,238,238,238,238,238,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,168,168,168,168,168,168,168,168,168,168,164,164,164,164,164,164,164,164,164,166,166,166,166,166,166,166,166,166,165,165,165,165,165,165,165,165,165,167,167,167,167,167,167,167,167,167,169,169,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,170,170,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,188,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,189,189,189,189,189,189,189,189,189,189,173,173,173,173,173,173,173,173,173,173,195,195,195,195,195,195,195,195,195,195,197,197,197,197,197,197,197,197,197,197,196,196,196,196,196,196,196,196,196,196,193,193,193,193,193,193,193,193,193,193,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,194,194,194,194,194,194,194,194,194,194,198,198,198,198,198,198,198,198,198,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,107,107,107,107,107,107,107,107,107,107,239,239,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,108,108,108,108,108,108,108,108,108,108,245,245,245,245,245,245,245,116,116,116,116,116,116,116,116,116,116,114,114,114,114,114,114,114,114,113,113,113,113,113,113,113,113,113,246,246,246,246,246,246,246,199,199,199,199,199,199,199,199,199,199,199,158,158,159,159,233,233,234,234,235,235,236,236,237,237,238,238,160,160,1,1,102,102,100,100,101,101,103,103,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,199,199,199,199,114,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,199,119,120,121,122,127,125,126,131,132,138,140,143,142,147,146,148,144,154,155,152,153,145,156,157,158,159,233,234,235,236,237,238,160,162,168,169,170,174,186,175,184,185,176,181,179,188,180,183,173,187,178,177,182,172,171,195,193,190,194,197,191,246,114,199,199,199,199,199,199,119,119,119,122,122,124,124,131,131,131,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,142,146,146,146,154,155,155,157,157,157,159,159,159,159,159,159,159,237,238,164,164,164,174,174,174,174,174,174,174,174,174,174,174,174,174,174,195,197,116,239,240,241,242,243,244,239,240,241,242,243,244,107,107,116,124,107,116,239,239,240,240,241,241,242,242,243,243,244,244,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,230,231,232,158,233,234,235,236,237,238,105,107,239,241,242,243,108,171,190,117,118,172,169,191,144,145,192,164,165,166,167,168,132,133,134,135,136,137,138,139,140,141,123,124,125,126,193,146,147,142,148,159,160,162,163,143,119,120,121,122,194,195,196,197,149,150,151,198,173,152,153,174,175,176,177,178,179,180,181,154,155,182,183,184,185,186,187,188,170,189,127,128,129,130,131,156,157,113,116,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,147,144,196,107,158,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,143,142,230,231,232,158,233,234,235,236,237,238,105,107,171,190,117,118,172,169,191,144,145,192,164,165,166,167,168,132,133,134,135,136,137,138,139,140,141,123,124,125,126,193,146,147,148,159,160,162,163,119,120,121,122,194,195,196,197,149,150,151,198,173,152,153,174,175,176,177,178,179,180,181,154,155,182,183,184,185,186,187,188,170,189,127,128,129,130,131,156,157,158,1,54,56,59,60,61,63,65,66,68,69,73,76,78,81,84,85,88,91,96,97,99,113,1,54,56,59,60,61,63,65,66,68,69,73,76,78,81,84,85,88,91,96,97,99,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,230,231,232,233,234,235,236,237,238,160,107,171,190,117,118,172,169,191,144,145,192,164,165,166,167,168,132,133,134,135,136,137,138,139,140,141,123,124,125,126,193,146,147,142,158,148,159,162,163,143,119,120,121,122,194,195,196,197,149,150,151,198,173,152,153,174,175,176,177,178,179,180,181,154,155,182,183,184,185,186,187,188,170,189,127,128,129,130,131,156,157,114,116,158,237,238,114,116,107,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,143,142,230,231,232,158,233,234,235,236,237,238,107,171,190,117,118,172,169,191,144,145,192,164,165,166,167,168,132,133,134,135,136,137,138,139,140,141,123,124,125,126,193,146,147,148,159,160,162,163,119,120,121,122,194,195,196,197,149,150,151,198,173,152,153,174,175,176,177,178,179,180,181,154,155,182,183,184,185,186,187,188,170,189,127,128,129,130,131,156,157,107,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,119,122,118,120,121,124,131,127,125,126,123,129,128,130,132,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,134,133,141,138,135,136,143,142,137,140,139,146,155,157,147,230,231,232,144,148,154,152,153,145,156,151,150,149,158,159,233,234,235,236,237,238,160,162,168,169,170,174,186,175,184,185,176,181,188,183,187,178,177,182,179,180,173,172,189,171,195,197,196,193,190,191,192,194,107,108,143,143,142,142,199,199,199,118,118,118,118,118,119,123,123,124,124,124,124,147,147,147,147,147,147,147,147,231,148,158,158,158,159,159,159,159,233,233,233,233,233,233,233,234,234,234,234,234,235,235,235,235,235,236,236,236,236,236,237,237,237,237,237,237,238,238,238,238,238,238,160,160,160,160,162,162,174,173,187,195,195,195,196,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,245,245],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["cursor",3]],null,[[]],[[],["bool",15]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["tokenstream",3]],[[],["option",4]],[[],["span",3]],null,null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,[[]],[[],["bool",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[],["pairs",3]],[[],["pairsmut",3]],[[],["intopairs",3]],[[]],[[]],[[],[["pair",4],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[]],[[["usize",15]]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[["option",4]]],[[]],null,null,[[],["span",3]],null,null,[[["abi",3]]],[[["anglebracketedgenericarguments",3]]],[[["attrstyle",4]]],[[["attribute",3]]],[[["barefnarg",3]]],[[["binop",4]]],[[["binding",3]]],[[["boundlifetimes",3]]],[[["constparam",3]]],[[["constraint",3]]],[[["data",4]]],[[["dataenum",3]]],[[["datastruct",3]]],[[["dataunion",3]]],[[["deriveinput",3]]],[[["expr",4]]],[[["exprbinary",3]]],[[["exprcall",3]]],[[["exprcast",3]]],[[["exprfield",3]]],[[["exprindex",3]]],[[["exprlit",3]]],[[["exprparen",3]]],[[["exprpath",3]]],[[["exprunary",3]]],[[["field",3]]],[[["fields",4]]],[[["fieldsnamed",3]]],[[["fieldsunnamed",3]]],[[["genericargument",4]]],[[["genericparam",4]]],[[["generics",3]]],[[["ident",3]]],[[["index",3]]],[[["lifetime",3]]],[[["lifetimedef",3]]],[[["lit",4]]],[[["litbool",3]]],[[["litbyte",3]]],[[["litbytestr",3]]],[[["litchar",3]]],[[["litfloat",3]]],[[["litint",3]]],[[["litstr",3]]],[[["macro",3]]],[[["macrodelimiter",4]]],[[["member",4]]],[[["meta",4]]],[[["metalist",3]]],[[["metanamevalue",3]]],[[["nestedmeta",4]]],[[["parenthesizedgenericarguments",3]]],[[["path",3]]],[[["patharguments",4]]],[[["pathsegment",3]]],[[["predicateeq",3]]],[[["predicatelifetime",3]]],[[["predicatetype",3]]],[[["qself",3]]],[[["returntype",4]]],[[["span",3]]],[[["traitbound",3]]],[[["traitboundmodifier",4]]],[[["type",4]]],[[["typearray",3]]],[[["typebarefn",3]]],[[["typegroup",3]]],[[["typeimpltrait",3]]],[[["typeinfer",3]]],[[["typemacro",3]]],[[["typenever",3]]],[[["typeparam",3]]],[[["typeparambound",4]]],[[["typeparen",3]]],[[["typepath",3]]],[[["typeptr",3]]],[[["typereference",3]]],[[["typeslice",3]]],[[["typetraitobject",3]]],[[["typetuple",3]]],[[["unop",4]]],[[["variadic",3]]],[[["variant",3]]],[[["viscrate",3]]],[[["vispublic",3]]],[[["visrestricted",3]]],[[["visibility",4]]],[[["whereclause",3]]],[[["wherepredicate",4]]],[[["abi",3]]],[[["anglebracketedgenericarguments",3]]],[[["attrstyle",4]]],[[["attribute",3]]],[[["barefnarg",3]]],[[["binop",4]]],[[["binding",3]]],[[["boundlifetimes",3]]],[[["constparam",3]]],[[["constraint",3]]],[[["data",4]]],[[["dataenum",3]]],[[["datastruct",3]]],[[["dataunion",3]]],[[["deriveinput",3]]],[[["expr",4]]],[[["exprbinary",3]]],[[["exprcall",3]]],[[["exprcast",3]]],[[["exprfield",3]]],[[["exprindex",3]]],[[["exprlit",3]]],[[["exprparen",3]]],[[["exprpath",3]]],[[["exprunary",3]]],[[["field",3]]],[[["fields",4]]],[[["fieldsnamed",3]]],[[["fieldsunnamed",3]]],[[["genericargument",4]]],[[["genericparam",4]]],[[["generics",3]]],[[["ident",3]]],[[["index",3]]],[[["lifetime",3]]],[[["lifetimedef",3]]],[[["lit",4]]],[[["litbool",3]]],[[["litbyte",3]]],[[["litbytestr",3]]],[[["litchar",3]]],[[["litfloat",3]]],[[["litint",3]]],[[["litstr",3]]],[[["macro",3]]],[[["macrodelimiter",4]]],[[["member",4]]],[[["meta",4]]],[[["metalist",3]]],[[["metanamevalue",3]]],[[["nestedmeta",4]]],[[["parenthesizedgenericarguments",3]]],[[["path",3]]],[[["patharguments",4]]],[[["pathsegment",3]]],[[["predicateeq",3]]],[[["predicatelifetime",3]]],[[["predicatetype",3]]],[[["qself",3]]],[[["returntype",4]]],[[["span",3]]],[[["traitbound",3]]],[[["traitboundmodifier",4]]],[[["type",4]]],[[["typearray",3]]],[[["typebarefn",3]]],[[["typegroup",3]]],[[["typeimpltrait",3]]],[[["typeinfer",3]]],[[["typemacro",3]]],[[["typenever",3]]],[[["typeparam",3]]],[[["typeparambound",4]]],[[["typeparen",3]]],[[["typepath",3]]],[[["typeptr",3]]],[[["typereference",3]]],[[["typeslice",3]]],[[["typetraitobject",3]]],[[["typetuple",3]]],[[["unop",4]]],[[["variadic",3]]],[[["variant",3]]],[[["viscrate",3]]],[[["vispublic",3]]],[[["visrestricted",3]]],[[["visibility",4]]],[[["whereclause",3]]],[[["wherepredicate",4]]],null,null,null,[[]],null,null,null,null,null,[[["parsestream",6]],["result",6]],null,null,null,[[["display",8]],["error",3]],[[],[["result",6],["parse",8]]],[[],["result",6]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],[["result",6],["punctuated",3]]],[[],["bool",15]],[[],["lookahead1",3]],[[]],[[["display",8]],["error",3]],[[],["result",6]],[[],["span",3]],[[],["cursor",3]],null,null,[[["tokenstream",3]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],null,[[["span",3],["display",8]]],[[["totokens",8],["display",8]]],[[],["span",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["result",6],["parse",8]]],[[["tokenstream",3]],[["result",6],["parse",8]]],[[["str",15]],[["result",6],["parse",8]]],null,null,null,null,null,null,null,null,[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[]],[[["ident",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[],["ident",3]],[[["ident",3]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["span",3],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["tokenstream",3]]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["parsestream",6]],["result",6]],[[],["ident",3]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[]],[[["selfvalue",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["super",3]],["ident",3]],[[["crate",3]],["ident",3]],[[["extern",3]],["ident",3]],[[["underscore",3]],["ident",3]],[[["path",3]],["meta",4]],[[["metalist",3]],["meta",4]],[[["metanamevalue",3]],["meta",4]],[[["meta",4]],["nestedmeta",4]],[[["lit",4]],["nestedmeta",4]],[[["fieldsnamed",3]],["fields",4]],[[["fieldsunnamed",3]],["fields",4]],[[["vispublic",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[["exprarray",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["usize",15]],["index",3]],[[["typeparam",3]],["genericparam",4]],[[["lifetimedef",3]],["genericparam",4]],[[["constparam",3]],["genericparam",4]],[[["ident",3]]],[[["traitbound",3]],["typeparambound",4]],[[["lifetime",3]],["typeparambound",4]],[[["predicatetype",3]],["wherepredicate",4]],[[["predicatelifetime",3]],["wherepredicate",4]],[[["predicateeq",3]],["wherepredicate",4]],[[["litstr",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litint",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[["literal",3]]],[[["literal",3]]],[[["datastruct",3]],["data",4]],[[["dataenum",3]],["data",4]],[[["dataunion",3]],["data",4]],[[["typearray",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typegroup",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typetuple",3]],["type",4]],[[]],[[]],[[["lexerror",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["optionlifetime",3]],["ordering",4]],[[["underscore",3]],["bool",15]],[[["abstract",3]],["bool",15]],[[["as",3]],["bool",15]],[[["async",3]],["bool",15]],[[["auto",3]],["bool",15]],[[["await",3]],["bool",15]],[[["become",3]],["bool",15]],[[["box",3]],["bool",15]],[[["break",3]],["bool",15]],[[["const",3]],["bool",15]],[[["continue",3]],["bool",15]],[[["crate",3]],["bool",15]],[[["default",3]],["bool",15]],[[["do",3]],["bool",15]],[[["dyn",3]],["bool",15]],[[["else",3]],["bool",15]],[[["enum",3]],["bool",15]],[[["extern",3]],["bool",15]],[[["final",3]],["bool",15]],[[["fn",3]],["bool",15]],[[["for",3]],["bool",15]],[[["if",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["in",3]],["bool",15]],[[["let",3]],["bool",15]],[[["loop",3]],["bool",15]],[[["macro",3]],["bool",15]],[[["match",3]],["bool",15]],[[["mod",3]],["bool",15]],[[["move",3]],["bool",15]],[[["mut",3]],["bool",15]],[[["override",3]],["bool",15]],[[["priv",3]],["bool",15]],[[["pub",3]],["bool",15]],[[["ref",3]],["bool",15]],[[["return",3]],["bool",15]],[[["selftype",3]],["bool",15]],[[["selfvalue",3]],["bool",15]],[[["static",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["super",3]],["bool",15]],[[["trait",3]],["bool",15]],[[["try",3]],["bool",15]],[[["type",3]],["bool",15]],[[["typeof",3]],["bool",15]],[[["union",3]],["bool",15]],[[["unsafe",3]],["bool",15]],[[["unsized",3]],["bool",15]],[[["use",3]],["bool",15]],[[["virtual",3]],["bool",15]],[[["where",3]],["bool",15]],[[["while",3]],["bool",15]],[[["yield",3]],["bool",15]],[[["add",3]],["bool",15]],[[["addeq",3]],["bool",15]],[[["and",3]],["bool",15]],[[["andand",3]],["bool",15]],[[["andeq",3]],["bool",15]],[[["at",3]],["bool",15]],[[["bang",3]],["bool",15]],[[["caret",3]],["bool",15]],[[["careteq",3]],["bool",15]],[[["colon",3]],["bool",15]],[[["colon2",3]],["bool",15]],[[["comma",3]],["bool",15]],[[["div",3]],["bool",15]],[[["diveq",3]],["bool",15]],[[["dollar",3]],["bool",15]],[[["dot",3]],["bool",15]],[[["dot2",3]],["bool",15]],[[["dot3",3]],["bool",15]],[[["dotdoteq",3]],["bool",15]],[[["eq",3]],["bool",15]],[[["eqeq",3]],["bool",15]],[[["ge",3]],["bool",15]],[[["gt",3]],["bool",15]],[[["le",3]],["bool",15]],[[["lt",3]],["bool",15]],[[["muleq",3]],["bool",15]],[[["ne",3]],["bool",15]],[[["or",3]],["bool",15]],[[["oreq",3]],["bool",15]],[[["oror",3]],["bool",15]],[[["pound",3]],["bool",15]],[[["question",3]],["bool",15]],[[["rarrow",3]],["bool",15]],[[["larrow",3]],["bool",15]],[[["rem",3]],["bool",15]],[[["remeq",3]],["bool",15]],[[["fatarrow",3]],["bool",15]],[[["semi",3]],["bool",15]],[[["shl",3]],["bool",15]],[[["shleq",3]],["bool",15]],[[["shr",3]],["bool",15]],[[["shreq",3]],["bool",15]],[[["star",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["subeq",3]],["bool",15]],[[["tilde",3]],["bool",15]],[[["brace",3]],["bool",15]],[[["bracket",3]],["bool",15]],[[["paren",3]],["bool",15]],[[["group",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usizeintoiterator",8]]],[[["intoiterator",8]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],[[["span",3],["str",15]],["ident",3]],[[],["span",3]],[[["span",3]]],[[],[["result",6],["meta",4]]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],[[["parsestream",6]],[["vec",3],["result",6]]],[[],["path",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["field",3],["iter",3]]],[[],[["field",3],["itermut",3]]],[[],["usize",15]],[[],["bool",15]],[[],["typeparams",3]],[[],["typeparamsmut",3]],[[],["lifetimes",3]],[[],["lifetimesmut",3]],[[],["constparams",3]],[[],["constparamsmut",3]],[[],["whereclause",3]],[[]],[[],["turbofish",3]],[[["lifetime",3]]],[[["span",3],["str",15]]],[[],["span",3]],[[["span",3]]],[[["literal",3]]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["span",3],["str",15]]],[[],["string",3]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3]]],[[],[["vec",3],["u8",15]]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3],["u8",15]]],[[],["u8",15]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["char",15],["span",3]]],[[],["char",15]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3],["str",15]]],[[],["str",15]],[[],["result",6]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["span",3],["str",15]]],[[],["str",15]],[[],["result",6]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["bool",15],["span",3]]],[[],["bool",15]],[[],["span",3]],[[["span",3]]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],["bool",15]],[[],[["option",4],["ident",3]]],[[],["bool",15]],[[["abi",3]]],[[["anglebracketedgenericarguments",3]]],[[["attrstyle",4]]],[[["attribute",3]]],[[["barefnarg",3]]],[[["binop",4]]],[[["binding",3]]],[[["boundlifetimes",3]]],[[["constparam",3]]],[[["constraint",3]]],[[["data",4]]],[[["dataenum",3]]],[[["datastruct",3]]],[[["dataunion",3]]],[[["deriveinput",3]]],[[["expr",4]]],[[["exprbinary",3]]],[[["exprcall",3]]],[[["exprcast",3]]],[[["exprfield",3]]],[[["exprindex",3]]],[[["exprlit",3]]],[[["exprparen",3]]],[[["exprpath",3]]],[[["exprunary",3]]],[[["field",3]]],[[["fields",4]]],[[["fieldsnamed",3]]],[[["fieldsunnamed",3]]],[[["genericargument",4]]],[[["genericparam",4]]],[[["generics",3]]],[[["ident",3]]],[[["index",3]]],[[["lifetime",3]]],[[["lifetimedef",3]]],[[["lit",4]]],[[["litbool",3]]],[[["litbyte",3]]],[[["litbytestr",3]]],[[["litchar",3]]],[[["litfloat",3]]],[[["litint",3]]],[[["litstr",3]]],[[["macro",3]]],[[["macrodelimiter",4]]],[[["member",4]]],[[["meta",4]]],[[["metalist",3]]],[[["metanamevalue",3]]],[[["nestedmeta",4]]],[[["parenthesizedgenericarguments",3]]],[[["path",3]]],[[["patharguments",4]]],[[["pathsegment",3]]],[[["predicateeq",3]]],[[["predicatelifetime",3]]],[[["predicatetype",3]]],[[["qself",3]]],[[["returntype",4]]],[[["span",3]]],[[["traitbound",3]]],[[["traitboundmodifier",4]]],[[["type",4]]],[[["typearray",3]]],[[["typebarefn",3]]],[[["typegroup",3]]],[[["typeimpltrait",3]]],[[["typeinfer",3]]],[[["typemacro",3]]],[[["typenever",3]]],[[["typeparam",3]]],[[["typeparambound",4]]],[[["typeparen",3]]],[[["typepath",3]]],[[["typeptr",3]]],[[["typereference",3]]],[[["typeslice",3]]],[[["typetraitobject",3]]],[[["typetuple",3]]],[[["unop",4]]],[[["variadic",3]]],[[["variant",3]]],[[["viscrate",3]]],[[["vispublic",3]]],[[["visrestricted",3]]],[[["visibility",4]]],[[["whereclause",3]]],[[["wherepredicate",4]]],[[["peek",8]],["bool",15]],[[],["error",3]]],"p":[[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[3,"Punctuated"],[4,"Pair"],[8,"Spanned"],[8,"Visit"],[8,"Speculative"],[8,"Parse"],[3,"StepCursor"],[3,"ParseBuffer"],[8,"Parser"],[3,"Error"],[4,"AttrStyle"],[3,"Attribute"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Field"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[4,"Visibility"],[4,"Expr"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"Index"],[4,"Member"],[3,"BoundLifetimes"],[3,"ConstParam"],[4,"GenericParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"TypeParam"],[4,"TypeParamBound"],[3,"WhereClause"],[4,"WherePredicate"],[3,"Lifetime"],[4,"Lit"],[3,"LitBool"],[4,"StrStyle"],[3,"Macro"],[4,"MacroDelimiter"],[4,"Data"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[4,"BinOp"],[4,"UnOp"],[3,"Abi"],[3,"BareFnArg"],[4,"ReturnType"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[4,"GenericArgument"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[4,"PathArguments"],[3,"PathSegment"],[3,"QSelf"],[3,"Ident"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprLet"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]},\
"synstructure":{"doc":"This crate provides helper types for matching against …","t":[4,13,13,13,13,4,13,13,13,13,3,12,12,11,11,11,3,12,12,12,12,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,8,10,11,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AddBounds","Both","Fields","Generics","None","BindStyle","Move","MoveMut","Ref","RefMut","BindingInfo","binding","style","ast","pat","referenced_ty_params","VariantAst","attrs","ident","fields","discriminant","VariantInfo","prefix","bindings","bindings_mut","ast","omitted_bindings","pat","construct","each","fold","filter","remove_binding","bind_with","binding_name","referenced_ty_params","Structure","new","try_new","variants","variants_mut","ast","omitted_variants","each","fold","each_variant","filter","add_where_predicate","add_bounds","filter_variants","remove_variant","bind_with","binding_name","referenced_ty_params","add_impl_generic","add_trait_bounds","underscore_const","bound_impl","unsafe_bound_impl","unbound_impl","unsafe_unbound_impl","gen_impl","unpretty_print","MacroResult","into_result","into_stream","decl_derive","decl_attribute","test_derive","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","clone","clone","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","hash","to_tokens","to_tokens"],"q":["synstructure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Changes how bounds are added","Add for fields and generics","Fields only","Generics only","None","The type of binding to use when generating a pattern.","<code>x</code>","<code>mut x</code>","<code>ref x</code>","<code>ref mut x</code>","Information about a specific binding. This contains both …","The name which this BindingInfo will bind to.","The type of binding which this BindingInfo will create.","Returns a reference to the underlying <code>syn</code> AST node which …","Generates the pattern fragment for this field binding.","Returns a list of the type parameters which are …","This type is similar to <code>syn</code>’s <code>Variant</code> type, however …","","","","","A wrapper around a <code>syn::DeriveInput</code>’s variant which …","","Returns a slice of the bindings in this Variant.","Returns a mut slice of the bindings in this Variant.","Returns a <code>VariantAst</code> object which contains references to …","True if any bindings were omitted due to a <code>filter</code> call.","Generates the match-arm pattern which could be used to …","Generates the token stream required to construct the …","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each bound field, …","Filter the bindings created by this <code>Variant</code> object. This …","Remove the binding at the given index.","Updates the <code>BindStyle</code> for each of the passed-in fields by …","Updates the binding name for each fo the passed-in fields …","Returns a list of the type parameters which are …","A wrapper around a <code>syn::DeriveInput</code> which provides …","Create a new <code>Structure</code> with the variants and fields from …","Create a new <code>Structure</code> with the variants and fields from …","Returns a slice of the variants in this Structure.","Returns a mut slice of the variants in this Structure.","Returns a reference to the underlying <code>syn</code> AST node which …","True if any variants were omitted due to a <code>filter_variants</code>…","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each variant, …","Filter the bindings created by this <code>Structure</code> object. …","Specify additional where predicate bounds which should be …","Specify which bounds should be generated by …","Filter the variants matched by this <code>Structure</code> object. …","Remove the variant at the given index.","Updates the <code>BindStyle</code> for each of the passed-in fields by …","Updates the binding name for each fo the passed-in fields …","Returns a list of the type parameters which are refrenced …","Adds an <code>impl<></code> generic parameter. This can be used when …","Add trait bounds for a trait with the given path for each …","Configure whether to use <code>const _</code> instead of a generated …","NOTE: This methods’ features are superceded by …","NOTE: This methods’ features are superceded by …","NOTE: This methods’ features are superceded by …","NOTE: This methods’ features are superceded by …","Generate an impl block for the given struct. This impl …","Dumps an unpretty version of a tokenstream. Takes any …","Helper trait describing values which may be returned by …","Convert this result into a <code>Result</code> for further processing …","Convert this result into a <code>proc_macro::TokenStream</code>, ready …","The <code>decl_derive!</code> macro declares a custom derive wrapper. …","The <code>decl_attribute!</code> macro declares a custom attribute …","Run a test on a custom derive. This macro expands both …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,0,2,2,2,2,0,3,3,3,3,3,0,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,7,7,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,1,2,3,4,5,6,1,2,3,3,4,4,5,5,6,6,1,2,3,4,5,6,1,2,3,4,5,6,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["field",3]],[[],["tokenstream",3]],[[],[["vec",3],["ident",3]]],null,null,null,null,null,null,null,[[]],[[]],[[],["variantast",3]],[[],["bool",15]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[]],[[["usize",15]]],[[]],[[]],[[],[["vec",3],["ident",3]]],null,[[["deriveinput",3]]],[[["deriveinput",3]],["result",6]],[[]],[[]],[[],["deriveinput",3]],[[],["bool",15]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[]],[[["wherepredicate",4]]],[[["addbounds",4]]],[[]],[[["usize",15]]],[[]],[[]],[[],[["vec",3],["ident",3]]],[[["genericparam",4]]],[[["traitbound",3],["addbounds",4],["option",4]]],[[["bool",15]]],[[["totokens",8]],["tokenstream",3]],[[["totokens",8]],["tokenstream",3]],[[["totokens",8]],["tokenstream",3]],[[["totokens",8]],["tokenstream",3]],[[["tokenstream",3]],["tokenstream",3]],[[["display",8]],["string",3]],null,[[],[["result",6],["tokenstream",3]]],[[],["tokenstream",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["addbounds",4]],[[],["bindstyle",4]],[[],["bindinginfo",3]],[[],["variantast",3]],[[],["variantinfo",3]],[[],["structure",3]],[[["addbounds",4]],["bool",15]],[[["bindstyle",4]],["bool",15]],[[["bindinginfo",3]],["bool",15]],[[["bindinginfo",3]],["bool",15]],[[["variantast",3]],["bool",15]],[[["variantast",3]],["bool",15]],[[["variantinfo",3]],["bool",15]],[[["variantinfo",3]],["bool",15]],[[["structure",3]],["bool",15]],[[["structure",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]]],"p":[[4,"AddBounds"],[4,"BindStyle"],[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[3,"Structure"],[8,"MacroResult"]]},\
"tap":{"doc":"<code>tap</code> – Syntactical Plumb-Lines","t":[0,8,11,8,11,0,8,11,11,11,11,11,11,11,11,11,0,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,10,10,11,11,11,8,16,16,10,10,10,10,11,11,11,11,0,8,11,8,11,8,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,10,10,11,11,11,8,16,16,10,10,10,10,11,11,11,11,8,11,8,11,8,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,10,10,11,11,11,8,16,16,10,10,10,10,11,11,11,11],"n":["conv","Conv","conv","TryConv","try_conv","pipe","Pipe","pipe","pipe_ref","pipe_ref_mut","pipe_borrow","pipe_borrow_mut","pipe_as_ref","pipe_as_mut","pipe_deref","pipe_deref_mut","tap","Tap","tap","tap_mut","tap_borrow","tap_borrow_mut","tap_ref","tap_ref_mut","tap_deref","tap_deref_mut","tap_dbg","tap_mut_dbg","tap_borrow_dbg","tap_borrow_mut_dbg","tap_ref_dbg","tap_ref_mut_dbg","tap_deref_dbg","tap_deref_mut_dbg","TapOptional","Val","tap_some","tap_some_mut","tap_none","tap_some_dbg","tap_some_mut_dbg","tap_none_dbg","TapFallible","Ok","Err","tap_ok","tap_ok_mut","tap_err","tap_err_mut","tap_ok_dbg","tap_ok_mut_dbg","tap_err_dbg","tap_err_mut_dbg","prelude","Conv","conv","TryConv","try_conv","Pipe","pipe","pipe_ref","pipe_ref_mut","pipe_borrow","pipe_borrow_mut","pipe_as_ref","pipe_as_mut","pipe_deref","pipe_deref_mut","Tap","tap","tap_mut","tap_borrow","tap_borrow_mut","tap_ref","tap_ref_mut","tap_deref","tap_deref_mut","tap_dbg","tap_mut_dbg","tap_borrow_dbg","tap_borrow_mut_dbg","tap_ref_dbg","tap_ref_mut_dbg","tap_deref_dbg","tap_deref_mut_dbg","TapOptional","Val","tap_some","tap_some_mut","tap_none","tap_some_dbg","tap_some_mut_dbg","tap_none_dbg","TapFallible","Ok","Err","tap_ok","tap_ok_mut","tap_err","tap_err_mut","tap_ok_dbg","tap_ok_mut_dbg","tap_err_dbg","tap_err_mut_dbg","Conv","conv","TryConv","try_conv","Pipe","pipe","pipe_ref","pipe_ref_mut","pipe_borrow","pipe_borrow_mut","pipe_as_ref","pipe_as_mut","pipe_deref","pipe_deref_mut","Tap","tap","tap_mut","tap_borrow","tap_borrow_mut","tap_ref","tap_ref_mut","tap_deref","tap_deref_mut","tap_dbg","tap_mut_dbg","tap_borrow_dbg","tap_borrow_mut_dbg","tap_ref_dbg","tap_ref_mut_dbg","tap_deref_dbg","tap_deref_mut_dbg","TapOptional","Val","tap_some","tap_some_mut","tap_none","tap_some_dbg","tap_some_mut_dbg","tap_none_dbg","TapFallible","Ok","Err","tap_ok","tap_ok_mut","tap_err","tap_err_mut","tap_ok_dbg","tap_ok_mut_dbg","tap_err_dbg","tap_err_mut_dbg"],"q":["tap","tap::conv","","","","tap","tap::pipe","","","","","","","","","","tap","tap::tap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tap","tap::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Method-Directed Type Conversion","Wraps <code>Into::<T>::into</code> as a method that can be placed in …","Converts <code>self</code> into <code>T</code> using <code>Into<T></code>.","Wraps <code>TryInto::<T>::try_into</code> as a method that can be …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto<T></code>.","Universal Suffix Calls","Provides universal suffix-position call syntax for any …","Pipes by value. This is generally the method you want to …","Borrows <code>self</code> and passes that borrow into the pipe …","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Point-Free Inspection","Point-free value inspection and modification.","Immutable access to a value.","Mutable access to a value.","Immutable access to the <code>Borrow<B></code> of a value.","Mutable access to the <code>BorrowMut<B></code> of a value.","Immutable access to the <code>AsRef<R></code> view of a value.","Mutable access to the <code>AsMut<R></code> view of a value.","Immutable access to the <code>Deref::Target</code> of a value.","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap()</code> only in debug builds, and is erased in …","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Calls <code>.tap_borrow()</code> only in debug builds, and is erased …","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Calls <code>.tap_deref_mut()</code> only in debug builds, and is …","Optional tapping, conditional on the optional presence of …","The interior type that the container may or may not carry.","Immutabily accesses an interior value only when it is …","Mutably accesses an interor value only when it is present.","Runs an effect function when the container is empty.","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Fallible tapping, conditional on the optional success of …","The interior type used to indicate a successful …","The interior type used to indicate a failed construction.","Immutably accesses an interior success value.","Mutably accesses an interior success value.","Immutably accesses an interior failure value.","Mutably accesses an interior failure value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Reëxports all traits in one place, for easy import.","Wraps <code>Into::<T>::into</code> as a method that can be placed in …","Converts <code>self</code> into <code>T</code> using <code>Into<T></code>.","Wraps <code>TryInto::<T>::try_into</code> as a method that can be …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto<T></code>.","Provides universal suffix-position call syntax for any …","Pipes by value. This is generally the method you want to …","Borrows <code>self</code> and passes that borrow into the pipe …","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Point-free value inspection and modification.","Immutable access to a value.","Mutable access to a value.","Immutable access to the <code>Borrow<B></code> of a value.","Mutable access to the <code>BorrowMut<B></code> of a value.","Immutable access to the <code>AsRef<R></code> view of a value.","Mutable access to the <code>AsMut<R></code> view of a value.","Immutable access to the <code>Deref::Target</code> of a value.","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap()</code> only in debug builds, and is erased in …","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Calls <code>.tap_borrow()</code> only in debug builds, and is erased …","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Calls <code>.tap_deref_mut()</code> only in debug builds, and is …","Optional tapping, conditional on the optional presence of …","The interior type that the container may or may not carry.","Immutabily accesses an interior value only when it is …","Mutably accesses an interor value only when it is present.","Runs an effect function when the container is empty.","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Fallible tapping, conditional on the optional success of …","The interior type used to indicate a successful …","The interior type used to indicate a failed construction.","Immutably accesses an interior success value.","Mutably accesses an interior success value.","Immutably accesses an interior failure value.","Mutably accesses an interior failure value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Wraps <code>Into::<T>::into</code> as a method that can be placed in …","Converts <code>self</code> into <code>T</code> using <code>Into<T></code>.","Wraps <code>TryInto::<T>::try_into</code> as a method that can be …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto<T></code>.","Provides universal suffix-position call syntax for any …","Pipes by value. This is generally the method you want to …","Borrows <code>self</code> and passes that borrow into the pipe …","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Point-free value inspection and modification.","Immutable access to a value.","Mutable access to a value.","Immutable access to the <code>Borrow<B></code> of a value.","Mutable access to the <code>BorrowMut<B></code> of a value.","Immutable access to the <code>AsRef<R></code> view of a value.","Mutable access to the <code>AsMut<R></code> view of a value.","Immutable access to the <code>Deref::Target</code> of a value.","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap()</code> only in debug builds, and is erased in …","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Calls <code>.tap_borrow()</code> only in debug builds, and is erased …","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Calls <code>.tap_deref_mut()</code> only in debug builds, and is …","Optional tapping, conditional on the optional presence of …","The interior type that the container may or may not carry.","Immutabily accesses an interior value only when it is …","Mutably accesses an interor value only when it is present.","Runs an effect function when the container is empty.","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Fallible tapping, conditional on the optional success of …","The interior type used to indicate a successful …","The interior type used to indicate a failed construction.","Immutably accesses an interior success value.","Mutably accesses an interior success value.","Immutably accesses an interior failure value.","Mutably accesses an interior failure value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased …","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …"],"i":[0,0,1,0,2,0,0,3,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,0,0,1,0,2,0,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,0,1,0,2,0,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6],"f":[null,null,[[]],null,[[],["result",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],null,[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"Conv"],[8,"TryConv"],[8,"Pipe"],[8,"Tap"],[8,"TapOptional"],[8,"TapFallible"]]},\
"trussed":{"doc":"Trussed","t":[0,0,3,12,12,12,12,3,12,12,3,3,12,12,12,12,12,12,3,12,3,12,3,12,12,12,12,3,12,12,12,12,3,12,12,12,12,12,3,12,12,3,12,12,3,12,12,3,12,12,3,12,12,12,3,12,12,12,3,3,12,12,12,3,3,12,12,3,12,12,3,12,12,3,12,12,3,12,3,12,12,12,3,12,12,12,12,3,12,12,12,12,3,12,12,12,3,12,12,3,12,12,12,12,12,3,12,12,12,12,12,3,12,12,12,12,3,12,12,3,12,3,3,12,3,12,3,12,3,12,3,12,12,0,3,12,3,12,3,3,12,3,12,3,12,3,12,3,12,3,12,12,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,3,12,3,3,12,3,12,3,12,3,3,12,3,12,3,12,3,12,3,12,3,12,3,3,12,3,12,3,12,3,3,12,3,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,8,11,11,8,11,11,11,11,11,8,11,11,8,11,11,8,11,11,8,11,11,8,11,11,11,11,11,11,8,11,11,11,11,11,11,11,8,11,11,8,11,11,8,11,8,11,11,11,4,13,13,13,6,8,8,10,10,10,3,11,11,3,11,8,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,8,11,11,11,11,11,11,11,11,11,11,11,8,11,11,8,11,0,6,6,6,6,6,6,6,6,6,6,6,6,6,17,0,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,3,6,6,3,12,12,12,3,12,12,11,4,13,13,13,13,13,13,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,11,11,11,11,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,13,13,13,3,12,12,0,8,8,10,10,10,10,8,10,10,10,10,10,8,16,16,16,10,10,10,8,10,0,0,17,17,5,3,3,4,13,13,4,13,3,12,4,13,13,3,11,11,11,4,3,3,11,11,3,3,4,13,13,8,10,10,10,10,8,16,10,11,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,3,11,3,11,11,11,11,11,11,11,11,11,11,0,0,3,8,10,10,10,11,0,3,6,11,8,18,10,11,10,0,3,3,6,3,11,11,11,8,10,10,10,10,10,10,10,10,10,10,10,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,6,3,11,17,8,10,10,10,10,10,10,10,10,10,11,11,11,8,16,16,16,10,10,10,3,11,5,5,5,5,5,5,5,5,0,0,4,13,13,13,13,0,4,13,13,0,4,13,13,13,4,13,13,4,13,13,13,13,6,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,8,18,18,18,18,18,16,16,16,16,18,16,10,10,10,6,3,3,6,8,11,11,3,11,11,3,11,11,3,11,11,6,4,13,13,13,13,4,13,13,3,12,12,3,11,3,12,4,13,13,13,13,3,3,4,13,13,13,3,12,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,6,6,6,4,13,13,13,13,6,4,13,13,6,8,18,16,16,10,10,10,5,5,5,8,16,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,5,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["api","request","Agree","mechanism","private_key","public_key","attributes","Attest","signing_mechanism","private_key","DebugDumpStore","Decrypt","mechanism","key","message","associated_data","nonce","tag","Delete","key","DeleteAllKeys","location","DeriveKey","mechanism","base_key","additional_data","attributes","DeserializeKey","mechanism","serialized_key","format","attributes","Encrypt","mechanism","key","message","associated_data","nonce","Exists","mechanism","key","GenerateKey","mechanism","attributes","GenerateSecretKey","size","attributes","Hash","mechanism","message","LocateFile","location","dir","filename","ReadDirFilesFirst","location","dir","user_attribute","ReadDirFilesNext","ReadDirFirst","location","dir","not_before_filename","ReadDirNext","ReadFile","location","path","RemoveFile","location","path","RemoveDir","location","path","RemoveDirAll","location","path","RandomBytes","count","SerializeKey","mechanism","key","format","Sign","mechanism","key","message","format","WriteFile","location","path","data","user_attribute","UnsafeInjectKey","mechanism","raw_key","attributes","UnsafeInjectSharedKey","location","raw_key","UnwrapKey","mechanism","wrapping_key","wrapped_key","associated_data","attributes","Verify","mechanism","key","message","signature","format","WrapKey","mechanism","wrapping_key","key","associated_data","RequestUserConsent","level","timeout_milliseconds","Reboot","to","Uptime","CreateCounter","location","IncrementCounter","id","DeleteCertificate","id","ReadCertificate","id","WriteCertificate","location","der","reply","Agree","shared_secret","Attest","certificate","DebugDumpStore","Decrypt","plaintext","Delete","success","DeleteAllKeys","count","DeriveKey","key","DeserializeKey","key","Encrypt","ciphertext","nonce","tag","Exists","exists","GenerateKey","key","GenerateSecretKey","key","Hash","hash","LocateFile","path","ReadDirFilesFirst","data","ReadDirFilesNext","data","ReadDirFirst","entry","ReadDirNext","entry","ReadFile","data","RemoveDir","RemoveDirAll","count","RemoveFile","RandomBytes","bytes","SerializeKey","serialized_key","Sign","signature","WriteFile","Verify","valid","UnsafeInjectKey","key","UnsafeInjectSharedKey","key","UnwrapKey","key","WrapKey","wrapped_key","RequestUserConsent","result","Reboot","Uptime","uptime","CreateCounter","id","IncrementCounter","counter","DeleteCertificate","ReadCertificate","der","WriteCertificate","id","Request","DummyRequest","Agree","Decrypt","DeriveKey","DeserializeKey","Encrypt","Delete","DeleteAllKeys","Exists","GenerateKey","GenerateSecretKey","Hash","ReadDirFilesFirst","ReadDirFilesNext","ReadFile","RandomBytes","SerializeKey","Sign","WriteFile","UnsafeInjectKey","UnsafeInjectSharedKey","UnwrapKey","Verify","WrapKey","Attest","ReadDirFirst","ReadDirNext","RemoveFile","RemoveDir","RemoveDirAll","LocateFile","RequestUserConsent","Reboot","Uptime","CreateCounter","IncrementCounter","DeleteCertificate","ReadCertificate","WriteCertificate","DebugDumpStore","Reply","DummyReply","Agree","Decrypt","DeriveKey","DeserializeKey","Encrypt","Delete","DeleteAllKeys","Exists","GenerateKey","GenerateSecretKey","Hash","ReadDirFilesFirst","ReadDirFilesNext","ReadFile","RandomBytes","SerializeKey","Sign","WriteFile","UnsafeInjectKey","UnsafeInjectSharedKey","UnwrapKey","Verify","WrapKey","Attest","ReadDirFirst","ReadDirNext","RemoveFile","RemoveDir","RemoveDirAll","LocateFile","RequestUserConsent","Reboot","Uptime","CreateCounter","IncrementCounter","DeleteCertificate","ReadCertificate","WriteCertificate","DebugDumpStore","client","mechanisms","Aes256Cbc","decrypt_aes256cbc","wrap_key_aes256cbc","Chacha8Poly1305","decrypt_chacha8poly1305","encrypt_chacha8poly1305","generate_chacha8poly1305_key","unwrap_key_chacha8poly1305","wrap_key_chacha8poly1305","HmacBlake2s","hmacblake2s_derive_key","sign_hmacblake2s","HmacSha1","hmacsha1_derive_key","sign_hmacsha1","HmacSha256","hmacsha256_derive_key","sign_hmacsha256","HmacSha512","hmacsha512_derive_key","sign_hmacsha512","Ed255","generate_ed255_private_key","derive_ed255_public_key","deserialize_ed255_key","serialize_ed255_key","sign_ed255","verify_ed255","P256","generate_p256_private_key","derive_p256_public_key","deserialize_p256_key","serialize_p256_key","sign_p256","verify_p256","agree_p256","Sha256","sha256_derive_key","hash_sha256","Tdes","decrypt_tdes","encrypt_tdes","Totp","sign_totp","X255","generate_x255_secret_key","derive_x255_public_key","agree_x255","ClientError","Full","Pending","DataTooLarge","ClientResult","Client","PollClient","request","poll","syscall","FutureResult","new","poll","ClientImplementation","new","CertificateClient","delete_certificate","read_certificate","write_certificate","CryptoClient","agree","attest","decrypt","delete","delete_all","derive_key","deserialize_key","encrypt","exists","generate_key","generate_secret_key","hash","random_bytes","serialize_key","sign","verify","unsafe_inject_key","unsafe_inject_shared_key","unwrap_key","wrap_key","CounterClient","create_counter","increment_counter","FilesystemClient","debug_dump_store","read_dir_first","read_dir_next","read_dir_files_first","read_dir_files_next","remove_dir","remove_dir_all","remove_file","read_file","locate_file","write_file","ManagementClient","reboot","uptime","UiClient","confirm_user_present","config","MAX_APPLICATION_NAME_LENGTH","MAX_LONG_DATA_LENGTH","MAX_MESSAGE_LENGTH","MAX_OBJECT_HANDLES","MAX_LABEL_LENGTH","MAX_MEDIUM_DATA_LENGTH","MAX_PATH_LENGTH","MAX_KEY_MATERIAL_LENGTH","MAX_SERIALIZED_KEY_LENGTH","MAX_SERVICE_CLIENTS","MAX_SHORT_DATA_LENGTH","MAX_SIGNATURE_LENGTH","MAX_USER_ATTRIBUTE_LENGTH","USER_ATTRIBUTE_NUMBER","error","Result","Error","HostMemory","GeneralError","FunctionFailed","FunctionNotSupported","MechanismInvalid","MechanismParamInvalid","ObjectHandleInvalid","AeadError","CborError","EntropyMalfunction","FilesystemReadFailure","FilesystemWriteFailure","ImplementationError","InternalError","InvalidSerializedKey","InvalidSerializationFormat","MechanismNotAvailable","NonceOverflow","NoSuchCertificate","NoSuchKey","NotJustLetters","RequestNotAvailable","SignDataTooLarge","WrongKeyKind","WrongMessageLength","WrongSignatureLength","key","Bytes","Material","SerializedKeyBytes","Key","flags","kind","material","Info","flags","kind","with_local_flag","Kind","Shared","Symmetric","Symmetric32Nonce","Ed255","P256","X255","Flags","LOCAL","SENSITIVE","empty","all","bits","from_bits","from_bits_truncate","from_bits_unchecked","is_empty","is_all","intersects","contains","insert","remove","toggle","set","Secrecy","Public","Secret","serialize","try_deserialize","code","try_from","mechanisms","Aes256Cbc","Chacha8Poly1305","Ed255","HmacBlake2s","HmacSha1","HmacSha256","HmacSha512","P256","P256Prehashed","Sha256","Tdes","Totp","Trng","X255","pipe","TrussedInterchange","Request","Response","None","ServiceEndpoint","interchange","client_id","platform","CryptoRng","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","UserInterface","check_user_presence","set_status","refresh","uptime","reboot","Platform","R","S","UI","rng","store","user_interface","Syscall","syscall","service","attest","ED255_ATTN_KEY","P256_ATTN_KEY","try_attest","TbsCertificate","Certificate","SerializedSignature","Ed255","P256","Version","V3","BigEndianInteger","0","SignatureAlgorithm","Ed255","P256","Name","with_country","with_organization","with_state","Extension","Extensions","ParsedDatetime","new","to_bytes","Datetime","Validity","SerializedSubjectPublicKey","Ed255","P256","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","Agree","agree","Decrypt","decrypt","DeriveKey","derive_key","DeserializeKey","deserialize_key","Encrypt","encrypt","Exists","exists","GenerateKey","generate_key","Hash","hash","SerializeKey","serialize_key","Sign","sign","UnsafeInjectKey","unsafe_inject_key","UnwrapKey","unwrap_key","Verify","verify","WrapKey","wrap_key","ServiceResources","new","Service","reply_to","rng","fill_random_bytes","new","try_new_client","try_as_new_client","add_endpoint","set_seed_if_uninitialized","update_ui","process","store","certstore","ClientCertstore","Certstore","delete_certificate","read_certificate","write_certificate","new","counterstore","ClientCounterstore","Counter","new","Counterstore","DEFAULT_START_AT","create_starting_at","create","increment","filestore","ReadDirState","ReadDirFilesState","ClientId","ClientFilestore","new","actual_path","client_path","Filestore","read","write","exists","remove_file","remove_dir","remove_dir_all","locate_file","read_dir_first","read_dir_next","read_dir_files_first","read_dir_files_next","keystore","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","ClientId","ClientKeystore","new","SERIALIZATION_VERSION","Keystore","store_key","exists_key","key_info","delete_key","delete_all","load_key","overwrite_key","rng","location","generate_key_id","key_directory","key_path","Store","I","E","V","ifs","efs","vfs","Fs","new","create_directories","read","write","store","delete","exists","remove_dir","remove_dir_all_where","types","ui","Status","Idle","WaitingForUserPresence","Processing","Error","reboot","To","Application","ApplicationUpdate","consent","Level","None","Normal","Strong","Urgency","InterruptOthers","FailIfOthers","Error","FailedToInterrupt","Interrupted","TimedOut","TimeoutNotImplemented","Result","GenericArray","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","String","Vec","Bytes","DirEntry","Filesystem","LfsStorage","READ_SIZE","WRITE_SIZE","BLOCK_SIZE","BLOCK_COUNT","BLOCK_CYCLES","CACHE_SIZE","LOOKAHEADWORDS_SIZE","FILENAME_MAX_PLUS_ONE","PATH_MAX_PLUS_ONE","FILEBYTES_MAX","ATTRBYTES_MAX","read","write","erase","LfsResult","PathBuf","Id","SpecialId","ObjectId","is_special","hex","CertId","new","from_special","CounterId","new","from_special","KeyId","new","from_special","ClientId","Attributes","Certificate","Counter","Data","Key","CertificateType","PublicKey","Attribute","DataAttributes","kind","value","KeyAttributes","new","Letters","0","ObjectType","Certificate","Counter","Data","Key","PublicKeyAttributes","PrivateKeyAttributes","Location","Volatile","Internal","External","StorageAttributes","persistence","set_persistence","new","Mechanism","Aes256Cbc","Chacha8Poly1305","Ed255","HmacBlake2s","HmacSha1","HmacSha256","HmacSha512","P256","P256Prehashed","Sha256","Tdes","Totp","Trng","X255","LongData","MediumData","ShortData","Message","KeySerialization","Cose","EcdhEsHkdf256","Raw","Sec1","Signature","SignatureSerialization","Asn1Der","Raw","UserAttribute","Interchange","CLIENT_CAPACITY","REQUEST","RESPONSE","claim","unclaimed_clients","reset_claims","cbor_serialize","cbor_serialize_bytes","cbor_deserialize","ArrayLength","ArrayType","Bytes","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","postcard_deserialize","postcard_serialize","postcard_serialize_bytes","try_debug","try_error","try_info","try_trace","try_warn","log","debug","error","info","trace","warn","log_now","debug_now","error_now","info_now","trace_now","warn_now","try_log_now","try_debug_now","try_error_now","try_info_now","try_trace_now","try_warn_now","block","syscall","try_syscall","platform","store","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","as_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","encoded_length","encode","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","as_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_bits","as_bits_mut","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","drop","fmt","clone","clone","hash","hash","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","deref","deref","as_ref","as_ref","as_ref","as_ref","from_iter","deref_mut","deref_mut","deserialize","deserialize","extend","extend","default","default","fmt","fmt","from_str","as_mut","as_mut","from","from","from","from","from","from","from","from","from","into_iter","write_str","write_str","write_char","hash","hash","serialize","serialize","concat","clone","borrow_mut","borrow","append","prepend","eq","deref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","partial_cmp","from_iter","deref_mut","fmt","fmt","split","default","fmt","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into_iter","map","zip","fold","generate","hash","cmp","pop_back","pop_front","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","as_slice","as_mut_slice","default","fmt","serialize","as_mut","clone","from","into_iter","eq","hash","deref","as_ref","partial_cmp","deserialize","deref_mut","fmt","clone","clone","serialize","serialize","eq","eq","ne","deref","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","deserialize","deserialize","from","from","from","from","from","poll","request","syscall","delete_certificate","read_certificate","write_certificate","create_starting_at","increment","read","write","exists","remove_file","remove_dir","remove_dir_all","read_dir_first","read_dir_next","read_dir_files_first","read_dir_files_next","locate_file","rng","store_key","exists_key","key_info","delete_key","delete_all","load_key","overwrite_key","location","agree","agree","decrypt","decrypt","decrypt","derive_key","derive_key","derive_key","derive_key","derive_key","derive_key","deserialize_key","deserialize_key","deserialize_key","encrypt","encrypt","encrypt","exists","exists","exists","exists","generate_key","generate_key","generate_key","generate_key","generate_key","hash","serialize_key","serialize_key","serialize_key","sign","sign","sign","sign","sign","sign","unwrap_key","verify","verify","wrap_key","wrap_key","deref","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","eq","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","sub_assign","not","bitand","bitor","bitxor","bitand_assign","bitor_assign","bitxor_assign","hash","try_from","try_from","from_iter","fmt","fmt","fmt","fmt","extend","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","as_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","reset_claims","claim","unclaimed_clients","is_request_state","is_response_state","rq","rq_ref","rq_mut","rp","rp_ref","rp_mut","from_rq","from_rp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","zeroize","zeroize","zeroize","zeroize","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","encoded_length","encode","tag","fields","fields","new","from","into_inner","into_vec","as_slice","as_mut_slice","try_convert_into","try_from_slice","try_from","insert_slice_at","insert","remove","resize_default","resize_to_capacity","to_bytes","try_to_bytes","from_serialized","new","new","new","as_slice","as_mut_slice","from_slice","from_mut_slice","clone_from_slice","from_exact_iter","new","from_utf8","from_utf8_unchecked","into_bytes","as_str","as_mut_str","as_mut_vec","push_str","capacity","push","truncate","pop","clear","new","from_slice","capacity","clear","extend_from_slice","pop","push","truncate","resize","resize_default","set_len","swap_remove","starts_with","ends_with","metadata","file_type","file_name","path","allocate","format","is_mountable","borrow_storage_mut","mount_and_then","total_blocks","total_space","available_blocks","available_space","remove","remove_dir","remove_dir_all","remove_dir_all_where","rename","metadata","create_file_and_then","open_file_and_then","with_options","open_file_with_options_and_then","attribute","remove_attribute","set_attribute","read_dir_and_then","read_dir","mount","into_inner","create_dir","create_dir_all","read","write","new","clear","push"],"q":["trussed","trussed::api","trussed::api::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed","trussed::client","trussed::client::mechanisms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed","trussed::config","","","","","","","","","","","","","","trussed","trussed::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed","trussed::key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed","trussed::mechanisms","","","","","","","","","","","","","","trussed","trussed::pipe","","","","","","","trussed","trussed::platform","","","","","","","","","","","","","","","","","","","","","trussed","trussed::service","trussed::service::attest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::service","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed","trussed::store","trussed::store::certstore","","","","","","trussed::store","trussed::store::counterstore","","","","","","","","trussed::store","trussed::store::filestore","","","","","","","","","","","","","","","","","","","trussed::store","trussed::store::keystore","trussed::store::keystore::conststrussed::store::keystore","","","","","","","","","","","","","","","","","trussed::store","","","","","","","","","","","","","","","","","trussed","trussed::types","trussed::types::ui","","","","","trussed::types","trussed::types::reboot","","","trussed::types","trussed::types::consent","","","","","","","","","","","","","trussed::types","","trussed::types::conststrussed::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed","","","","","","","","","","","","","","trussed::conststrussed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::requesttrussed::api::replytrussed::api","","","","","","","","","","","","","","trussed::client","","","","","","","","","","","","","","","","","","","","","trussed::error","","","","","","","trussed","","","","","","","","","trussed::key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::mechanisms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::pipe","","","","","","","","","","","","","","trussed::service::attest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::service","","","","","","","","","","","","","","trussed::store::certstore","","","","","","","trussed::store::counterstore","","","","","","","trussed::store::filestore","","","","","","","","","","","","","","","","","","","","","trussed::consts","","","","","","","","","","","","","","","","","","","","","","trussed::store::keystore","","","","","","","trussed::store","","","","","","","trussed::types::ui","","","","","","","trussed::types::reboot","","","","","","","trussed::types::consent","","","","","","","","","","","","","","","","","","","","","trussed::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::types","","trussed","","","","","","","","","","","","","","trussed::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::client","","","trussed::store::certstore","","","trussed::store::counterstore","","trussed::store::filestore","","","","","","","","","","","trussed::store::keystore","","","","","","","","","trussed::mechanisms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::store","trussed::types","","","trussed::api","","trussed::api::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::client","trussed::error","trussed::key","","","","","trussed::pipe","trussed::service::attest","trussed::types","","","","trussed::types::ui","trussed::types::reboot","trussed::types::consent","","","trussed::types","","","","","","","","","","","","","trussed::key","trussed::api","","","","trussed::api::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::error","trussed::key","","","","","","","","","trussed::pipe","","trussed::service::attest","","","","","","","","","","","","","","","","","","","","","trussed::types","","","","","","","","trussed::types::ui","trussed::types::reboot","trussed::types::consent","","","trussed::types","","","","","","","","","","","","","","","","","","","","","trussed::key","","trussed::types","","","","trussed::key","","","","","","","","","trussed::service::attest","trussed::types","trussed::key","","","","","","trussed::api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::key","trussed::types","","","trussed::service::attest","trussed::api","","trussed::api::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::client","trussed::error","trussed::key","","","","","trussed::pipe","trussed::service::attest","","","","","","","","","","","","trussed::store::filestore","","trussed::types","","","","trussed::types::ui","trussed::types::reboot","trussed::types::consent","","","trussed::types","","","","","","","","","","","","","trussed::key","trussed::service::attest","trussed::types","","","","trussed::pipe","","","","","","","","","","","","","trussed::api::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::key","","trussed::types","","","trussed::types::ui","trussed::types::reboot","trussed::types::consent","","","trussed::types","","","","","","","","","","trussed::api::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::api::reply","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trussed::key","","trussed::types","","","trussed::types::ui","trussed::types::reboot","trussed::types::consent","","","trussed::types","","","","","","","","","","trussed::key","","","","trussed::service::attest","","","","","","","","","","","","","","","","","","","","","trussed","","","","","","","","","","","","","","","","","trussed::consts","","","trussed::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This (incomplete!) API loosely follows PKCS#11 vlient interface for applications.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All-in-one trait bounding on the sub-traits.","Lowest level interface, use one of the higher level ones.","","","","","","","The client implementation client applications actually …","","Read/Write + Delete certificates","","","Currently, this writes the cert (assumed but not verified …","Trussed Client interface that Trussed apps can rely on.","","","","","Skips deleting read-only / manufacture keys (currently, …","","","","","","","","","","","","This mechanism-specific key injection is deprecated in …","","","","Create counters, increment existing counters.","","","Read/Write/Delete files, iterate over directories.","","","","","","","","","","","","All the other methods that are fit to expose.","","","User-interfacing functionality.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A key object in Trussed.","","","","","","","","","some bytes of entropy, needs a KDF applied, the parameter …","entropic bytes, suitable for use as symmetric secret …","32B symmetric key + nonce, the parameter is the length of …","","","","All non-used bits are RFU.","","","Returns an empty set of flags","Returns the set containing all flags.","Returns the raw value of the flags currently stored.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the …","A key can either be public, of secret.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for platforms to implement that use Trussed.","A marker trait used to indicate that an [<code>RngCore</code>] or …","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","","Check if the user has indicated their presence so as to …","Set the state of Trussed to give potential feedback to …","May be called during idle periods to give the UI the …","Return the duration since startup.","Exit / reset the application","","","","","","","","Trussed client will call this method when making a …","","","","","","","","","","","","","Encode as INTEGER 2","NB: This is not a full INTEGER implementation, needs the …","","","","","","","","","Currently unconstructable.","Only empty slices possible currently.","","","","Encoded as “YYYYMMDDHHMMSSZ”, encoding takes care of …","","","","","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a splitting aka forking construction to the inner …","","","Add a new client, claiming one of the statically …","Specialization of <code>try_new_client</code>, using <code>self</code>’s …","","","","","<code>store</code> presents a combined interface to three littlefs2 …","","","","","","TODO: feels a bit heavy-weight to pass in the …","","","","","","Trait intended for use by mechanism implementations.","","","","","","","","","","","Client files are store below <code>/<client_id>/dat/</code>.","","","","","","","","","","Iterate over entries of a directory (both file and …","Continue iterating over entries of a directory.","Iterate over contents of files inside a directory.","Continuation of <code>read_dir_files_first</code>.","","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","","","","","Trait intended for use by mechanism implementations.","","","Return Header of key, if it exists","","","","","","","","","","","","","","","","","","","","Reads contents from path in location of store.","Writes contents to path in location of store.","Creates parent directory if necessary, then writes.","","","","","","","","","","","","","","","","","","There is no user present","Normal user presence check, currently implemented as “…","Strong user intent check, currently implemented as “…","","Pending other user consent requests will fail as …","If other user consent requests are pending, fail this …","","","","","","","Struct representing a generic array - <code>GenericArray<T, N></code> …","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","A fixed capacity <code>String</code>","A fixed capacity <code>Vec</code>","","","","Users of this library provide a “storage driver” by …","Minimum size of block read in bytes. Not in superblock","Minimum size of block write in bytes. Not in superblock","Size of an erasable block in bytes, as unsigned typenum. …","Number of erasable blocks. Hence storage capacity is …","Suggested values are 100-1000, higher is more performant …","littlefs uses a read cache, a write cache, and one cache …","littlefs itself has a <code>LOOKAHEAD_SIZE</code>, which must be a …","Maximum length of a filename plus one. Stored in …","Maximum length of a path plus one. Necessary to convert …","Maximum size of file. Stored in superblock. Defaults to …","Maximum size of custom attributes. Should default to …","Read data from the storage device. Guaranteed to be …","Write data to the storage device. Guaranteed to be called …","Erase data from the storage device. Guaranteed to be …","","An owned, mutable path","The ID of a Trussed object.","","","Is a non-random, constructible u8 ID.","skips leading zeros","","","","","","","","","","","","","","","","","","","","","","","","Non-exhaustive to make it unconstructable NB: Better to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Do NOT implement this yourself! Use the macro <code>interchange!</code>…","","","","This is the constructor for a <code>(Requester, Responder)</code> pair.","Method for debugging: how many allocated clients have not …","Method purely for testing - do not use in production","","Serialize object into newly allocated Bytes.","","Trait making <code>GenericArray</code> work, marking types to be used …","Associated type representing the array type for the number","","Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Deserialize a message of type <code>T</code> from a byte slice. The …","Serialize a <code>T</code> to the given slice, with the resulting …","","Fallible version of <code>debug!</code>.","Fallible version of <code>error!</code>.","Fallible version of <code>info!</code>.","Fallible version of <code>trace!</code>.","Fallible version of <code>warn!</code>.","Local version of <code>log!</code>.","Local version of <code>debug!</code>.","Local version of <code>error!</code>.","Local version of <code>info!</code>.","Local version of <code>trace!</code>.","Local version of <code>warn!</code>.","Immediate version of <code>log!</code>.","Immediate version of <code>debug!</code>.","Immediate version of <code>error!</code>.","Immediate version of <code>info!</code>.","Immediate version of <code>trace!</code>.","Immediate version of <code>warn!</code>.","Fallible immediate version of <code>log!</code>.","Fallible immediate version of <code>debug!</code>.","Fallible immediate version of <code>error!</code>.","Fallible immediate version of <code>info!</code>.","Fallible immediate version of <code>trace!</code>.","Fallible immediate version of <code>warn!</codeccepts byte string, with or without trailing nul.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO: This uses the predicate “filename.len() >= 4” …","","","","","","","","Decrypts a single block. Let’s hope we don’t have to …","","","","","","","","","","Encrypts the input <em>with zero IV</em>","","Encrypts a single block. Let’s hope we don’t have to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flagsisables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags …","Disables all flags disabled in the set.","Adds the set of flags.","Toggles the set of flagshis implements “safe” defaultsonstruct a new, empty <code>Bytes<N></code>.","Wrap existing bytes in a <code>Bytes<N></code>.","Unwraps the Vec<u8, N>, same as <code>into_vec</code>.","Unwraps the Vec<u8, N>, same as <code>into_inner</code>.","Returns an immutable slice view.","Returns a mutable slice view.","Low-noise conversion between lengths.","","Some APIs offer an interface of the form …","","","","","","Clone into at least same size byte buffer.","Fallible conversion into differently sized byte buffer.","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0.","Extracts a slice containing the entire array.","Extracts a mutable slice containing the entire array.","Converts slice to a generic array reference with inferred …","Converts mutable slice to a mutable generic array …","Construct a <code>GenericArray</code> from a slice by cloning its …","Creates a new <code>GenericArray</code> instance from an iterator with …","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code>","Converts a vector of bytes into a <code>String</code>.","Converts a vector of bytes to a <code>String</code> without checking …","Converts a <code>String</code> into a byte vector.","Extracts a string slice containing the entire string.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","Appends a given string slice onto the end of this <code>String</code>.","Returns the maximum number of elements the String can hold","Appends the given <code>char</code> to the end of this <code>String</code>.","Shortens this <code>String</code> to the specified length.","Removes the last character from the string buffer and …","Truncates this <code>String</code>, removing all contents.","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new vector with a fixed capacity of <code>N</code> and …","Returns the maximum number of elements the vector can hold","Clears the vector, removing all values.","Clones and appends all elements in a slice to the <code>Vec</code>.","Removes the last element from a vector and return it, or …","Appends an <code>item</code> to the back of the collection","Shortens the vector, keeping the first <code>len</code> elements and …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","Removes an element from the vector and returns it.","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec.","","","","Returns the full path to the file that this entry …","","","","","This API avoids the need for using <code>Allocation</code>.","Total number of blocks in the filesystem","Total number of bytes in the filesystem","Available number of unused blocks in the filesystem","Available number of unused bytes in the filesystem","Remove a file or directory.","Remove a file or directory.","TODO: This method fails if some <code>println!</code> calls are …","","Rename or move a file or directory.","Given a path, query the filesystem to get information …","","","","","Read attribute.","Remove attribute.","Set attribute.","","Returns a pseudo-iterator over the entries within a …","","Deconstruct <code>Filesystem</code>, intention is to allow access to …","Creates a new, empty directory at the provided path.","Recursively create a directory and all of its parent …","Read the entire contents of a file into a bytes vector.","Write a slice as the entire contents of a file.","","","Extends <code>self</code> with <code>path</code>"],"i":[0,0,0,1,1,1,1,0,2,2,0,0,3,3,3,3,3,3,0,4,0,5,0,6,6,6,6,0,7,7,7,7,0,8,8,8,8,8,0,9,9,0,10,10,0,11,11,0,12,12,0,13,13,13,0,14,14,14,0,0,15,15,15,0,0,16,16,0,17,17,0,18,18,0,19,19,0,20,0,21,21,21,0,22,22,22,22,0,23,23,23,23,0,24,24,24,0,25,25,0,26,26,26,26,26,0,27,27,27,27,27,0,28,28,28,28,0,29,29,0,30,0,0,31,0,32,0,33,0,34,0,35,35,0,0,36,0,37,0,0,38,0,39,0,40,0,41,0,42,0,43,43,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,0,54,0,0,55,0,56,0,57,0,0,58,0,59,0,60,0,61,0,62,0,63,0,0,64,0,65,0,66,0,0,67,0,68,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,71,71,0,72,72,72,72,72,0,73,73,0,74,74,0,75,75,0,76,76,0,77,77,77,77,77,77,0,78,78,78,78,78,78,78,0,79,79,0,80,80,0,81,0,82,82,82,0,83,83,83,0,0,0,84,84,84,0,85,85,0,86,0,87,87,87,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,89,89,0,90,90,90,90,90,90,90,90,90,90,90,0,91,91,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,0,0,94,94,94,0,95,95,95,0,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,98,98,94,94,96,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,99,99,0,100,100,0,0,0,101,101,101,101,0,102,102,102,102,102,0,103,103,103,103,103,103,0,104,0,0,0,0,0,0,0,0,105,105,0,106,0,107,0,108,108,0,109,109,109,0,0,0,110,110,0,0,0,111,111,0,101,101,101,101,0,112,112,112,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,127,127,127,128,128,128,128,128,128,128,0,0,0,0,129,129,129,130,0,0,0,131,0,132,132,132,132,0,0,0,0,0,133,133,133,0,134,134,134,134,134,134,134,134,134,134,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,0,0,136,136,136,136,136,136,136,136,136,135,135,135,0,137,137,137,137,137,137,0,138,0,0,0,0,0,0,0,0,0,0,0,139,139,139,139,0,0,140,140,0,0,141,141,141,0,142,142,0,143,143,143,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,0,0,0,0,0,145,145,0,146,146,0,147,147,0,148,148,0,0,149,149,149,149,0,150,150,0,151,151,0,152,0,153,0,154,154,154,154,0,0,0,155,155,155,0,156,156,156,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,0,0,0,0,158,158,158,158,0,0,159,159,0,0,160,160,160,160,160,160,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,162,162,162,162,162,162,162,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,163,163,163,163,163,163,163,15,15,15,15,15,15,15,164,164,164,164,164,164,164,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,165,165,165,165,165,165,165,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,166,166,166,166,166,166,166,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,43,43,43,43,43,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,49,49,50,50,50,50,50,50,50,51,51,51,51,51,51,51,52,52,52,52,52,52,52,53,53,53,53,53,53,53,167,167,167,167,167,167,167,54,54,54,54,54,54,54,168,168,168,168,168,168,168,55,55,55,55,55,55,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,169,169,169,169,169,169,169,58,58,58,58,58,58,58,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,63,63,63,63,63,63,63,170,170,170,170,170,170,170,64,64,64,64,64,64,64,65,65,65,65,65,65,65,66,66,66,66,66,66,66,171,171,171,171,171,171,171,67,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,70,83,83,83,83,83,83,83,85,85,85,85,85,85,85,86,86,86,86,86,86,86,93,93,93,93,93,93,93,172,172,172,172,172,172,172,172,172,94,94,94,94,94,94,94,95,95,95,95,95,95,95,96,96,96,96,96,96,96,97,97,97,97,97,97,97,98,98,98,98,98,98,98,173,173,173,173,173,173,173,174,174,174,174,174,174,174,175,175,175,175,175,175,175,176,176,176,176,176,176,176,177,177,177,177,177,177,177,178,178,178,178,178,178,178,179,179,179,179,179,179,179,180,180,180,180,180,180,180,181,181,181,181,181,181,181,182,182,182,182,182,182,182,183,183,183,183,183,183,183,184,184,184,184,184,184,184,185,185,185,185,185,185,185,186,186,186,186,186,186,186,99,99,99,99,99,99,99,100,100,100,100,100,100,100,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,107,107,107,107,107,107,107,108,108,108,108,108,108,108,109,109,109,109,109,109,109,189,189,189,189,189,189,189,190,190,190,190,190,190,190,110,110,110,110,110,110,110,191,191,191,191,191,191,191,192,192,192,192,192,192,192,111,111,111,111,111,111,111,127,127,127,127,127,127,127,128,128,128,128,128,128,128,130,130,130,130,130,130,130,131,131,131,131,131,131,131,193,193,193,193,193,193,193,194,194,194,194,194,194,194,133,133,133,133,133,133,133,195,195,195,195,195,195,195,196,196,196,196,196,196,196,197,197,197,197,197,197,197,197,135,135,135,135,135,135,135,138,138,138,138,138,138,138,139,139,139,139,139,139,139,140,140,140,140,140,140,140,141,141,141,141,141,141,141,142,142,142,142,142,142,142,143,143,143,143,143,143,143,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,202,202,202,202,202,202,202,203,203,203,203,203,203,203,145,145,145,145,145,145,145,146,146,146,146,146,146,146,147,147,147,147,147,147,147,148,148,148,148,148,148,148,149,149,149,149,149,149,149,150,150,150,150,150,150,150,151,151,151,151,151,151,151,152,152,152,152,152,152,152,153,153,153,153,153,153,153,154,154,154,154,154,154,154,204,204,204,204,204,204,204,205,205,205,205,205,205,205,155,155,155,155,155,155,155,156,156,156,156,156,156,156,157,157,157,157,157,157,157,158,158,158,158,158,158,158,159,159,159,159,159,159,159,200,199,200,199,200,199,200,200,200,200,200,200,200,200,200,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,199,199,200,200,200,200,200,199,199,200,200,200,200,200,200,200,200,200,200,200,199,199,200,199,200,200,200,199,200,199,200,200,199,200,200,199,199,200,200,199,199,199,199,199,199,199,199,199,200,200,199,199,200,199,200,199,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,197,196,195,196,197,196,195,196,197,195,196,195,197,196,197,195,197,196,195,195,197,195,196,197,195,196,197,197,197,195,196,195,196,197,197,197,197,196,196,196,195,195,195,195,195,197,197,196,196,197,197,197,197,197,197,195,196,195,196,197,197,195,196,197,197,196,195,197,197,197,197,197,197,197,197,197,196,195,197,196,197,195,198,198,172,172,172,172,172,172,172,172,172,172,172,172,172,172,203,203,201,203,201,203,201,201,203,201,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,201,198,198,198,198,198,86,86,86,130,130,130,131,131,133,133,133,133,133,133,133,133,133,133,133,135,135,135,135,135,135,135,135,135,180,186,173,174,183,175,177,178,180,182,186,175,180,186,173,174,183,175,180,184,186,174,175,180,185,186,182,175,180,186,175,177,178,180,181,184,174,175,180,173,174,138,146,147,148,69,70,1,2,162,3,4,5,6,7,8,9,10,11,12,13,14,163,15,164,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,165,31,32,33,34,35,36,37,166,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,167,54,168,55,56,57,169,58,59,60,61,62,63,170,64,65,66,171,67,68,83,93,94,95,96,97,98,99,105,145,146,147,148,139,140,141,142,143,149,150,151,152,153,154,204,205,155,156,157,158,159,97,69,69,70,70,1,1,2,2,162,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,163,15,15,164,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,165,31,31,32,32,33,33,34,34,35,35,36,36,37,37,166,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,167,54,54,168,55,55,56,56,57,57,169,58,58,59,59,60,60,61,61,62,62,63,63,170,64,64,65,65,66,66,171,67,67,68,68,93,94,94,95,95,96,96,97,97,98,99,99,187,187,188,188,105,105,106,107,107,108,109,109,189,190,190,191,191,192,192,111,111,145,145,146,146,147,147,148,148,139,140,141,142,143,149,149,150,151,151,152,152,153,153,154,154,204,204,205,205,155,156,156,157,158,159,97,97,145,146,147,148,97,97,97,97,97,97,97,97,97,108,153,97,97,97,97,97,97,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,36,37,166,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,167,54,168,55,56,57,169,58,59,60,61,62,63,170,64,65,66,171,67,68,95,146,147,148,105,69,70,1,2,162,3,4,5,6,7,8,9,10,11,12,13,14,163,15,164,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,165,31,32,33,34,35,36,37,166,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,167,54,168,55,56,57,169,58,59,60,61,62,63,170,64,65,66,171,67,68,83,93,94,95,96,97,98,99,187,188,105,106,107,108,109,189,190,191,192,111,193,194,145,146,147,148,139,140,141,142,143,149,150,151,152,153,154,204,205,155,156,157,158,159,97,109,151,152,153,156,99,99,99,99,99,99,99,99,99,99,99,99,99,1,2,162,3,4,5,6,7,8,9,10,11,12,13,14,163,15,164,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,165,31,32,33,34,35,36,37,166,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,167,54,168,55,56,57,169,58,59,60,61,62,63,170,64,65,66,171,67,68,96,97,146,147,148,139,140,141,142,143,149,151,152,153,145,155,156,157,158,159,1,2,162,3,4,5,6,7,8,9,10,11,12,13,14,163,15,164,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,165,31,32,33,34,35,36,37,166,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,167,54,168,55,56,57,169,58,59,60,61,62,63,170,64,65,66,171,67,68,96,97,146,147,148,139,140,141,142,143,149,151,152,153,145,155,156,157,158,159,94,95,96,97,187,187,106,106,107,107,108,108,109,109,190,190,191,191,192,192,111,111,188,187,188,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,195,196,197,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,203,203,203],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["keyid",3]],[["decrypt",3],["clientresult",6]]],[[["keyid",3]],[["wrapkey",3],["clientresult",6]]],null,[[["keyid",3]],[["decrypt",3],["clientresult",6]]],[[["keyid",3],["option",4]],[["encrypt",3],["clientresult",6]]],[[["location",4]],[["generatekey",3],["clientresult",6]]],[[["keyid",3],["location",4]],[["clientresult",6],["unwrapkey",3]]],[[["keyid",3]],[["wrapkey",3],["clientresult",6]]],null,[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyid",3]],[["clientresult",6],["sign",3]]],null,[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyid",3]],[["clientresult",6],["sign",3]]],null,[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyid",3]],[["clientresult",6],["sign",3]]],null,[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyid",3]],[["clientresult",6],["sign",3]]],null,[[["location",4]],[["generatekey",3],["clientresult",6]]],[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyserialization",4],["storageattributes",3]],[["clientresult",6],["deserializekey",3]]],[[["keyid",3],["keyserialization",4]],[["clientresult",6],["serializekey",3]]],[[["keyid",3]],[["clientresult",6],["sign",3]]],[[["keyid",3]],[["verify",3],["clientresult",6]]],null,[[["location",4]],[["generatekey",3],["clientresult",6]]],[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyserialization",4],["storageattributes",3]],[["clientresult",6],["deserializekey",3]]],[[["keyid",3],["keyserialization",4]],[["clientresult",6],["serializekey",3]]],[[["keyid",3],["signatureserialization",4]],[["clientresult",6],["sign",3]]],[[["keyid",3]],[["verify",3],["clientresult",6]]],[[["keyid",3],["location",4]],[["clientresult",6],["agree",3]]],null,[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[],[["clientresult",6],["hash",3]]],null,[[["keyid",3]],[["decrypt",3],["clientresult",6]]],[[["keyid",3]],[["encrypt",3],["clientresult",6]]],null,[[["keyid",3],["u64",15]],[["clientresult",6],["sign",3]]],null,[[["location",4]],[["generatekey",3],["clientresult",6]]],[[["keyid",3],["location",4]],[["clientresult",6],["derivekey",3]]],[[["keyid",3],["location",4]],[["clientresult",6],["agree",3]]],null,null,null,null,null,null,null,[[],[["from",8],["clientresult",6],["reply",4]]],[[],[["result",4],["poll",4]]],[[]],null,[[]],[[],[["poll",4],["result",4]]],null,[[["requester",3],["trussedinterchange",4]]],null,[[["certid",3]],[["deletecertificate",3],["clientresult",6]]],[[["certid",3]],[["clientresult",6],["readcertificate",3]]],[[["location",4]],[["clientresult",6],["writecertificate",3]]],null,[[["keyid",3],["storageattributes",3],["mechanism",4]],[["clientresult",6],["agree",3]]],[[["keyid",3],["mechanism",4]],[["attest",3],["clientresult",6]]],[[["keyid",3],["mechanism",4]],[["decrypt",3],["clientresult",6]]],[[["keyid",3]],[["delete",3],["clientresult",6]]],[[["location",4]],[["deleteallkeys",3],["clientresult",6]]],[[["keyid",3],["storageattributes",3],["mechanism",4],["option",4],["mediumdata",6]],[["clientresult",6],["derivekey",3]]],[[["keyserialization",4],["storageattributes",3],["mechanism",4]],[["clientresult",6],["deserializekey",3]]],[[["keyid",3],["mechanism",4],["shortdata",6],["option",4]],[["encrypt",3],["clientresult",6]]],[[["keyid",3],["mechanism",4]],[["exists",3],["clientresult",6]]],[[["storageattributes",3],["mechanism",4]],[["generatekey",3],["clientresult",6]]],[[["usize",15],["location",4]],[["generatesecretkey",3],["clientresult",6]]],[[["message",6],["mechanism",4]],[["hash",3],["clientresult",6]]],[[["usize",15]],[["randombytes",3],["clientresult",6]]],[[["keyid",3],["keyserialization",4],["mechanism",4]],[["clientresult",6],["serializekey",3]]],[[["keyid",3],["mechanism",4],["signatureserialization",4]],[["clientresult",6],["sign",3]]],[[["keyid",3],["mechanism",4],["signatureserialization",4]],[["verify",3],["clientresult",6]]],[[["mechanism",4],["location",4]],[["unsafeinjectkey",3],["clientresult",6]]],[[["location",4]],[["clientresult",6],["unsafeinjectsharedkey",3]]],[[["keyid",3],["storageattributes",3],["mechanism",4],["message",6]],[["clientresult",6],["unwrapkey",3]]],[[["keyid",3],["mechanism",4]],[["wrapkey",3],["clientresult",6]]],null,[[["location",4]],[["createcounter",3],["clientresult",6]]],[[["counterid",3]],[["clientresult",6],["incrementcounter",3]]],null,[[],[["clientresult",6],["debugdumpstore",3]]],[[["pathbuf",3],["option",4],["location",4]],[["readdirfirst",3],["clientresult",6]]],[[],[["readdirnext",3],["clientresult",6]]],[[["pathbuf",3],["option",4],["userattribute",6],["location",4]],[["clientresult",6],["readdirfilesfirst",3]]],[[],[["clientresult",6],["readdirfilesnext",3]]],[[["pathbuf",3],["location",4]],[["removedirall",3],["clientresult",6]]],[[["pathbuf",3],["location",4]],[["removedirall",3],["clientresult",6]]],[[["pathbuf",3],["location",4]],[["removefile",3],["clientresult",6]]],[[["pathbuf",3],["location",4]],[["readfile",3],["clientresult",6]]],[[["pathbuf",3],["option",4],["location",4]],[["clientresult",6],["locatefile",3]]],[[["pathbuf",3],["option",4],["message",6],["userattribute",6],["location",4]],[["clientresult",6],["writefile",3]]],null,[[["to",4]],[["clientresult",6],["reboot",3]]],[[],[["clientresult",6],["uptime",3]]],null,[[["u32",15]],[["clientresult",6],["requestuserconsent",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[],["flags",3]],[[],["flags",3]],[[],["u16",15]],[[["u16",15]],[["flags",3],["option",4]]],[[["u16",15]],["flags",3]],[[["u16",15]],["flags",3]],[[],["bool",15]],[[],["bool",15]],[[["flags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flags",3]]],[[["flags",3]]],[[["flags",3]]],[[["flags",3],["bool",15]]],null,null,null,[[],["serializedkeybytes",6]],[[],[["error",4],["result",4]]],[[],["u16",15]],[[["usize",15],["u16",15]],[["error",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],null,[[],["level",4]],[[["status",4]]],[[]],[[],["duration",3]],[[["to",4]]],null,null,null,null,[[]],[[]],[[]],null,[[]],null,null,null,null,[[["attestrequest",3]],[["attestreply",3],["result",4],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["str",15]]],[[["str",15]]],null,null,null,[[["u16",15],["u8",15]],["option",4]],[[]],null,null,null,null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],null,null,[[]],[[["u64",15]]],[[],[["result",4],["error",3]]],null,[[["agree",3]],[["agree",3],["error",4],["result",4]]],null,[[["decrypt",3]],[["result",4],["error",4],["decrypt",3]]],null,[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],null,[[["deserializekey",3]],[["result",4],["deserializekey",3],["error",4]]],null,[[["encrypt",3]],[["encrypt",3],["error",4],["result",4]]],null,[[["exists",3]],[["result",4],["exists",3],["error",4]]],null,[[["generatekey",3]],[["result",4],["generatekey",3],["error",4]]],null,[[["hash",3]],[["hash",3],["error",4],["result",4]]],null,[[["serializekey",3]],[["serializekey",3],["result",4],["error",4]]],null,[[["sign",3]],[["error",4],["sign",3],["result",4]]],null,[[["unsafeinjectkey",3]],[["unsafeinjectkey",3],["error",4],["result",4]]],null,[[["unwrapkey",3]],[["result",4],["error",4],["unwrapkey",3]]],null,[[["verify",3]],[["result",4],["verify",3],["error",4]]],null,[[["wrapkey",3]],[["result",4],["wrapkey",3],["error",4]]],null,[[]],null,[[["pathbuf",3],["request",4]],[["reply",4],["result",4],["error",4]]],[[],[["result",4],["chacha8rng",3],["error",4]]],[[],[["result",4],["error",4]]],[[]],[[["syscall",8],["str",15]],[["result",4],["clientimplementation",3]]],[[["str",15]],[["clientimplementation",3],["result",4]]],[[["clientid",6],["trussedinterchange",4],["responder",3]],[["serviceendpoint",3],["result",4]]],[[]],[[]],[[]],null,null,null,null,[[["certid",3]],["result",6]],[[["certid",3]],[["message",6],["result",6]]],[[["message",6],["location",4]],[["certid",3],["result",6]]],[[["chacha8rng",3],["clientid",6]]],null,null,null,[[["chacha8rng",3],["clientid",6]]],null,null,[[["location",4]],[["counterid",3],["result",6]]],[[["location",4]],[["counterid",3],["result",6]]],[[["counterid",3]],[["result",6],["u128",15]]],null,null,null,null,null,[[["clientid",6]]],[[["pathbuf",3]],["pathbuf",3]],[[["path",3]],["pathbuf",3]],null,[[["pathbuf",3],["location",4]],[["result",6],["bytes",3]]],[[["pathbuf",3],["location",4]],["result",6]],[[["pathbuf",3],["location",4]],["bool",15]],[[["pathbuf",3],["location",4]],["result",6]],[[["pathbuf",3],["location",4]],["result",6]],[[["pathbuf",3],["location",4]],[["usize",15],["result",6]]],[[["pathbuf",3],["option",4],["location",4]],[["option",4],["result",6]]],[[["option",4],["pathbuf",3],["location",4]],[["option",4],["result",6]]],[[["readdirstate",3]],[["option",4],["result",6]]],[[["option",4],["userattribute",6],["pathbuf",3],["location",4]],[["result",6],["option",4]]],[[["readdirfilesstate",3]],[["result",6],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chacha8rng",3],["clientid",6]]],null,null,[[["secrecy",4],["location",4]],[["keyid",3],["result",6]]],[[["option",4],["secrecy",4],["keyid",3],["kind",4]],["bool",15]],[[["keyid",3],["secrecy",4]],[["info",3],["option",4]]],[[["keyid",3]],["bool",15]],[[["location",4]],[["usize",15],["result",6]]],[[["option",4],["secrecy",4],["keyid",3],["kind",4]],[["key",3],["result",6]]],[[["kind",4],["location",4],["keyid",3],["secrecy",4]],["result",6]],[[],["chacha8rng",3]],[[["keyid",3],["secrecy",4]],[["location",4],["option",4]]],[[],["keyid",3]],[[["secrecy",4]],["pathbuf",3]],[[["keyid",3],["secrecy",4]],["pathbuf",3]],null,null,null,null,[[],["fs",3]],[[],["fs",3]],[[],["fs",3]],null,[[["filesystem",3]]],[[["filesystem",3],["path",3]],[["result",4],["error",4]]],[[["path",3],["location",4]],[["result",4],["error",4],["bytes",3]]],[[["path",3],["location",4]],[["result",4],["error",4]]],[[["path",3],["location",4]],[["result",4],["error",4]]],[[["path",3],["location",4]],["bool",15]],[[["path",3],["location",4]],["bool",15]],[[["path",3],["location",4]],["bool",15]],[[["path",3],["location",4]],[["usize",15],["result",4],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["usize",15],["result",4],["error",4]]],[[["usize",15]],[["usize",15],["result",4],["error",4]]],[[["usize",15]],[["usize",15],["result",4],["error",4]]],null,null,null,null,null,[[],["bool",15]],[[],[["bytes",3],["u32",6]]],null,[[]],[[["u8",15]]],null,[[]],[[["u8",15]]],null,[[]],[[["u8",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["location",4]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["usize",15]],[[]],[[],[["result",4],["error",4]]],[[],[["result",4],["bytes",3],["error",4]]],[[],[["error",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["bytes",3],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],[["result",4],["length",3],["error",3]]],[[["encoder",3]],[["result",4],["error",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bitslice",3]],[[],["bitslice",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[],["vec",3]],[[],["string",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["str",15]],[[],["str",15]],[[],["vec",3]],[[]],[[]],[[],["vec",3]],[[]],[[],["str",15]],[[],[["vec",3],["result",4]]],[[],[["string",3],["result",4]]],[[]],[[]],[[],["string",3]],[[],["vec",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["str",15]],[["result",4],["string",3]]],[[],["vec",3]],[[]],[[["u32",15]],["string",3]],[[["u64",15]],["string",3]],[[["str",15]],["string",3]],[[["u8",15]],["string",3]],[[["i64",15]],["string",3]],[[["i16",15]],["string",3]],[[["u16",15]],["string",3]],[[["i32",15]],["string",3]],[[["i8",15]],["string",3]],[[]],[[["str",15]],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[["char",15]],[["result",4],["error",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[],["genericarray",3]],[[]],[[]],[[]],[[]],[[["genericarray",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["genericarray",3]],[["option",4],["ordering",4]]],[[],["genericarray",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[],["genericarray",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["uint",3],["genericarray",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["uint",3],["genericarray",3]]],[[],[["genericarray",3],["uint",3]]],[[],[["uint",3],["genericarray",3]]],[[]],[[]],[[]],[[]],[[],["genericarray",3]],[[]],[[["genericarray",3]],["ordering",4]],[[]],[[]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[]],[[]],[[],["bytes",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[]],[[],["bytes",3]],[[["vec",3],["u8",15]],["bytes",3]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[],[["bytes",3],["result",4]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[],["pathbuf",3]],[[],["direntry",3]],[[],["result",4]],[[],["result",4]],[[["pathbuf",3]],["bool",15]],[[["direntry",3]],["bool",15]],[[["direntry",3]],["bool",15]],[[],["path",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[["path",3]],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[["str",15]],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],[["result",4],["pathbuf",3]]],[[],[["direntry",3],["result",4]]],[[["nonzeroscalar",3]],[["genericarray",3],["u8",15]]],[[["secretbytes",3]],[["genericarray",3],["u8",15]]],[[["scalarbytes",3]],[["genericarray",3],["u8",15]]],[[["scalar",3]],[["u8",15],["genericarray",3]]],[[["scalar",3]],[["u8",15],["genericarray",3]]],[[],[["result",4],["poll",4]]],[[],[["from",8],["clientresult",6],["reply",4]]],[[]],[[["certid",3]],["result",6]],[[["certid",3]],[["message",6],["result",6]]],[[["message",6],["location",4]],[["certid",3],["result",6]]],[[["location",4]],[["counterid",3],["result",6]]],[[["counterid",3]],[["result",6],["u128",15]]],[[["pathbuf",3],["location",4]],[["result",6],["bytes",3]]],[[["pathbuf",3],["location",4]],["result",6]],[[["pathbuf",3],["location",4]],["bool",15]],[[["pathbuf",3],["location",4]],["result",6]],[[["pathbuf",3],["location",4]],["result",6]],[[["pathbuf",3],["location",4]],[["usize",15],["result",6]]],[[["option",4],["pathbuf",3],["location",4]],[["option",4],["result",6]]],[[["readdirstate",3]],[["option",4],["result",6]]],[[["option",4],["userattribute",6],["pathbuf",3],["location",4]],[["result",6],["option",4]]],[[["readdirfilesstate",3]],[["result",6],["option",4]]],[[["pathbuf",3],["option",4],["location",4]],[["option",4],["result",6]]],[[],["chacha8rng",3]],[[["secrecy",4],["location",4]],[["keyid",3],["result",6]]],[[["option",4],["secrecy",4],["keyid",3],["kind",4]],["bool",15]],[[["keyid",3],["secrecy",4]],[["info",3],["option",4]]],[[["keyid",3]],["bool",15]],[[["location",4]],[["usize",15],["result",6]]],[[["option",4],["secrecy",4],["keyid",3],["kind",4]],[["key",3],["result",6]]],[[["kind",4],["location",4],["keyid",3],["secrecy",4]],["result",6]],[[["keyid",3],["secrecy",4]],[["location",4],["option",4]]],[[["agree",3]],[["agree",3],["error",4],["result",4]]],[[["agree",3]],[["agree",3],["error",4],["result",4]]],[[["decrypt",3]],[["result",4],["error",4],["decrypt",3]]],[[["decrypt",3]],[["result",4],["error",4],["decrypt",3]]],[[["decrypt",3]],[["result",4],["error",4],["decrypt",3]]],[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],[[["derivekey",3]],[["result",4],["error",4],["derivekey",3]]],[[["deserializekey",3]],[["result",4],["deserializekey",3],["error",4]]],[[["deserializekey",3]],[["result",4],["deserializekey",3],["error",4]]],[[["deserializekey",3]],[["result",4],["deserializekey",3],["error",4]]],[[["encrypt",3]],[["encrypt",3],["error",4],["result",4]]],[[["encrypt",3]],[["encrypt",3],["error",4],["result",4]]],[[["encrypt",3]],[["encrypt",3],["error",4],["result",4]]],[[["exists",3]],[["result",4],["exists",3],["error",4]]],[[["exists",3]],[["result",4],["exists",3],["error",4]]],[[["exists",3]],[["result",4],["exists",3],["error",4]]],[[["exists",3]],[["result",4],["exists",3],["error",4]]],[[["generatekey",3]],[["result",4],["generatekey",3],["error",4]]],[[["generatekey",3]],[["result",4],["generatekey",3],["error",4]]],[[["generatekey",3]],[["result",4],["generatekey",3],["error",4]]],[[["generatekey",3]],[["result",4],["generatekey",3],["error",4]]],[[["generatekey",3]],[["result",4],["generatekey",3],["error",4]]],[[["hash",3]],[["hash",3],["error",4],["result",4]]],[[["serializekey",3]],[["serializekey",3],["result",4],["error",4]]],[[["serializekey",3]],[["serializekey",3],["result",4],["error",4]]],[[["serializekey",3]],[["serializekey",3],["result",4],["error",4]]],[[["sign",3]],[["error",4],["sign",3],["result",4]]],[[["sign",3]],[["error",4],["sign",3],["result",4]]],[[["sign",3]],[["error",4],["sign",3],["result",4]]],[[["sign",3]],[["error",4],["sign",3],["result",4]]],[[["sign",3]],[["error",4],["sign",3],["result",4]]],[[["sign",3]],[["error",4],["sign",3],["result",4]]],[[["unwrapkey",3]],[["result",4],["error",4],["unwrapkey",3]]],[[["verify",3]],[["result",4],["verify",3],["error",4]]],[[["verify",3]],[["result",4],["verify",3],["error",4]]],[[["wrapkey",3]],[["result",4],["wrapkey",3],["error",4]]],[[["wrapkey",3]],[["result",4],["wrapkey",3],["error",4]]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["flags",3]],["flags",3]],[[["request",4]],["bool",15]],[[["request",4]],["bool",15]],[[["reply",4]],["bool",15]],[[["reply",4]],["bool",15]],[[["agree",3]],["bool",15]],[[["agree",3]],["bool",15]],[[["attest",3]],["bool",15]],[[["attest",3]],["bool",15]],[[["debugdumpstore",3]],["bool",15]],[[["decrypt",3]],["bool",15]],[[["decrypt",3]],["bool",15]],[[["delete",3]],["bool",15]],[[["delete",3]],["bool",15]],[[["deleteallkeys",3]],["bool",15]],[[["deleteallkeys",3]],["bool",15]],[[["derivekey",3]],["bool",15]],[[["derivekey",3]],["bool",15]],[[["deserializekey",3]],["bool",15]],[[["deserializekey",3]],["bool",15]],[[["encrypt",3]],["bool",15]],[[["encrypt",3]],["bool",15]],[[["exists",3]],["bool",15]],[[["exists",3]],["bool",15]],[[["generatekey",3]],["bool",15]],[[["generatekey",3]],["bool",15]],[[["generatesecretkey",3]],["bool",15]],[[["generatesecretkey",3]],["bool",15]],[[["hash",3]],["bool",15]],[[["hash",3]],["bool",15]],[[["locatefile",3]],["bool",15]],[[["locatefile",3]],["bool",15]],[[["readdirfilesfirst",3]],["bool",15]],[[["readdirfilesfirst",3]],["bool",15]],[[["readdirfilesnext",3]],["bool",15]],[[["readdirfirst",3]],["bool",15]],[[["readdirfirst",3]],["bool",15]],[[["readdirnext",3]],["bool",15]],[[["readfile",3]],["bool",15]],[[["readfile",3]],["bool",15]],[[["removefile",3]],["bool",15]],[[["removefile",3]],["bool",15]],[[["removedir",3]],["bool",15]],[[["removedir",3]],["bool",15]],[[["removedirall",3]],["bool",15]],[[["removedirall",3]],["bool",15]],[[["randombytes",3]],["bool",15]],[[["randombytes",3]],["bool",15]],[[["serializekey",3]],["bool",15]],[[["serializekey",3]],["bool",15]],[[["sign",3]],["bool",15]],[[["sign",3]],["bool",15]],[[["writefile",3]],["bool",15]],[[["writefile",3]],["bool",15]],[[["unsafeinjectkey",3]],["bool",15]],[[["unsafeinjectkey",3]],["bool",15]],[[["unsafeinjectsharedkey",3]],["bool",15]],[[["unsafeinjectsharedkey",3]],["bool",15]],[[["unwrapkey",3]],["bool",15]],[[["unwrapkey",3]],["bool",15]],[[["verify",3]],["bool",15]],[[["verify",3]],["bool",15]],[[["wrapkey",3]],["bool",15]],[[["wrapkey",3]],["bool",15]],[[["requestuserconsent",3]],["bool",15]],[[["requestuserconsent",3]],["bool",15]],[[["reboot",3]],["bool",15]],[[["reboot",3]],["bool",15]],[[["uptime",3]],["bool",15]],[[["createcounter",3]],["bool",15]],[[["createcounter",3]],["bool",15]],[[["incrementcounter",3]],["bool",15]],[[["incrementcounter",3]],["bool",15]],[[["deletecertificate",3]],["bool",15]],[[["deletecertificate",3]],["bool",15]],[[["readcertificate",3]],["bool",15]],[[["readcertificate",3]],["bool",15]],[[["writecertificate",3]],["bool",15]],[[["writecertificate",3]],["bool",15]],[[["agree",3]],["bool",15]],[[["agree",3]],["bool",15]],[[["attest",3]],["bool",15]],[[["attest",3]],["bool",15]],[[["debugdumpstore",3]],["bool",15]],[[["decrypt",3]],["bool",15]],[[["decrypt",3]],["bool",15]],[[["delete",3]],["bool",15]],[[["delete",3]],["bool",15]],[[["deleteallkeys",3]],["bool",15]],[[["deleteallkeys",3]],["bool",15]],[[["derivekey",3]],["bool",15]],[[["derivekey",3]],["bool",15]],[[["deserializekey",3]],["bool",15]],[[["deserializekey",3]],["bool",15]],[[["encrypt",3]],["bool",15]],[[["encrypt",3]],["bool",15]],[[["exists",3]],["bool",15]],[[["exists",3]],["bool",15]],[[["generatekey",3]],["bool",15]],[[["generatekey",3]],["bool",15]],[[["generatesecretkey",3]],["bool",15]],[[["generatesecretkey",3]],["bool",15]],[[["hash",3]],["bool",15]],[[["hash",3]],["bool",15]],[[["locatefile",3]],["bool",15]],[[["locatefile",3]],["bool",15]],[[["readdirfilesfirst",3]],["bool",15]],[[["readdirfilesfirst",3]],["bool",15]],[[["readdirfilesnext",3]],["bool",15]],[[["readdirfilesnext",3]],["bool",15]],[[["readdirfirst",3]],["bool",15]],[[["readdirfirst",3]],["bool",15]],[[["readdirnext",3]],["bool",15]],[[["readdirnext",3]],["bool",15]],[[["readfile",3]],["bool",15]],[[["readfile",3]],["bool",15]],[[["removedir",3]],["bool",15]],[[["removedirall",3]],["bool",15]],[[["removedirall",3]],["bool",15]],[[["removefile",3]],["bool",15]],[[["randombytes",3]],["bool",15]],[[["randombytes",3]],["bool",15]],[[["serializekey",3]],["bool",15]],[[["serializekey",3]],["bool",15]],[[["sign",3]],["bool",15]],[[["sign",3]],["bool",15]],[[["writefile",3]],["bool",15]],[[["verify",3]],["bool",15]],[[["verify",3]],["bool",15]],[[["unsafeinjectkey",3]],["bool",15]],[[["unsafeinjectkey",3]],["bool",15]],[[["unsafeinjectsharedkey",3]],["bool",15]],[[["unsafeinjectsharedkey",3]],["bool",15]],[[["unwrapkey",3]],["bool",15]],[[["unwrapkey",3]],["bool",15]],[[["wrapkey",3]],["bool",15]],[[["wrapkey",3]],["bool",15]],[[["requestuserconsent",3]],["bool",15]],[[["requestuserconsent",3]],["bool",15]],[[["reboot",3]],["bool",15]],[[["uptime",3]],["bool",15]],[[["uptime",3]],["bool",15]],[[["createcounter",3]],["bool",15]],[[["createcounter",3]],["bool",15]],[[["incrementcounter",3]],["bool",15]],[[["incrementcounter",3]],["bool",15]],[[["deletecertificate",3]],["bool",15]],[[["readcertificate",3]],["bool",15]],[[["readcertificate",3]],["bool",15]],[[["writecertificate",3]],["bool",15]],[[["writecertificate",3]],["bool",15]],[[["error",4]],["bool",15]],[[["key",3]],["bool",15]],[[["key",3]],["bool",15]],[[["info",3]],["bool",15]],[[["info",3]],["bool",15]],[[["kind",4]],["bool",15]],[[["kind",4]],["bool",15]],[[["flags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["secrecy",4]],["bool",15]],[[["trussedinterchange",4]],["bool",15]],[[["trussedinterchange",4]],["bool",15]],[[["tbscertificate",3]],["bool",15]],[[["tbscertificate",3]],["bool",15]],[[["certificate",3]],["bool",15]],[[["certificate",3]],["bool",15]],[[["serializedsignature",4]],["bool",15]],[[["serializedsignature",4]],["bool",15]],[[["version",4]],["bool",15]],[[["bigendianinteger",3]],["bool",15]],[[["bigendianinteger",3]],["bool",15]],[[["signaturealgorithm",4]],["bool",15]],[[["name",3]],["bool",15]],[[["name",3]],["bool",15]],[[["extension",4]],["bool",15]],[[["extensions",3]],["bool",15]],[[["extensions",3]],["bool",15]],[[["datetime",3]],["bool",15]],[[["datetime",3]],["bool",15]],[[["validity",3]],["bool",15]],[[["validity",3]],["bool",15]],[[["serializedsubjectpublickey",4]],["bool",15]],[[["serializedsubjectpublickey",4]],["bool",15]],[[["id",3]],["bool",15]],[[["id",3]],["bool",15]],[[["certid",3]],["bool",15]],[[["certid",3]],["bool",15]],[[["counterid",3]],["bool",15]],[[["counterid",3]],["bool",15]],[[["keyid",3]],["bool",15]],[[["keyid",3]],["bool",15]],[[["status",4]],["bool",15]],[[["to",4]],["bool",15]],[[["level",4]],["bool",15]],[[["urgency",4]],["bool",15]],[[["error",4]],["bool",15]],[[["attributes",4]],["bool",15]],[[["attributes",4]],["bool",15]],[[["certificatetype",4]],["bool",15]],[[["dataattributes",3]],["bool",15]],[[["dataattributes",3]],["bool",15]],[[["keyattributes",3]],["bool",15]],[[["keyattributes",3]],["bool",15]],[[["letters",3]],["bool",15]],[[["letters",3]],["bool",15]],[[["objecttype",4]],["bool",15]],[[["objecttype",4]],["bool",15]],[[["publickeyattributes",3]],["bool",15]],[[["publickeyattributes",3]],["bool",15]],[[["privatekeyattributes",3]],["bool",15]],[[["privatekeyattributes",3]],["bool",15]],[[["location",4]],["bool",15]],[[["storageattributes",3]],["bool",15]],[[["storageattributes",3]],["bool",15]],[[["mechanism",4]],["bool",15]],[[["keyserialization",4]],["bool",15]],[[["signatureserialization",4]],["bool",15]],[[["flags",3]],["ordering",4]],[[["flags",3]],[["ordering",4],["option",4]]],[[["id",3]],[["ordering",4],["option",4]]],[[["certid",3]],[["ordering",4],["option",4]]],[[["counterid",3]],[["ordering",4],["option",4]]],[[["keyid",3]],[["ordering",4],["option",4]]],[[["flags",3]]],[[],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]],["flags",3]],[[["flags",3]]],[[["flags",3]]],[[["flags",3]]],[[]],[[["mechanism",4]],[["error",4],["result",4]]],[[["shortdata",6]],["result",4]],[[["intoiterator",8]],["flags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["intoiterator",8]]],[[["agree",3]]],[[["attest",3]]],[[["debugdumpstore",3]]],[[["decrypt",3]]],[[["delete",3]]],[[["deleteallkeys",3]]],[[["derivekey",3]]],[[["deserializekey",3]]],[[["encrypt",3]]],[[["exists",3]]],[[["generatekey",3]]],[[["generatesecretkey",3]]],[[["hash",3]]],[[["locatefile",3]]],[[["readdirfilesfirst",3]]],[[["readdirfilesnext",3]]],[[["readdirfirst",3]]],[[["readdirnext",3]]],[[["readfile",3]]],[[["removefile",3]]],[[["removedir",3]]],[[["removedirall",3]]],[[["randombytes",3]]],[[["serializekey",3]]],[[["sign",3]]],[[["writefile",3]]],[[["unsafeinjectkey",3]]],[[["unsafeinjectsharedkey",3]]],[[["unwrapkey",3]]],[[["verify",3]]],[[["wrapkey",3]]],[[["requestuserconsent",3]]],[[["reboot",3]]],[[["uptime",3]]],[[["createcounter",3]]],[[["incrementcounter",3]]],[[["deletecertificate",3]]],[[["readcertificate",3]]],[[["writecertificate",3]]],[[["reply",4]],["agree",3]],[[["reply",4]],["attest",3]],[[["reply",4]],["debugdumpstore",3]],[[["reply",4]],["decrypt",3]],[[["reply",4]],["delete",3]],[[["reply",4]],["deleteallkeys",3]],[[["reply",4]],["derivekey",3]],[[["reply",4]],["deserializekey",3]],[[["reply",4]],["encrypt",3]],[[["reply",4]],["exists",3]],[[["reply",4]],["generatekey",3]],[[["reply",4]],["generatesecretkey",3]],[[["reply",4]],["hash",3]],[[["reply",4]],["locatefile",3]],[[["reply",4]],["readdirfilesfirst",3]],[[["reply",4]],["readdirfilesnext",3]],[[["reply",4]],["readdirfirst",3]],[[["reply",4]],["readdirnext",3]],[[["reply",4]],["readfile",3]],[[["reply",4]],["removedir",3]],[[["reply",4]],["removedirall",3]],[[["reply",4]],["removefile",3]],[[["reply",4]],["randombytes",3]],[[["reply",4]],["serializekey",3]],[[["reply",4]],["sign",3]],[[["reply",4]],["writefile",3]],[[["reply",4]],["verify",3]],[[["reply",4]],["unsafeinjectkey",3]],[[["reply",4]],["unsafeinjectsharedkey",3]],[[["reply",4]],["unwrapkey",3]],[[["reply",4]],["wrapkey",3]],[[["reply",4]],["requestuserconsent",3]],[[["reply",4]],["reboot",3]],[[["reply",4]],["uptime",3]],[[["reply",4]],["createcounter",3]],[[["reply",4]],["incrementcounter",3]],[[["reply",4]],["deletecertificate",3]],[[["reply",4]],["readcertificate",3]],[[["reply",4]],["writecertificate",3]],[[["kind",4]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[]],[[],["request",4]],[[],["reply",4]],[[],["agree",3]],[[],["attest",3]],[[],["debugdumpstore",3]],[[],["decrypt",3]],[[],["delete",3]],[[],["deleteallkeys",3]],[[],["derivekey",3]],[[],["deserializekey",3]],[[],["encrypt",3]],[[],["exists",3]],[[],["generatekey",3]],[[],["generatesecretkey",3]],[[],["hash",3]],[[],["locatefile",3]],[[],["readdirfilesfirst",3]],[[],["readdirfilesnext",3]],[[],["readdirfirst",3]],[[],["readdirnext",3]],[[],["readfile",3]],[[],["removefile",3]],[[],["removedir",3]],[[],["removedirall",3]],[[],["randombytes",3]],[[],["serializekey",3]],[[],["sign",3]],[[],["writefile",3]],[[],["unsafeinjectkey",3]],[[],["unsafeinjectsharedkey",3]],[[],["unwrapkey",3]],[[],["verify",3]],[[],["wrapkey",3]],[[],["requestuserconsent",3]],[[],["reboot",3]],[[],["uptime",3]],[[],["createcounter",3]],[[],["incrementcounter",3]],[[],["deletecertificate",3]],[[],["readcertificate",3]],[[],["writecertificate",3]],[[],["agree",3]],[[],["attest",3]],[[],["debugdumpstore",3]],[[],["decrypt",3]],[[],["delete",3]],[[],["deleteallkeys",3]],[[],["derivekey",3]],[[],["deserializekey",3]],[[],["encrypt",3]],[[],["exists",3]],[[],["generatekey",3]],[[],["generatesecretkey",3]],[[],["hash",3]],[[],["locatefile",3]],[[],["readdirfilesfirst",3]],[[],["readdirfilesnext",3]],[[],["readdirfirst",3]],[[],["readdirnext",3]],[[],["readfile",3]],[[],["removedir",3]],[[],["removedirall",3]],[[],["removefile",3]],[[],["randombytes",3]],[[],["serializekey",3]],[[],["sign",3]],[[],["writefile",3]],[[],["verify",3]],[[],["unsafeinjectkey",3]],[[],["unsafeinjectsharedkey",3]],[[],["unwrapkey",3]],[[],["wrapkey",3]],[[],["requestuserconsent",3]],[[],["reboot",3]],[[],["uptime",3]],[[],["createcounter",3]],[[],["incrementcounter",3]],[[],["deletecertificate",3]],[[],["readcertificate",3]],[[],["writecertificate",3]],[[],["clienterror",4]],[[],["error",4]],[[],["key",3]],[[],["info",3]],[[],["kind",4]],[[],["flags",3]],[[],["secrecy",4]],[[],["trussedinterchange",4]],[[],["tbscertificate",3]],[[],["certificate",3]],[[],["serializedsignature",4]],[[],["version",4]],[[],["bigendianinteger",3]],[[],["signaturealgorithm",4]],[[],["name",3]],[[],["extension",4]],[[],["extensions",3]],[[],["datetime",3]],[[],["validity",3]],[[],["serializedsubjectpublickey",4]],[[],["readdirstate",3]],[[],["readdirfilesstate",3]],[[],["id",3]],[[],["certid",3]],[[],["counterid",3]],[[],["keyid",3]],[[],["status",4]],[[],["to",4]],[[],["level",4]],[[],["urgency",4]],[[],["error",4]],[[],["attributes",4]],[[],["certificatetype",4]],[[],["dataattributes",3]],[[],["keyattributes",3]],[[],["letters",3]],[[],["objecttype",4]],[[],["publickeyattributes",3]],[[],["privatekeyattributes",3]],[[],["location",4]],[[],["storageattributes",3]],[[],["mechanism",4]],[[],["keyserialization",4]],[[],["signatureserialization",4]],[[]],[[],["name",3]],[[],["dataattributes",3]],[[]],[[],["letters",3]],[[]],[[]],[[],["option",4]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],[["length",3],["result",6]]],[[["encoder",3]],["result",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],[["berlength",3],["berresult",6]]],[[["encoder",3]],["berresult",6]],[[],["tag",3]],[[],["result",6]],[[],["result",6]],[[],["bytes",3]],[[],["bytes",3]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[]],[[]],[[],[["bytes",3],["result",4]]],[[],[["bytes",3],["result",4]]],[[],[["result",4],["bytes",3]]],[[["usize",15]],["result",4]],[[["usize",15],["u8",15]],[["u8",15],["result",4]]],[[["usize",15]],[["result",4],["u8",15]]],[[["usize",15]],["result",4]],[[]],[[],["bytes",3]],[[],[["bytes",3],["result",4]]],[[],["bytes",3]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]],[[]],[[]],[[],["genericarray",3]],[[],["genericarray",3]],[[],["genericarray",3]],[[],[["option",4],["genericarray",3]]],[[],["string",3]],[[["vec",3],["u8",15]],[["string",3],["result",4],["utf8error",3]]],[[["vec",3],["u8",15]],["string",3]],[[],[["vec",3],["u8",15]]],[[],["str",15]],[[],["str",15]],[[],["vec",3]],[[["str",15]],["result",4]],[[],["usize",15]],[[["char",15]],["result",4]],[[["usize",15]]],[[],[["option",4],["char",15]]],[[]],[[],["vec",3]],[[],[["result",4],["vec",3]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["option",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["metadata",3]],[[],["filetype",4]],[[],["path",3]],[[],["path",3]],[[],["allocation",3]],[[],[["error",4],["result",4]]],[[],["bool",15]],[[]],[[],[["result",4],["error",4]]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["result",4],["error",4]]],[[],[["usize",15],["result",4],["error",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["usize",15],["result",4],["error",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4],["metadata",3]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[],["openoptions",3]],[[["path",3]],[["result",4],["error",4]]],[[["path",3],["u8",15]],[["result",4],["error",4],["option",4]]],[[["path",3],["u8",15]],[["error",4],["result",4]]],[[["path",3],["attribute",3]],[["error",4],["result",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3],["readdirallocation",3]],[["error",4],["result",4],["readdir",3]]],[[["allocation",3]],[["error",4],["result",4],["filesystem",3]]],[[]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["vec",3],["result",4],["error",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["pathbuf",3]],[[]],[[["path",3]]]],"p":[[3,"Agree"],[3,"Attest"],[3,"Decrypt"],[3,"Delete"],[3,"DeleteAllKeys"],[3,"DeriveKey"],[3,"DeserializeKey"],[3,"Encrypt"],[3,"Exists"],[3,"GenerateKey"],[3,"GenerateSecretKey"],[3,"Hash"],[3,"LocateFile"],[3,"ReadDirFilesFirst"],[3,"ReadDirFirst"],[3,"ReadFile"],[3,"RemoveFile"],[3,"RemoveDir"],[3,"RemoveDirAll"],[3,"RandomBytes"],[3,"SerializeKey"],[3,"Sign"],[3,"WriteFile"],[3,"UnsafeInjectKey"],[3,"UnsafeInjectSharedKey"],[3,"UnwrapKey"],[3,"Verify"],[3,"WrapKey"],[3,"RequestUserConsent"],[3,"Reboot"],[3,"CreateCounter"],[3,"IncrementCounter"],[3,"DeleteCertificate"],[3,"ReadCertificate"],[3,"WriteCertificate"],[3,"Agree"],[3,"Attest"],[3,"Decrypt"],[3,"Delete"],[3,"DeleteAllKeys"],[3,"DeriveKey"],[3,"DeserializeKey"],[3,"Encrypt"],[3,"Exists"],[3,"GenerateKey"],[3,"GenerateSecretKey"],[3,"Hash"],[3,"LocateFile"],[3,"ReadDirFilesFirst"],[3,"ReadDirFilesNext"],[3,"ReadDirFirst"],[3,"ReadDirNext"],[3,"ReadFile"],[3,"RemoveDirAll"],[3,"RandomBytes"],[3,"SerializeKey"],[3,"Sign"],[3,"Verify"],[3,"UnsafeInjectKey"],[3,"UnsafeInjectSharedKey"],[3,"UnwrapKey"],[3,"WrapKey"],[3,"RequestUserConsent"],[3,"Uptime"],[3,"CreateCounter"],[3,"IncrementCounter"],[3,"ReadCertificate"],[3,"WriteCertificate"],[4,"Request"],[4,"Reply"],[8,"Aes256Cbc"],[8,"Chacha8Poly1305"],[8,"HmacBlake2s"],[8,"HmacSha1"],[8,"HmacSha256"],[8,"HmacSha512"],[8,"Ed255"],[8,"P256"],[8,"Sha256"],[8,"Tdes"],[8,"Totp"],[8,"X255"],[4,"ClientError"],[8,"PollClient"],[3,"FutureResult"],[3,"ClientImplementation"],[8,"CertificateClient"],[8,"CryptoClient"],[8,"CounterClient"],[8,"FilesystemClient"],[8,"ManagementClient"],[8,"UiClient"],[4,"Error"],[3,"Key"],[3,"Info"],[4,"Kind"],[3,"Flags"],[4,"Secrecy"],[4,"TrussedInterchange"],[3,"ServiceEndpoint"],[8,"RngCore"],[8,"UserInterface"],[8,"Platform"],[8,"Syscall"],[4,"SerializedSignature"],[4,"Version"],[3,"BigEndianInteger"],[4,"SignatureAlgorithm"],[3,"Name"],[3,"ParsedDatetime"],[4,"SerializedSubjectPublicKey"],[8,"SeedableRng"],[8,"Agree"],[8,"Decrypt"],[8,"DeriveKey"],[8,"DeserializeKey"],[8,"Encrypt"],[8,"Exists"],[8,"GenerateKey"],[8,"Hash"],[8,"SerializeKey"],[8,"Sign"],[8,"UnsafeInjectKey"],[8,"UnwrapKey"],[8,"Verify"],[8,"WrapKey"],[3,"ServiceResources"],[3,"Service"],[8,"Certstore"],[3,"ClientCertstore"],[3,"ClientCounterstore"],[8,"Counterstore"],[3,"ClientFilestore"],[8,"Filestore"],[3,"ClientKeystore"],[8,"Keystore"],[8,"Store"],[3,"Fs"],[4,"Status"],[4,"To"],[4,"Level"],[4,"Urgency"],[4,"Error"],[8,"LfsStorage"],[3,"Id"],[3,"CertId"],[3,"CounterId"],[3,"KeyId"],[4,"Attributes"],[4,"CertificateType"],[3,"DataAttributes"],[3,"KeyAttributes"],[3,"Letters"],[4,"ObjectType"],[4,"Location"],[3,"StorageAttributes"],[4,"Mechanism"],[4,"KeySerialization"],[4,"SignatureSerialization"],[8,"Interchange"],[8,"ArrayLength"],[3,"DebugDumpStore"],[3,"ReadDirFilesNext"],[3,"ReadDirNext"],[3,"Uptime"],[3,"DebugDumpStore"],[3,"RemoveDir"],[3,"RemoveFile"],[3,"WriteFile"],[3,"Reboot"],[3,"DeleteCertificate"],[3,"Bytes"],[3,"Aes256Cbc"],[3,"Chacha8Poly1305"],[3,"Ed255"],[3,"HmacBlake2s"],[3,"HmacSha1"],[3,"HmacSha256"],[3,"HmacSha512"],[3,"P256"],[3,"P256Prehashed"],[3,"Sha256"],[3,"Tdes"],[3,"Totp"],[3,"Trng"],[3,"X255"],[3,"TbsCertificate"],[3,"Certificate"],[4,"Extension"],[3,"Extensions"],[3,"Datetime"],[3,"Validity"],[3,"ReadDirState"],[3,"ReadDirFilesState"],[3,"B0"],[3,"B1"],[3,"Z0"],[3,"GenericArray"],[3,"String"],[3,"Vec"],[3,"DirEntry"],[3,"Filesystem"],[3,"PathBuf"],[3,"PublicKeyAttributes"],[3,"PrivateKeyAttributes"]]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":[0,3,11,3,11,0,3,3,11,11,3,11,0,8,8,8,10,8,18,18,10,10,10,8,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,10,10,10,10,10,8,18,18,18,18,18,10,10,10,10,10,8,8,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,8,16,8,16,8,16,10,8,16,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,8,16,8,16,8,10,0,3,11,3,11,8,16,6,8,16,6,0,3,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bit","B0","new","B1","new","int","PInt","NInt","new","new","Z0","new","marker_traits","NonZero","Zero","Ord","to_ordering","Bit","U8","BOOL","new","to_u8","to_bool","Unsigned","U8","U16","U32","U64","USIZE","I8","I16","I32","I64","ISIZE","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","Integer","I8","I16","I32","I64","ISIZE","to_i8","to_i16","to_i32","to_i64","to_isize","TypeArray","PowerOfTwo","operator_aliases","And","Or","Xor","Shleft","Shright","Sum","Diff","Prod","Quot","Mod","PartialQuot","Negate","AbsVal","Exp","Gcf","Add1","Sub1","Double","Square","Cube","Sqrt","Compare","Length","Minimum","Maximum","Le","Eq","Gr","GrEq","LeEq","NotEq","Log2","type_operators","Same","Output","Abs","Output","Pow","Output","powi","Cmp","Output","Len","Output","len","PartialDiv","Output","partial_div","Min","Output","min","Max","Output","max","IsLess","Output","is_less","IsEqual","Output","is_equal","IsGreater","Output","is_greater","IsLessOrEqual","Output","is_less_or_equal","IsNotEqual","Output","is_not_equal","IsGreaterOrEqual","Output","is_greater_or_equal","SquareRoot","Output","Logarithm2","Output","Gcd","Output","ToInt","to_int","uint","UTerm","new","UInt","new","GetBit","Output","GetBitOut","SetBit","Output","SetBitOut","array","ATerm","TArr","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","Greater","Less","Equal","op","cmp","tarr","assert_type_eq","assert_type","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","powi","set_bit","borrow","borrow_mut","try_from","from","into","try_into","type_id","powi","set_bit","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_ordering","to_ordering","to_ordering","new","to_u8","to_bool","new","to_u8","to_bool","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","to_i8","to_i16","to_i32","to_i64","to_isize","to_i8","to_i16","to_i32","to_i64","to_isize","to_i8","to_i16","to_i32","to_i64","to_isize","powi","powi","powi","powi","powi","powi","powi","powi","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","len","len","len","len","partial_div","partial_div","partial_div","partial_div","min","min","min","min","min","min","min","min","min","min","min","min","min","min","min","max","max","max","max","max","max","max","max","max","max","max","max","max","max","max","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","get_bit","get_bit","get_bit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","div","div","div","div","div","rem","rem","rem","rem","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","eq","eq","eq","ne","eq","ne","eq","eq","eq","ne","eq","eq","ne","eq","eq","eq","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","neg","not","not","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default"],"q":["typenum","typenum::bit","","","","typenum","typenum::int","","","","","","typenum","typenum::marker_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum","typenum::operator_aliases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum","typenum::type_operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum","typenum::uint","","","","","","","","","","typenum","typenum::array","","typenum","typenum::conststypenumtypenum::bit","","","","","","","","","","","","","","typenum::int","","","","","","","","","","","","","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","typenum::array","","","","","","","","","","","","","","typenum","","","","","","","","","","","","","","","","","","","","","","","","typenum::bit","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","typenum::int","","","","","","","","","","","","","","","","","","typenum","","","typenum::int","","","","","typenum::bit","","","","typenum::int","","","","","","","","","typenum::uint","","","","","","","","","typenum::array","","typenum::uint","","typenum::array","","typenum::bit","","","","typenum::int","","","","","","","","","typenum::uint","","typenum::bit","","","","typenum::int","","","","","","","","","typenum::uint","","typenum::int","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::int","","","","","typenum::uint","","typenum::array","","typenum::int","","","","","typenum::uint","","typenum::array","","typenum::int","","","","","","","","","typenum::uint","","","","","","","typenum::array","","typenum::bit","","typenum::int","","","","","typenum::uint","","","typenum::array","","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::int","","","","","","","typenum::uint","","","","","","","","","","","typenum::array","","typenum::int","","","","","","","typenum::uint","","","","","","","","typenum::array","","typenum::int","","","","","","","","","typenum::array","","typenum::bit","","","","","typenum::uint","","typenum::bit","","","typenum::uint","","","","","","typenum::bit","","","","typenum::uint","","","","","","","","","","","","","","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum","",""],"d":["Type-level bits.","The type-level bit 0.","Instantiates a singleton representing this bit.","The type-level bit 1.","Instantiates a singleton representing this bit.","Type-level signed integers.","Type-level signed integers with positive sign.","Type-level signed integers with negative sign.","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","The type-level signed integer 0.","Instantiates a singleton representing the integer 0.","All of the <strong>marker traits</strong> used in typenum.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","","The <strong>marker trait</strong> for compile time bits.","","","Instantiates a singleton representing this bit.","","","The <strong>marker trait</strong> for compile time unsigned integers.","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","","","","","","","","","","","The <strong>marker trait</strong> for type-level arrays of type-level …","The <strong>marker trait</strong> for type-level numbers which are a power …","Aliases for the type operators used in this crate. Their …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>BitXor</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>Sub</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>Abs</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias to make it easy to add 1: …","Alias to make it easy to subtract 1: …","Alias to make it easy to multiply by 2. …","Alias to make it easy to square. …","Alias to make it easy to cube. …","Alias for the associated type of <code>SquareRoot</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>…","Should always be <code>Self</code>","A <strong>type operator</strong> that returns the absolute value.","The absolute value.","A <strong>type operator</strong> that provides exponentiation by repeated …","The result of the exponentiation.","This function isn’t used in this crate, but may be …","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","The result of the comparison. It should only ever be one …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","The length as a type-level unsigned integer.","This function isn’t used in this crate, but may be …","Division as a partial function. This <strong>type operator</strong> …","The type of the result of the division","Method for performing the division","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","The type of the minimum of <code>Self</code> and <code>Rhs</code>","Method returning the minimum","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","The type of the maximum of <code>Self</code> and <code>Rhs</code>","Method returning the maximum","A <strong>type operator</strong> that returns <code>True</code> if <code>Self < Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self > Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self <= Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self >= Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>…","The result of the integer square root.","A <strong>type operator</strong> for taking the integer binary logarithm …","The result of the integer binary logarithm.","A <strong>type operator</strong> that computes the greatest common divisor …","The greatest common divisor.","A <strong>type operator</strong> for taking a concrete integer value from …","Method returning the concrete value for the type.","Type-level unsigned integers.","The terminating type for <code>UInt</code>; it always comes after the …","Instantiates a singleton representing this unsigned …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","Instantiates a singleton representing this unsigned …","","","","A <strong>type operator</strong> that, when implemented for unsigned …","","Alias for the result of calling <code>SetBit</code>: …","A type-level array of type-level numbers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","Type aliases for many constantspotential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","Convenient type operations.","A convenience macro for comparing type numbers. Use <code>op!</code> …","Create a new type-level arrray. Only usable on Rust …","Asserts that two types are the same.","Asserts that a type is <code>True</code>, aka <code>B1</codei":[0,0,1,0,2,0,0,0,3,4,0,5,0,0,0,0,6,0,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,11,0,12,12,0,13,0,14,14,0,15,15,0,16,16,0,17,17,0,18,18,0,19,19,0,20,20,0,21,21,0,22,22,0,23,23,0,24,0,25,0,26,0,27,0,0,28,0,29,0,30,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,34,35,36,1,1,1,2,2,2,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,5,5,5,5,5,3,3,3,3,3,4,4,4,4,4,5,5,5,37,38,38,3,4,3,4,4,1,1,2,2,5,5,5,3,4,4,3,3,4,28,29,28,29,29,29,29,28,29,32,33,28,29,32,33,1,1,2,2,5,5,5,3,4,3,4,3,4,28,29,1,1,2,2,5,5,5,3,4,3,4,3,4,28,29,5,5,5,5,4,4,4,4,3,3,3,3,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,28,1,2,3,4,5,28,29,32,33,34,35,36,5,3,3,4,4,28,29,32,33,5,3,3,4,4,28,29,32,33,5,5,5,3,4,3,4,3,4,28,29,29,29,29,28,29,32,33,1,2,3,3,4,4,5,28,29,29,32,33,33,34,35,36,1,2,3,4,5,28,29,32,33,34,35,36,1,2,3,4,5,28,29,32,33,34,35,36,5,3,4,3,4,3,4,28,29,28,29,29,28,29,29,29,29,29,32,33,5,3,4,3,4,3,4,29,28,28,29,29,28,29,29,32,33,5,3,4,5,3,4,5,3,4,32,33,1,2,1,2,2,28,29,1,1,2,28,29,29,29,29,29,1,2,1,2,28,29,28,28,29,29,29,28,29,28,29,28,28,29,29,29,1,2,3,4,5,28,29,32,33,34,35,36,1,2,3,4,5,28,29,32,33,34,35,36,1,2,3,4,5,28,29,34,35,36],"f":[null,null,[[],["b0",3]],null,[[],["b1",3]],null,null,null,[[],["pint",3]],[[],["nint",3]],null,[[],["z0",3]],null,null,null,null,[[],["ordering",4]],null,null,null,[[]],[[],["u8",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],null,null,null,null,null,null,[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,null,null,null,null,null,[[]],null,null,[[],["uterm",3]],null,[[],["uint",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[]],[[],["u8",15]],[[],["bool",15]],[[]],[[],["u8",15]],[[],["bool",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["uint",3],["nint",3]]],[[["nint",3],["uint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["uint",3],["pint",3]]],[[["pint",3],["uint",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["uterm",3]]],[[["uterm",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[]],[[]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["b0",3]],["b0",3]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[]],[[]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[["b0",3]],["b1",3]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[]],[[]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[["u0",6]]],[[["uint",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b1",3]]],[[["uterm",3]]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[["b0",3]],["bool",15]],[[["b1",3]],["bool",15]],[[["pint",3]],["bool",15]],[[["pint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["uterm",3]],["bool",15]],[[["uint",3]],["bool",15]],[[["uint",3]],["bool",15]],[[["aterm",3]],["bool",15]],[[["tarr",3]],["bool",15]],[[["tarr",3]],["bool",15]],[[["greater",3]],["bool",15]],[[["less",3]],["bool",15]],[[["equal",3]],["bool",15]],[[["b0",3]],["ordering",4]],[[["b1",3]],["ordering",4]],[[["pint",3]],["ordering",4]],[[["nint",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["uterm",3]],["ordering",4]],[[["uint",3]],["ordering",4]],[[["aterm",3]],["ordering",4]],[[["tarr",3]],["ordering",4]],[[["greater",3]],["ordering",4]],[[["less",3]],["ordering",4]],[[["equal",3]],["ordering",4]],[[["b0",3]],[["ordering",4],["option",4]]],[[["b1",3]],[["ordering",4],["option",4]]],[[["pint",3]],[["ordering",4],["option",4]]],[[["nint",3]],[["ordering",4],["option",4]]],[[["z0",3]],[["ordering",4],["option",4]]],[[["uterm",3]],[["ordering",4],["option",4]]],[[["uint",3]],[["ordering",4],["option",4]]],[[["aterm",3]],[["ordering",4],["option",4]]],[[["tarr",3]],[["ordering",4],["option",4]]],[[["greater",3]],[["ordering",4],["option",4]]],[[["less",3]],[["ordering",4],["option",4]]],[[["equal",3]],[["ordering",4],["option",4]]],[[]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b1",3]]],[[]],[[["uterm",3]]],[[["uint",3],["b0",3]]],[[["b1",3],["uint",3]]],[[["uint",3],["b0",3]]],[[["b1",3],["uint",3]]],[[["aterm",3]]],[[["tarr",3]]],[[]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["uterm",3]]],[[]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["aterm",3]]],[[["aterm",3]]],[[["aterm",3]]],[[["tarr",3]]],[[["tarr",3]]],[[["tarr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[]],[[["uterm",3]]],[[["uint",3],["b0",3]]],[[["b1",3],["uint",3]]],[[["uint",3],["b0",3]]],[[["b1",3],["uint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["uterm",3]]],[[]],[[["uint",3]]],[[]],[[["uterm",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["uint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["b0",3]],[[],["b1",3]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[],["uterm",3]],[[],["uint",3]],[[],["aterm",3]],[[],["tarr",3]],[[],["greater",3]],[[],["less",3]],[[],["equal",3]],[[],["b0",3]],[[],["b1",3]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[],["uterm",3]],[[],["uint",3]],[[],["greater",3]],[[],["less",3]],[[],["equal",3]]],"p":[[3,"B0"],[3,"B1"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[8,"ToInt"],[3,"UTerm"],[3,"UInt"],[8,"GetBit"],[8,"SetBit"],[3,"ATerm"],[3,"TArr"],[3,"Greater"],[3,"Less"],[3,"Equal"],[6,"P1"],[6,"N1"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_start","is_xid_continue"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid …","Methods for determining if a character is a valid …","Returns whether the specified character satisfies the ‘…","Returns whether the specified <code>char</code> satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]},\
"universal_hash":{"doc":"Traits for Universal Hash Functions.","t":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,6,6,8,16,10,8,16,10,11,10,10,11,11,3,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","B0","B1","Z0","Key","Block","NewUniversalHash","KeySize","new","UniversalHash","BlockSize","update","update_padded","reset","finalize","finalize_reset","verify","Output","new","into_bytes","Error","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","rem","bitand","bitand","bitand","clone","clone","clone","eq","eq","eq","max","max","max","max","max","max","max","bitor","bitor","bitor","add","fmt","fmt","fmt","not","not","sub","sub","sub","bitxor","bitxor","bitxor","bitxor","to_int","to_int","to_int","to_int","new","to_u8","to_bool","new","to_u8","to_bool","min","min","min","min","min","min","min","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","div","partial_cmp","partial_cmp","partial_cmp","default","default","default","neg","mul","mul","mul","to_i8","to_i16","to_i32","to_i64","to_isize","hash","hash","hash","cmp","cmp","cmp","fmt","fmt","eq","eq","from","from","clone","clone","default","ct_eq","new","new","new"],"q":["universal_hash","universal_hash::constsuniversal_hash","","","","","","","","","","","","","","","","","universal_hash::consts","","","","","","","","","","","","","","","","","","","","","","universal_hash","","","","","","","","","","","","","","universal_hash::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","universal_hash","","","","","","","","","","universal_hash::consts","",""],"d":["Type aliases for many constantshe type-level bit 0.","The type-level bit 1.","The type-level signed integer 0.","Keys to a [<code>UniversalHash</code>].","Blocks are inputs to a [<code>UniversalHash</code>].","Instantiate a [<code>UniversalHash</code>] algorithm.","Size of the key for the universal hash function.","Instantiate a universal hash function with the given key.","The [<code>UniversalHash</code>] trait defines a generic interface for …","Size of the inputs to and outputs from the universal hash …","Input a block into the universal hash function","Input data into the universal hash function. If the …","Reset [<code>UniversalHash</code>] instance.","Obtain the [<code>Output</code>] of a [<code>UniversalHash</code>] function and …","Obtain the [<code>Output</code>] of a [<code>UniversalHash</code>] computation and …","Verify the [<code>UniversalHash</code>] of the processed input matches …","Outputs of universal hash functions which are a thin …","Create a new [<code>Output</code>] block.","Get the inner [<code>GenericArray</code>] this type wraps","Error type for when the [<code>Output</code>] of a [<code>UniversalHash</code>] is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","Instantiates a singleton representing the integer 0."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,2,2,2,0,3,3,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,7,7,7,7,7,7,7,6,5,4,5,6,5,4,5,6,4,5,4,6,5,6,4,6,5,4,4,6,4,5,6,4,5,6,6,6,4,5,4,5,6,6,6,6,5,5,5,4,4,4,4,4,6,6,5,5,6,6,6,6,6,6,4,5,4,5,6,6,4,5,6,6,5,4,6,6,6,6,6,6,6,6,6,5,4,6,5,6,4,7,7,3,7,3,3,3,7,7,3,4,5,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["key",6]]],null,null,[[["block",6]]],[[]],[[]],[[],["output",3]],[[],["output",3]],[[["block",6]],[["error",3],["result",4]]],null,[[["block",6]],["output",3]],[[],["block",6]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[["b1",3]]],[[]],[[["b0",3]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[["b1",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["b0",3]],["bool",15]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["b1",3]],["b1",3]],[[["pint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[],["i8",15]],[[],["i64",15]],[[],["i16",15]],[[],["i32",15]],[[],["b1",3]],[[],["u8",15]],[[],["bool",15]],[[],["b0",3]],[[],["u8",15]],[[],["bool",15]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["z0",3]]],[[["pint",3]]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["pint",3]]],[[]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[],["z0",3]],[[],["b1",3]],[[],["b0",3]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[]],[[]],[[]],[[["b1",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["b0",3]],["ordering",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["output",3]],["bool",15]],[[["error",3]],["bool",15]],[[["block",6]]],[[["block",6]]],[[],["output",3]],[[],["error",3]],[[],["error",3]],[[],["choice",3]],[[],["b0",3]],[[],["b1",3]],[[],["z0",3]]],"p":[[8,"NewUniversalHash"],[8,"UniversalHash"],[3,"Output"],[3,"B0"],[3,"B1"],[3,"Z0"],[3,"Error"]]},\
"void":{"doc":"Void","t":[4,5,8,10,8,10,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Void","unreachable","ResultVoidExt","void_unwrap","ResultVoidErrExt","void_unwrap_err","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","eq","partial_cmp","clone"],"q":["void","","","","","","","","","","","","","","","","",""],"d":["The empty type for cases which can’t occur.","A safe version of <code>intrinsincs::unreachable</code>.","Extensions to <code>Result<T, Void></code>","Get the value out of a wrapper.","Extensions to <code>Result<Void, E></code>","Get the error out of a wrapper.","","","","","","","","","","","",""],"i":[0,0,0,1,0,2,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,[[["void",4]]],null,[[]],null,[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[],[["ordering",4],["option",4]]],[[],["void",4]]],"p":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]},\
"wyz":{"doc":"<code>wyz</code> – myrrlyn’s wyzyrdly library","t":[0,8,11,8,11,0,8,11,11,11,11,11,11,11,11,3,12,3,12,3,12,3,12,3,12,3,12,3,12,3,12,0,8,11,8,11,11,8,11,11,8,11,11,8,11,11,0,8,11,11,11,11,8,11,11,11,11,8,11,11,11,11,8,11,11,11,11,8,10,11,10,11,10,11,8,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["conv","Conv","conv","TryConv","try_conv","fmt","FmtForward","fmt_binary","fmt_display","fmt_lower_exp","fmt_lower_hex","fmt_octal","fmt_pointer","fmt_upper_exp","fmt_upper_hex","FmtBinary","0","FmtDisplay","0","FmtLowerExp","0","FmtLowerHex","0","FmtOctal","0","FmtPointer","0","FmtUpperExp","0","FmtUpperHex","0","pipe","Pipe","pipe","PipeRef","pipe_ref","pipe_mut","PipeBorrow","pipe_borrow","pipe_borrow_mut","PipeAsRef","pipe_as_ref","pipe_as_mut","PipeDeref","pipe_deref","pipe_deref_mut","tap","Tap","tap","tap_dbg","tap_mut","tap_mut_dbg","TapBorrow","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","TapAsRef","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","TapDeref","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","TapOption","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","tap_none","tap_none_dbg","TapResult","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut"],"q":["wyz","wyz::conv","","","","wyz","wyz::fmt","","","","","","","","","","","","","","","","","","","","","","","","","wyz","wyz::pipe","","","","","","","","","","","","","","wyz","wyz::tap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wyz::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Directed Type Conversion","Directed Type Conversion","Converts <code>self</code> into a target type.","Directed Fallible Type Conversion","Attempts to convert <code>self</code> into a target type.","Format forwarding","Wraps any value with a format-forward to <code>Debug</code>.","Causes <code>self</code> to use its <code>Binary</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Display</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>LowerExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>LowerHex</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Octal</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Pointer</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperHex</code> implementation when <code>Debug</code>…","Forwards a type’s <code>Binary</code> formatting implementation to …","","Forwards a type’s <code>Display</code> formatting implementation to …","","Forwards a type’s <code>LowerExp</code> formatting implementation to …","","Forwards a type’s <code>LowerHex</code> formatting implementation to …","","Forwards a type’s <code>Octal</code> formatting implementation to …","","Forwards a type’s <code>Pointer</code> formatting implementation to …","","Forwards a type’s <code>UpperExp</code> formatting implementation to …","","Forwards a type’s <code>UpperHex</code> formatting implementation to …","","Pipe objects into functions, even those not available for …","Permit suffixed call of any function on a value.","Pipes a value into a function that cannot ordinarily be …","Referential piping.","Pipes a reference into a function that cannot ordinarily …","Pipes a mutable reference into a function that cannot …","Calls the <code>Borrow</code> or <code>BorrowMut</code> traits before piping.","Pipes a trait borrow into a function that cannot normally …","Pipes a trait mutable borrow into a function that cannot …","Calls the <code>AsRef</code> or <code>AsMut</code> traits before piping.","Pipes a trait borrow into a function that cannot normally …","Pipes a trait mutable borrow into a function that cannot …","Calls the <code>Deref</code> or <code>DerefMut</code> traits before piping.","Pipes a dereference into a function that cannot normally …","Pipes a mutable dereference into a function that cannot …","Object Tapping","Value Tap","Provides immutable access for inspection.","Calls <code>tap</code> in debug builds, and does nothing in release …","Provides mutable access for modification.","Calls <code>tap_mut</code> in debug builds, and does nothing in …","Borrowing Tap","Provides immutable access to the borrow for inspection.","Calls <code>tap_borrow</code> in debug builds, and does nothing in …","Provides mutable access to the borrow for modification.","Calls <code>tap_borrow_mut</code> in debug builds, and does nothing in …","Referential Tap","Provides immutable access to the reference for inspection.","Calls <code>tap_ref</code> in debug builds, and does nothing in …","Provides mutable access to the reference for modification.","Calls <code>tap_ref_mut</code> in debug builds, and does nothing in …","Dereferencing Tap","Immutably dereferences <code>self</code> for inspection.","Calls <code>tap_deref</code> in debug builds, and does nothing in …","Mutably dereferences <code>self</code> for modification.","Calls <code>tap_deref_mut</code> in debug builds, and does nothing in …","Optional Tap","Provides the interior value for inspection if present.","Calls <code>tap_some</code> in debug builds, and does nothing in …","Provides the interior value for modification if present.","Calls <code>tap_some_mut</code> in debug builds, and does nothing in …","Runs the provided function if the <code>Option</code> is empty.","Calls <code>tap_none</code> in debug builds, and does nothing in …","Result Tap","Provides the inner value for inspection if the <code>Result</code> is …","Calls <code>tap_ok</code> in debug builds, and does nothing in release …","Provides the inner value for modification if the <code>Result</code> …","Calls <code>tap_ok_mut</code> in debug builds, and does nothing in …","Provides the inner error value for inspection if the …","Calls <code>tap_err</code> in debug builds, and does nothing in …","Provides the inner error value for modification if the …","Calls <code>tap_err_mut</code> in debug builds, and does nothing in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,2,0,0,3,3,3,3,3,3,3,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,0,12,0,13,13,0,14,14,0,15,15,0,16,16,0,0,17,17,17,17,0,18,18,18,18,0,19,19,19,19,0,20,20,20,20,0,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11],"f":[null,null,[[],["sized",8]],null,[[],[["sized",8],["result",4]]],null,null,[[],["fmtbinary",3]],[[],["fmtdisplay",3]],[[],["fmtlowerexp",3]],[[],["fmtlowerhex",3]],[[],["fmtoctal",3]],[[],["fmtpointer",3]],[[],["fmtupperexp",3]],[[],["fmtupperhex",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],null,[[]],[[]],null,[[]],[[]],null,[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],null,[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"Conv"],[8,"TryConv"],[8,"FmtForward"],[3,"FmtBinary"],[3,"FmtDisplay"],[3,"FmtLowerExp"],[3,"FmtLowerHex"],[3,"FmtOctal"],[3,"FmtPointer"],[3,"FmtUpperExp"],[3,"FmtUpperHex"],[8,"Pipe"],[8,"PipeRef"],[8,"PipeBorrow"],[8,"PipeAsRef"],[8,"PipeDeref"],[8,"Tap"],[8,"TapBorrow"],[8,"TapAsRef"],[8,"TapDeref"],[8,"TapOption"],[8,"TapResult"]]},\
"zeroize":{"doc":"Securely zero memory with a simple trait (Zeroize) built …","t":[24,8,10,8,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Zeroize","Zeroize","zeroize","DefaultIsZeroes","TryZeroize","try_zeroize","Zeroizing","new","borrow","borrow_mut","try_from","from","from","into","try_into","type_id","zeroize","deref","deref_mut","fmt","eq","ne","drop","from","clone"],"q":["zeroize","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Derive the <code>Zeroize</code> trait.","Trait for securely erasing types from memory","Zero out this object from memory using Rust intrinsics …","Marker trait for types whose <code>Default</code> is the desired …","Fallible trait for representing cases where zeroization …","Try to zero out this object from memory using Rust …","<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …","Move value inside a <code>Zeroizing</code> wrapper which ensures it …","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,[[]],null,null,[[],["bool",15]],null,[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["zeroizing",3]],["bool",15]],[[["zeroizing",3]],["bool",15]],[[]],[[],["zeroizing",3]],[[],["zeroizing",3]]],"p":[[8,"Zeroize"],[8,"TryZeroize"],[3,"Zeroizing"]]},\
"zeroize_derive":{"doc":"Custom derive support for <code>zeroize</code>","t":[24],"n":["Zeroize"],"q":["zeroize_derive"],"d":["Derive the <code>Zeroize</code> trait."],"i":[0],"f":[null],"p":[]}\
}');
initSearch(searchIndex);